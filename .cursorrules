# Cursor Rules for MLSysBook Textbook Project

## üö´ NEVER work directly on main branch
- Always create a feature branch for any new development work
- Branch naming convention: `feature/description` or `fix/description`
- Example: `feature/add-new-cleanup-method`, `fix/improve-file-detection`

## üìù Commit Guidelines
- **MANDATORY: Run `pre-commit run --all-files` before every commit**
- Make atomic commits with clear, descriptive messages
- Use conventional commit format: `type(scope): description`
- Types: feat, fix, docs, style, refactor, test, chore
- Never use exclamation marks (!) in commit messages or shell commands
- Examples:
  - `feat(cleanup): add support for large file detection`
  - `fix(ui): improve file selection interface`
  - `docs(readme): update installation instructions`

## üîÑ Branch Management
- Create branches from main: `git checkout -b feature/your-feature-name`
- Keep branches focused on single features or fixes
- Delete branches after merging to main
- Never commit directly to main branch

## üöÄ Development Workflow
1. Always start with: `git checkout main && git pull origin main`
2. Create feature branch: `git checkout -b feature/your-feature`
3. Make changes
4. **Run `pre-commit run --all-files` before every commit**
5. Commit frequently with meaningful messages (only after pre-commit passes)
6. Test your changes thoroughly
7. Push branch: `git push origin feature/your-feature`
8. Create pull request for review
9. Merge only after approval

## üìã Code Quality Standards
- Follow PEP 8 for Python code
- Add type hints to all functions
- Include docstrings for all classes and methods
- Write unit tests for new functionality
- Use meaningful variable and function names

## üîí Security & Safety
- Never commit sensitive data (API keys, passwords, etc.)
- Use environment variables for configuration
- Always ask user before pushing any changes
- Backup important files before major changes

## üìÅ Project Structure
- Keep related files organized in appropriate directories
- Use clear, descriptive file names
- Maintain consistent import structure
- Document any new dependencies
- Follow the existing book structure: contents/core/, contents/frontmatter/, contents/labs/
- Keep chapter files organized by topic
- Maintain consistent file naming: topic_name.qmd, topic_name.bib
- Organize images in chapter-specific directories

## üß™ Testing Requirements
- Write tests for new features
- Ensure existing tests pass before committing
- Use pytest for testing framework
- Aim for good test coverage
- Test book builds locally before pushing
- Verify all links and cross-references work
- Check both HTML and PDF outputs
- Ensure code examples run correctly

## üîç Pre-commit Requirements
- **CRITICAL: Never commit without running `pre-commit run --all-files` first**
- **ALWAYS ensure pre-commit hooks pass before any commit**
- **NO EXCEPTIONS: All pre-commit violations must be fixed before committing**
- Pre-commit should check: code formatting, linting, type checking, security
- If pre-commit fails, fix issues and run again until all checks pass

## üìö Documentation & Content
- Update README.md for new features
- Add inline comments for complex logic
- Document any new command-line arguments
- Keep changelog updated
- Ensure all content follows academic writing standards
- Maintain consistent terminology across chapters
- Update bibliography and references when adding new citations
- Test all code examples and ensure they work correctly

## üö® Important Reminders
- **CRITICAL: Never commit without running `pre-commit run --all-files` first**
- ALWAYS ask before pushing to remote
- Never force push to main branch
- Keep commits small and focused
- Review code before committing
- Test thoroughly before pushing

## üéØ Project-Specific Rules
- This is a Machine Learning Systems textbook project - prioritize content quality and accuracy
- Be extra careful with content changes that affect the live textbook
- Always test builds locally before pushing changes
- Maintain consistent formatting and style across all chapters
- Follow Quarto/Markdown best practices for academic writing
- Ensure all cross-references and links remain valid
- Keep the book structure and navigation consistent
- Test both HTML and PDF outputs when making structural changes

## üíª Coding & Tool Development Rules

### üèóÔ∏è Software Engineering Best Practices
- **SOLID Principles**: Single responsibility, Open/closed, Liskov substitution, Interface segregation, Dependency inversion
- **DRY Principle**: Don't repeat yourself - extract common functionality into reusable modules
- **Separation of Concerns**: Keep business logic, data access, and UI concerns separate
- **Fail Fast**: Validate inputs early and provide clear error messages
- **Defense in Depth**: Multiple layers of validation and error handling

### üì¶ Python Package Structure
- **Proper Module Organization**: Use meaningful package/module names that reflect functionality
- **Import Standards**: Use absolute imports, group imports (stdlib, third-party, local)
- **__init__.py Files**: Include proper module initialization and expose clean APIs
- **Package Dependencies**: Manage dependencies through requirements files with version pinning
- **Virtual Environments**: Always use virtual environments for development

### üîß Code Quality Standards
- **Type Hints**: MANDATORY for all function parameters, return types, and class attributes
- **Docstrings**: Google-style docstrings for all classes, methods, and functions
- **Error Handling**: Specific exception types, proper logging, graceful degradation
- **Input Validation**: Validate all inputs with clear error messages
- **Resource Management**: Use context managers for file operations, API connections
- **Configuration**: Use environment variables and config files, never hardcode values

### üèõÔ∏è Architecture Patterns
- **Command Pattern**: For CLI tools with clear command/action separation
- **Factory Pattern**: For creating objects based on configuration or runtime conditions
- **Strategy Pattern**: For interchangeable algorithms (e.g., different LLM providers)
- **Observer Pattern**: For progress reporting and event handling
- **Dependency Injection**: Make dependencies explicit and testable

### üìÅ File & Directory Structure
```
tools/scripts/
‚îú‚îÄ‚îÄ __init__.py                 # Package initialization
‚îú‚îÄ‚îÄ common/                     # Shared utilities and base classes
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ base_classes.py        # Abstract base classes
‚îÇ   ‚îú‚îÄ‚îÄ exceptions.py          # Custom exception definitions
‚îÇ   ‚îú‚îÄ‚îÄ config.py              # Configuration management
‚îÇ   ‚îú‚îÄ‚îÄ logging_config.py      # Logging setup
‚îÇ   ‚îî‚îÄ‚îÄ validators.py          # Input validation utilities
‚îú‚îÄ‚îÄ content/                    # Content management tools
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ caption_improver.py    # Specific tool modules
‚îÇ   ‚îî‚îÄ‚îÄ section_manager.py
‚îú‚îÄ‚îÄ maintenance/               # System maintenance tools
‚îú‚îÄ‚îÄ testing/                   # Test utilities and frameworks
‚îî‚îÄ‚îÄ utils/                     # General utility functions
```

### üß™ Testing Requirements
- **Unit Tests**: Test individual functions and classes in isolation
- **Integration Tests**: Test component interactions
- **End-to-End Tests**: Test complete workflows
- **Property-Based Testing**: For complex algorithms with many edge cases
- **Mock External Dependencies**: File systems, APIs, network calls
- **Test Coverage**: Aim for >80% code coverage, 100% for critical paths

### üîç Code Review Standards
- **Single Responsibility**: Each function/class should have one clear purpose
- **Function Length**: Keep functions under 50 lines when possible
- **Cognitive Complexity**: Avoid deeply nested conditionals and loops
- **Magic Numbers**: Use named constants instead of literal values
- **Dead Code**: Remove unused imports, variables, and functions
- **Performance**: Consider time/space complexity for data processing tools

### üìä Logging & Monitoring
- **Structured Logging**: Use consistent log levels and structured data
- **Progress Indicators**: For long-running operations with rich progress bars
- **Error Context**: Include relevant context in error messages
- **Performance Metrics**: Track execution time for optimization opportunities
- **Debug Information**: Comprehensive debug logging for troubleshooting

### üõ°Ô∏è Security & Safety Practices
- **Input Sanitization**: Sanitize all user inputs, especially file paths
- **Path Traversal Prevention**: Validate file paths to prevent directory traversal
- **API Key Management**: Never hardcode API keys, use environment variables
- **Safe File Operations**: Use atomic operations, temporary files for safety
- **Backup Strategies**: Always backup before destructive operations
- **Permission Checks**: Verify file/directory permissions before operations

### üîÑ Backward Compatibility & Versioning
- **API Stability**: Maintain backward compatibility for internal APIs
- **Deprecation Warnings**: Provide clear migration paths for deprecated features
- **Version Pinning**: Pin dependency versions to avoid breaking changes
- **Configuration Migration**: Handle config file format changes gracefully
- **Feature Flags**: Use feature flags for experimental functionality

### üöÄ Performance & Scalability
- **Lazy Loading**: Load resources only when needed
- **Caching**: Cache expensive operations (file parsing, API calls)
- **Batch Processing**: Process multiple items efficiently
- **Memory Management**: Monitor memory usage for large data processing
- **Async Operations**: Use async/await for I/O-bound operations when beneficial
- **Resource Pooling**: Reuse expensive resources (database connections, etc.)

### üìù Documentation Requirements
- **README Files**: Each module should have clear usage documentation
- **API Documentation**: Generate API docs from docstrings
- **Architecture Documentation**: Document design decisions and patterns
- **Troubleshooting Guides**: Common issues and solutions
- **Examples**: Working code examples for complex functionality
- **Changelog**: Document breaking changes and migration paths

### üîß Development Tools Integration
- **Pre-commit Hooks**: MANDATORY formatting, linting, type checking, security scans
- **IDE Configuration**: Consistent editor settings across the team
- **Debugging Support**: Include debug configurations and utilities
- **Profiling Tools**: Integration with performance profiling tools
- **Static Analysis**: Use tools like pylint, mypy, bandit for code quality

### üåç Compatibility & Portability
- **Cross-Platform**: Code should work on Windows, macOS, and Linux
- **Python Version**: Support specified Python version range
- **Path Handling**: Use pathlib for cross-platform path operations
- **Environment Variables**: Handle different shell environments
- **Character Encoding**: Always specify UTF-8 encoding for text files

## ü§ù Expert Collaboration Guidelines
- Textbook Content: Act as an expert textbook editor - don't always agree, think critically about content quality, structure, and pedagogical effectiveness
- Code Development: Act as an expert software engineer - recommend best practices, consider maintainability, performance, and scalability
- Deployment/DevOps: Act as an expert DevOps engineer - balance complexity with maintenance ease, recommend robust CI/CD practices
- Challenge Assumptions: Question approaches that may not be optimal for the project's long-term success
- Provide Alternatives: When disagreeing, offer concrete alternatives with reasoning
- Maintain Standards: Uphold high quality standards even when it means pushing back on quick solutions
- Code Writing: Ask for confirmation before writing code unless explicitly instructed to proceed - discuss approach, design, and implementation strategy first

## üîç Code Review Checklist
Before committing, ensure:
- [ ] **FIRST: Pre-commit hooks pass (`pre-commit run --all-files`)**
- [ ] Code follows project style guidelines
- [ ] All tests pass
- [ ] No sensitive data in commits
- [ ] Meaningful commit message
- [ ] Changes are focused and atomic
- [ ] Documentation updated if needed
- [ ] Book builds successfully (for content changes)
- [ ] Tools work with both local and cloud LLMs (for tool changes)
- [ ] Error handling is robust (for tool changes)
- [ ] Progress indicators are clear (for tool changes) 