---
bibliography: ml_systems.bib
quiz: ml_systems_quizzes.json
---

# ML Systems

![*DALLÂ·E 3 Prompt: Illustration in a rectangular format depicting the merger of embedded systems with Embedded AI. The left half of the image portrays traditional embedded systems, including microcontrollers and processors, detailed and precise. The right half showcases the world of artificial intelligence, with abstract representations of machine learning models, neurons, and data flow. The two halves are distinctly separated, emphasizing the individual significance of embedded tech and AI, but they come together in harmony at the center.*](images/png/cover_ml_systems.png)

## Purpose {.unnumbered}

_How do the diverse environments where machine learning operates shape the fundamental nature of these systems, and what drives their widespread deployment across computing platforms?_

The deployment of machine learning systems across varied computing environments reveals essential insights into the relationship between theoretical principles and practical implementation. Each computing environment, from large-scale distributed systems to resource-constrained devices, introduces distinct requirements that influence both system architecture and algorithmic approaches. Understanding these relationships reveals core engineering principles that govern the design of machine learning systems. This understanding provides a foundation for examining how theoretical concepts translate into practical implementations, and how system designs adapt to meet diverse computational, memory, and energy constraints.

:::{.callout-tip title="Learning Objectives"}

- Understand the key characteristics and differences between Cloud ML, Edge ML, Mobile ML, and Tiny ML systems.

- Analyze the benefits and challenges associated with each ML paradigm.

- Explore real-world applications and use cases for Cloud ML, Edge ML, Mobile ML, and Tiny ML.

- Compare the performance aspects of each ML approach, including latency, privacy, and resource utilization.

- Examine the evolving landscape of ML systems and potential future developments.
:::

## Overview {#sec-ml-systems-overview-5d7e}

Modern machine learning systems span a spectrum of deployment options, each with its own set of characteristics and use cases. At one end, we have cloud-based ML, which leverages powerful centralized computing resources for complex, data-intensive tasks. Moving along the spectrum, we encounter edge ML, which brings computation closer to the data source for reduced latency and improved privacy. Mobile ML further extends these capabilities to smartphones and tablets, while at the far end, we find Tiny ML, which enables machine learning on extremely low-power devices with severe memory and processing constraints.

This spectrum of deployment can be visualized like Earth's geological features, each operating at different scales in our computational landscape. Cloud ML systems operate like continents, processing vast amounts of data across interconnected centers; Edge ML exists where these continental powers meet the sea, creating dynamic coastlines where computation flows into local waters; Mobile ML moves through these waters like ocean currents, carrying computing power across the digital seas; and where these currents meet the physical world, TinyML systems rise like islands, each a precise point of intelligence in the vast computational ocean.

@fig-cloud-edge-TinyML-comparison illustrates the spectrum of distributed intelligence across these approaches, providing a visual comparison of their characteristics. We will examine the unique characteristics, advantages, and challenges of each approach, as depicted in the figure. Additionally, we will discuss the emerging trends and technologies that are shaping the future of machine learning deployment, considering how they might influence the balance between these three paradigms.

::: {#fig-cloud-edge-TinyML-comparison fig-env="figure" fig-pos="htb"}
```{.tikz}
\begin{tikzpicture}[line cap=round,line join=round,font=\usefont{T1}{phv}{m}{n}\small]
  % Parameters
  \def\angle{10}        % angle
  \def\length{18}       % Lengths (cm)
  \def\npoints{5}       % number of poihnts
  \def\startfrac{0.13}  % start (e.g.. 0.2 = 20%)
  \def\endfrac{0.87}    % end (e.g.. 0.8 = 80%)

 \draw[line width=1pt, black!70] (0,0) -- ({\length*cos(\angle)}, {\length*sin(\angle)})coordinate(end);
 %
  \foreach \i in {0,1,...,\numexpr\npoints-1} {
    \pgfmathsetmacro{\t}{\startfrac + (\endfrac - \startfrac)*\i/(\npoints-1)}
\coordinate(T\i)at({\t*\length*cos(\angle)}, {\t*\length*sin(\angle)});
  }

\tikzset {
pics/gatewey/.style = {
        code = {
\colorlet{red}{white}
\begin{scope}[local bounding box=GAT,scale=0.9, every node/.append style={transform shape}]
\def\rI{4mm}
\def\rII{2.8mm}
\def\rIII{1.6mm}
\draw[red,line width=1.25pt](0,0)--(0,0.38)--(1.2,0.38)--(1.2,0)--cycle;
\draw[red,line width=1.5pt](0.6,0.4)--(0.6,0.9);

\draw[red, line width=1.5pt] (0.6,0.9)+(60:\rI) arc[start angle=60, end angle=-60, radius=\rI];
\draw[red, line width=1.5pt] (0.6,0.9)+(50:\rII) arc[start angle=50, end angle=-50, radius=\rII];
\draw[red, line width=1.5pt] (0.6,0.9)+(30:\rIII) arc[start angle=30, end angle=-30, radius=\rIII];
%
 \draw[red, line width=1.5pt] (0.6,0.9)+(120:\rI) arc[start angle=120, end angle=240, radius=\rI];
\draw[red, line width=1.5pt] (0.6,0.9)+(130:\rII) arc[start angle=130, end angle=230, radius=\rII];
\draw[red, line width=1.5pt] (0.6,0.9)+(150:\rIII) arc[start angle=150, end angle=210, radius=\rIII];
\fill[red](0.6,0.9)circle (1.5pt);

\foreach\i in{0.15,0.3,0.45,0.6}{
\fill[red](\i,0.19)circle (1.5pt);
}

\fill[red](1,0.19)circle (2pt);
\end{scope}
}}}

\tikzset {
pics/cloud/.style = {
        code = {
\colorlet{red}{white}
\begin{scope}[local bounding box=CLO,scale=0.6, every node/.append style={transform shape}]
\draw[red,line width=1.5pt](0,0)to[out=170,in=180,distance=11](0.1,0.61)
to[out=90,in=105,distance=17](1.07,0.71)
to[out=20,in=75,distance=7](1.48,0.36)
to[out=350,in=0,distance=7](1.48,0)--(0,0);
\draw[red,line width=1.5pt](0.27,0.71)to[bend left=25](0.49,0.96);
\draw[red,line width=1.5pt](0.67,1.21)to[out=55,in=90,distance=13](1.5,0.96)
to[out=360,in=30,distance=9](1.68,0.42);
\end{scope}
}}}

\tikzset {
  pics/server/.style = {
    code = {
      \colorlet{red}{white}
      \begin{scope}[anchor=center, transform shape,scale=0.8, every node/.append style={transform shape}]
        \draw[red,line width=1.25pt,fill=white](-0.55,-0.5) rectangle (0.55,0.5);
\foreach \i in {-0.25,0,0.25} {
                \draw[cyan,line width=1.25pt]( -0.55,\i) -- (0.55, \i);
}
        \foreach \i in {-0.375, -0.125, 0.125, 0.375} {
          \draw[cyan!50!black!90,line width=1.25pt](-0.45,\i)--(0,\i);
          \fill[cyan!50!black!90](0.35,\i) circle (1.5pt);
        }

\draw[red,line width=1.75pt](0,-0.53) |- (-0.55,-0.7);
        \draw[red,line width=1.75pt](0,-0.53) |- (0.55,-0.7);
      \end{scope}
    }
  }
}

\tikzset {
pics/cpu/.style = {
        code = {
\definecolor{CPU}{RGB}{0,120,176}
\colorlet{CPU}{white}
\begin{scope}[local bounding box = CPU,scale=0.33, every node/.append style={transform shape}]
\node[fill=CPU,minimum width=66, minimum height=66,
            rounded corners=2,outer sep=2pt] (C1) {};
\node[fill=violet,minimum width=54, minimum height=54] (C2) {};
%\node[fill=CPU!40,minimum width=44, minimum height=44] (C3) {CPU};

\foreach \x/\y in {0.11/1,0.26/2,0.41/3,0.56/4,0.71/5,0.85/6}{
\node[fill=CPU,minimum width=4, minimum height=15,
           inner sep=0pt,anchor=south](GO\y)at($(C1.north west)!\x!(C1.north east)$){};
}
\foreach \x/\y in {0.11/1,0.26/2,0.41/3,0.56/4,0.71/5,0.85/6}{
\node[fill=CPU,minimum width=4, minimum height=15,
           inner sep=0pt,anchor=north](DO\y)at($(C1.south west)!\x!(C1.south east)$){};
}
\foreach \x/\y in {0.11/1,0.26/2,0.41/3,0.56/4,0.71/5,0.85/6}{
\node[fill=CPU,minimum width=15, minimum height=4,
           inner sep=0pt,anchor=east](LE\y)at($(C1.north west)!\x!(C1.south west)$){};
}
\foreach \x/\y in {0.11/1,0.26/2,0.41/3,0.56/4,0.71/5,0.85/6}{
\node[fill=CPU,minimum width=15, minimum height=4,
           inner sep=0pt,anchor=west](DE\y)at($(C1.north east)!\x!(C1.south east)$){};
}
\end{scope}
    }  }}

\tikzset {
pics/mobile/.style = {
        code = {
\colorlet{red}{white}
\begin{scope}[local bounding box=MOB,scale=0.4, every node/.append style={transform shape}]
\node[rectangle,draw=red,minimum height=94,minimum width=47,
            rounded corners=6,thick,fill=white](R1){};
\node[rectangle,draw=red,minimum height=67,minimum width=38,thick,fill=green!69!black!90](R2){};
\node[circle,minimum size=8,below= 2pt of R2,inner sep=0pt,thick,fill=green!69!black!90]{};
\node[rectangle,fill=green!69!black!90,minimum height=2,minimum width=20,above= 4pt of R2,inner sep=0pt,thick]{};
%
 \end{scope}
     }  }}

\node[draw=none,fill=red,circle,minimum size=20mm](GA)at(T2){};
\pic[shift={(-0.55,-0.5)}] at (T2) {gatewey};
\node[above=0 of GA]{Gateway};
\node[draw=none,fill=violet,circle,minimum size=20mm](CP)at(T0){};
\pic[shift={(0,-0)}] at (T0) {cpu};
\node[above=0 of CP,align=center]{Ultra Low Powered\\Devices and Sensors};
\node[draw=none,fill=green!70,,circle,minimum size=20mm](MO)at(T1){};
 \pic[shift={(0,0)}] at (T1) {mobile};
 \node[above=0 of MO,align=center]{Intellignet\\Device};
\node[draw=none,fill=cyan,circle,minimum size=20mm](SE)at(T3){};
\pic[shift={(-0.03,0.1)}] at (T3) {server};
 \node[above=0 of SE,align=center]{On Premise\\Servers};
\node[draw=none,fill=brown,circle,minimum size=20mm](CL)at(T4){};
\pic[shift={(-0.48,-0.35)}] at (T4) {cloud};
 \node[above=0 of CL,align=center]{Cloud};
%
\path (T0) -- (T1) coordinate[pos=0.5] (M1);
\path (0,0) -- (T0) coordinate[pos=0.25] (M0);
\path (T3) -- (T4) coordinate[pos=0.5] (M2);
\path (T4) -- (end) coordinate[pos=0.75] (M3);

\foreach \x in {0,1,2,3}{
\fill[OliveLine](M\x)circle (2.5pt);
}

\path[red](M0)--++(270:1.6)coordinate(LL1)-|coordinate(LL2)(M2);
\path[red](M0)--++(270:1.1)coordinate(L1)-|coordinate(L2)(M1);
\path[red](M0)--++(270:1.1)-|coordinate(L3)(M2);
\path[red](M0)--++(270:1.1)-|coordinate(L4)(M3);
%
\draw[black!70,thick](M0)--(LL1);
\draw[black!70,thick](M1)--(L2);
\draw[black!70,thick](M3)--(L4);
\draw[black!70,thick](M2)--(LL2);
\draw[latex-latex,line width=1pt,draw=black!60](L1)--node[red,fill=white]{TinyML}(L2);
\draw[latex-latex,line width=1pt,draw=black!60](L3)--node[fill=white]{Cloud AI}(L4);
\draw[latex-latex,line width=1pt,draw=black!60]([yshift=4pt]LL1)--node[fill=white,text=black]{Edge AI}([yshift=4pt]LL2);
\foreach \x in {0,1,2,3}{
\fill[OliveLine](M\x)circle (2.5pt);
}
%
\node[below=0.35 of LL1,anchor=west,font=\usefont{T1}{phv}{m}{n}\footnotesize,black!50]
{Source: ABI Research: TinyML};
%
\path[](M0)--++(90:4.2)-|node[pos=0.25]{\textbf{The Distributed Intelligence Spectrum}}(M3);
\end{tikzpicture}

```
Cloud vs. Edge vs. Mobile vs. Tiny ML: The Spectrum of Distributed Intelligence. Source: ABI Research -- Tiny ML.
:::

To better understand the dramatic differences between these ML deployment options, @tbl-representative-systems provides examples of representative hardware platforms for each category. These examples illustrate the vast range of computational resources, power requirements, and cost considerations across the ML systems spectrum. As we explore each paradigm in detail, you can refer back to these concrete examples to better understand the practical implications of each approach.

+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Category      | Example Device        | Processor                            | Memory         | Storage          | Power     | Price Range | Example Models/Tasks           |
+===============+:======================+:=====================================+:===============+:=================+:==========+:============+:===============================+
| Cloud ML      | NVIDIA DGX A100       | 8x NVIDIA A100 GPUs (40 GB/80 GB)    | 1 TB System RAM| 15 TB NVMe SSD   | 6.5 kW    | $200 K+     | Large language models (GPT-3), |
|               |                       |                                      |                |                  |           |             | real-time video processing     |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | Google TPU v4 Pod     | 4096 TPU v4 chips                    | 128 TB+        | Networked        | ~MW       | Pay-per-use | Training foundation models,    |
|               |                       |                                      |                | storage          |           |             | large-scale ML research        |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Edge ML       | NVIDIA Jetson AGX     | 12-core ArmÂ® CortexÂ®-A78AE,          | 32 GB LPDDR5   | 64GB eMMC        | 15-60 W   | $899        | Computer vision, robotics,     |
|               | Orin                  | NVIDIA Ampere GPU                    |                |                  |           |             | autonomous systems             |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | Intel NUC 12 Pro      | Intel Core i7-1260P, Intel Iris Xe   | 32 GB DDR4     | 1 TB SSD         | 28 W      | $750        | Edge AI servers,               |
|               |                       |                                      |                |                  |           |             | industrial automation          |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Mobile ML     | iPhone 15 Pro         | A17 Pro (6-core CPU, 6-core GPU)     | 8 GB RAM       | 128 GB-1 TB      | 3-5 W     | $999+       | Face ID, computational         |
|               |                       |                                      |                |                  |           |             | photography, voice recognition |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Tiny ML       | Arduino Nano 33       | Arm Cortex-M4 @ 64 MHz               | 256 KB RAM     | 1 MB Flash       |0.02-0.04 W| $35         | Gesture recognition,           |
|               | BLE Sense             |                                      |                |                  |           |             | voice detection                |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | ESP32-CAM             | Dual-core @ 240MHz                   | 520 KB RAM     | 4 MB Flash       |0.05-0.25 W| $10         | Image classification,          |
|               |                       |                                      |                |                  |           |             | motion detection               |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+

: Representative hardware platforms across the ML systems spectrum, showing typical specifications and capabilities for each category. {#tbl-representative-systems .hover .striped}

The evolution of machine learning systems can be seen as a progression from centralized to increasingly distributed and specialized computing paradigms:

**Cloud ML**: Initially, ML was predominantly cloud-based. Powerful, scalable servers in data centers are used to train and run large ML models. This approach leverages vast computational resources and storage capacities, enabling the development of complex models trained on massive datasets. Cloud ML excels at tasks requiring extensive processing power, distributed training of large models, and is ideal for applications where real-time responsiveness isn't critical. Popular platforms like AWS SageMaker, Google Cloud AI, and Azure ML offer flexible, scalable solutions for model development, training, and deployment. Cloud ML can handle models with billions of parameters, training on petabytes of data, but may incur latencies of 100-500 ms for online inference due to network delays.

**Edge ML**: As the need for real-time, low-latency processing grew, Edge ML emerged. This paradigm brings inference capabilities closer to the data source, typically on edge devices such as industrial gateways, smart cameras, autonomous vehicles, or IoT hubs. Edge ML reduces latency (often to less than 50 ms), enhances privacy by keeping data local, and can operate with intermittent cloud connectivity. It's particularly useful for applications requiring quick responses or handling sensitive data in industrial or enterprise settings. Frameworks like NVIDIA Jetson or Google's Edge TPU enable powerful ML capabilities on edge devices. Edge ML plays a crucial role in IoT ecosystems, enabling real-time decision making and reducing bandwidth usage by processing data locally.

**Mobile ML**: Building on edge computing concepts, Mobile ML focuses on leveraging the computational capabilities of smartphones and tablets. This approach enables personalized, responsive applications while reducing reliance on constant network connectivity. Mobile ML offers a balance between the power of edge computing and the ubiquity of personal devices. It utilizes on-device sensors (e.g., cameras, GPS, accelerometers) for unique ML applications. Frameworks like TensorFlow Lite and Core ML allow developers to deploy optimized models on mobile devices, with inference times often under 30 ms for common tasks. Mobile ML enhances privacy by keeping personal data on the device and can operate offline, but must balance model performance with device resource constraints (typically 4-8 GB RAM, 100-200 GB storage).

**Tiny ML**: The latest development in this progression is Tiny ML, which enables ML models to run on extremely resource-constrained microcontrollers and small embedded systems. Tiny ML allows for on-device inference without relying on connectivity to the cloud, edge, or even the processing power of mobile devices. This approach is crucial for applications where size, power consumption, and cost are critical factors. Tiny ML devices typically operate with less than 1 MB of RAM and flash memory, consuming only milliwatts of power, enabling battery life of months or years. Applications include wake word detection, gesture recognition, and predictive maintenance in industrial settings. Platforms like Arduino Nano 33 BLE Sense and STM32 microcontrollers, coupled with frameworks like TensorFlow Lite for Microcontrollers, enable ML on these tiny devices. However, Tiny ML requires significant model optimization and quantization[^fn-qunatization] to fit within these constraints.

[^fn-qunatization]: **Quantization**: Process of reducing the numerical precision of ML model parameters to reduce memory footprint and computational demand.

Each of these paradigms has its own strengths and is suited to different use cases:

- Cloud ML remains essential for tasks requiring massive computational power or large-scale data analysis.
- Edge ML is ideal for applications needing low-latency responses or local data processing in industrial or enterprise environments.
- Mobile ML is suited for personalized, responsive applications on smartphones and tablets.
- Tiny ML enables AI capabilities in small, power-efficient devices, expanding the reach of ML to new domains.

This progression reflects a broader trend in computing towards more distributed, localized, and specialized processing. The evolution is driven by the need for faster response times, improved privacy, reduced bandwidth usage, and the ability to operate in environments with limited or no connectivity, while also catering to the specific capabilities and constraints of different types of devices.

::: {#fig-vMLsizes fig-env="figure" fig-pos="htb"}
```{.tikz}
\begin{tikzpicture}[font=\small\usefont{T1}{phv}{m}{n}]
\tikzset{
Line/.style={red,line width=1.0pt,text=black},
  Box/.style={inner xsep=2pt,
    node distance=1.1,
    draw=none,
    line width=0.75pt,
    fill=none,
    text width=22mm,align=flush center,
    minimum width=22mm, minimum height=11mm
  },
  Box1/.style={Box,node distance=0.25, minimum height=5mm},
  Box2/.style={Box,node distance=0.45, minimum height=5mm}
}
\node[Box](B0){};
\node[Box,right=0 of B0](B1){\textbf{Cloud AI}\\(NVIDIA V100)};
\node[Box,right=of B1](B2){\textbf{Mobile AI}\\(iPhone 11)};
\node[Box,right=of B2](B3){\textbf{Tiny AI}\\(STM32F746)};
\node[Box, right=of B3](B4){\textbf{ResNet-50}};
\node[Box, right=0 of B4](B5){\textbf{MobileNetV2}};
\node[Box, right=0 of B5](B6){\textbf{MobileNetV2}\\ (int8)};
%%%%
\node[Box2,below=of B0](B20){\textbf{Memory}};
\node[Box2,below=of B1](B21){16 GB};
\node[Box2,below=of B2](B22){4 GB};
\node[Box2,below=of B3](B23){\textbf{320 kB}};
\node[Box2,below=of B4](B24){7.2 MB};
\node[Box2,below=of B5](B25){6.8 MB};
\node[Box2,below=of B6](B26){1.7 MB};
%%%%
\node[Box1,below=of B20](B30){\textbf{Storage}};
\node[Box1,below=of B21](B31){TB $\sim$ PB};
\node[Box1,below=of B22](B32){> 64 GB};
\node[Box1,below=of B23](B33){\textbf{1 MB}};
\node[Box1,below=of B24](B34){102 MB};
\node[Box1,below=of B25](B35){13.6 MB};
\node[Box1,below=of B26](B36){3.4 MB};
%%
\coordinate(GL)at($(B0.north west)+(0,0)$);
\coordinate(GD)at($(B6.north east)+(0,0)$);
\coordinate(DL)at($(B30.south west)+(0,0)$);
\coordinate(DD)at($(B36.south east)+(0,0)$);
\coordinate(SL)at($(B0.south west)!0.0!(B20.north west)$);
\coordinate(SD)at($(B6.south east)!0.0!(B26.north east)$);
\draw[Line,-latex,shorten >=-6pt,shorten <=-6pt](B21)--node[above]{4$\times$}(B22);
\draw[Line,-latex,shorten >=-6pt,shorten <=-6pt](B22)--node[above]{3100$\times$}(B23);
\draw[Line,latex-latex,shorten >=-9pt,shorten <=-9pt](B23)--
node[above](GAG){gap}(B24);
\draw[Line,-latex,shorten >=-6pt,shorten <=-6pt](B31)--node[above]{1000$\times$}(B32);
\draw[Line,-latex,shorten >=-6pt,shorten <=-6pt](B32)--node[above]{6400$\times$}(B33);
\draw[Line,latex-latex,shorten >=-9pt,shorten <=-9pt](B33)--
node[above](GAD){gap}(B34);
\path[red](GL)-|coordinate(GS)(GAG);
\path[red](DL)-|coordinate(DS)(GAD);
\path[red](SL)-|coordinate(SS)(GAD);
%
\draw[line width=1.75pt,shorten >=5pt](DL)--(DS);
\draw[line width=1.75pt,shorten >=5pt](GL)--(GS);
\draw[line width=1.0pt,shorten >=5pt](SL)--(SS);
%%
\draw[line width=1.75pt,shorten >=5pt](DD)--(DS);
\draw[line width=1.75pt,shorten >=5pt](GD)--(GS);
\draw[line width=1.0pt,shorten >=5pt](SD)--(SS);
%
\scoped[on background layer]
\node[draw=none,inner xsep=5mm,inner ysep=5mm,minimum width=170mm,
      anchor=west,yshift=0mm,fill=cyan!10,fit=(GL)(DD)](BB){};
%
\node[single arrow, draw=none, fill=red,inner sep=2pt,
      minimum width = 14pt, single arrow head extend=3pt,
      minimum height=8mm]at($(B1)!0.5!(B2)$) {};
      \node[single arrow, draw=none, fill=red,inner sep=2pt,
      minimum width = 14pt, single arrow head extend=3pt,
      minimum height=8mm]at($(B2)!0.5!(B3)$) {};
\end{tikzpicture}
```
From cloud GPUs to microcontrollers: Navigating the memory and storage landscape across computing devices. Source: [@lin2023tiny]
:::

@fig-vMLsizes illustrates the key differences between Cloud ML, Edge ML, Mobile ML, and Tiny ML in terms of hardware, latency, connectivity, power requirements, and model complexity. As we move from Cloud to Edge to Tiny ML, we see a dramatic reduction in available resources, which presents significant challenges for deploying sophisticated machine learning models. This resource disparity becomes particularly apparent when attempting to deploy deep learning models on microcontrollers, the primary hardware platform for Tiny ML. These tiny devices have severely constrained memory and storage capacities, which are often insufficient for conventional deep learning models. We will learn to put these things into perspective in this chapter.

## Cloud-Based Machine Learning {#sec-ml-systems-cloudbased-machine-learning-52c3}

The vast computational demands of modern machine learning often require the scalability and power of centralized cloud[^fn-cloud] infrastructures. Cloud Machine Learning (Cloud ML) handles tasks such as large-scale data processing, collaborative model development, and advanced analytics. Cloud data centers leverage distributed architectures, offering specialized resources to train complex models and support diverse applications, from recommendation systems[^fn-recommendationsystems] to natural language processing[^fn-nlp].

[^fn-recommendationsystems]: **Recommendation systems**: An AI technology used to personalize user experiences by predicting and showcasing what users would enjoy or find suitable based on their past behavior or interactions.
[^fn-nlp]: **Natural Language Processing (NLP)**: A branch of AI that gives machines the ability to read, understand and derive meaning from human languages to perform tasks like translation, sentiment analysis, and topic classification.

[^fn-cloud]: The cloud refers to networks of remote computing servers that provide scalable storage, processing power, and specialized services for deploying machine learning models.

::: {.callout-note title="Definition of Cloud ML"}

**Cloud Machine Learning (Cloud ML)** refers to the deployment of machine learning models on *centralized computing infrastructures*, such as data centers. These systems operate in the *kilowatt to megawatt* power range and utilize *specialized computing systems* to handle *large-scale datasets* and train *complex models*. Cloud ML offers *scalability* and *computational capacity*, making it well-suited for tasks requiring extensive resources and collaboration. However, it depends on *consistent connectivity* and may introduce *latency* for real-time applications.
:::

@fig-cloud-ml provides an overview of Cloud ML's capabilities, which we will discuss in greater detail throughout this section.

::: {.content-visible when-format="html"}
![Section overview for Cloud ML.](images/png/cloudml.png){#fig-cloud-ml}
:::

::: {.content-visible when-format="pdf"}
![Section overview for Cloud ML.](images/png/cloudml.png){#fig-cloud-ml fig-pos='htb'}
:::

### Characteristics {#sec-ml-systems-characteristics-1648}

One of the key characteristics of Cloud ML is its centralized infrastructure. @fig-cloudml-example illustrates this concept with an example from Google's Cloud TPU[^fn-tpu-hw] data center. Cloud service providers offer a **virtual platform**[^fn-virplat] that consists of high-capacity servers, expansive storage solutions, and robust networking architectures, all housed in data centers distributed across the globe. As shown in the figure, these centralized facilities can be massive in scale, housing rows upon rows of specialized hardware. This centralized setup allows for the pooling and efficient management of computational resources, making it easier to scale machine learning projects as needed.[^fn-ci-lim]

[^fn-tpu-hw]: Tensor Processing Units (TPUs) are Google's custom-designed AI accelerator chips optimized for machine learning workloads, particularly deep neural network training and inference.

[^fn-virplat]: Virtual platforms abstract physical hardware through software interfaces, enabling efficient resource management and automated scaling across multiple users without direct hardware interaction.

[^fn-ci-lim]: While centralized infrastructure enables efficient resource management and scalability, increasing physical distance between data centers and end-users can introduce latency and data privacy challenges.

::: {.content-visible when-format="html"}
![Cloud TPU data center at Google. Source: [Google.](https://blog.google/technology/ai/google-gemini-ai/#scalable-efficient)](images/jpg/cloud_ml_tpu.jpeg){#fig-cloudml-example}
:::

::: {.content-visible when-format="pdf"}
![Cloud TPU data center at Google. Source: [Google.](https://blog.google/technology/ai/google-gemini-ai/#scalable-efficient)](images/jpg/cloud_ml_tpu.jpeg){#fig-cloudml-example fig-pos='htb'}
:::

Cloud ML excels in its ability to process and analyze massive volumes of data. The centralized infrastructure is designed to handle complex computations and [model training](../training/training.qmd) tasks that require significant computational power. By leveraging the scalability of the cloud, machine learning models can be trained on vast amounts of data, leading to improved learning capabilities and predictive performance.

Another advantage of Cloud ML is the flexibility it offers in terms of deployment and accessibility. Once a machine learning model is trained and validated, it can be deployed through cloud-based APIs and services, making it accessible to users worldwide. This enables seamless integration of ML capabilities into applications across mobile, web, and IoT platforms[^fn-IoT], regardless of the end user's computational resources.

[^fn-IoT]: **Internet of Things (IoT)**: A system of interrelated computing devices, mechanical and digital machines, capable of transferring data over a network without human-to-human or human-to-computer interaction.

Cloud ML promotes collaboration and resource sharing among teams and organizations. The centralized nature of the cloud infrastructure enables multiple data scientists and engineers to access and work on the same machine learning projects simultaneously. This collaborative approach facilitates knowledge sharing, accelerates the development cycle from experimentation to production, and optimizes resource utilization across teams.

By leveraging the pay-as-you-go pricing model offered by cloud service providers, Cloud ML allows organizations to avoid the upfront capital expenditure[^fn-CAP] associated with building and maintaining dedicated ML infrastructure. The ability to scale resources up during intensive training periods and down during lower demand ensures cost-effectiveness and financial flexibility in managing machine learning projects.

[^fn-CAP]: **Capital Expenditure (CapEx)**: Funds used by a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.

Cloud ML has revolutionized the way machine learning is approached, democratizing access to advanced AI capabilities and making them more accessible, scalable, and efficient. It has enabled organizations of all sizes to harness the power of machine learning without requiring specialized hardware expertise or significant infrastructure investments.

### Benefits {#sec-ml-systems-benefits-981f}

Cloud ML offers several significant benefits that make it a powerful choice for machine learning projects:

One of the key advantages of Cloud ML is its ability to provide vast computational resources. The cloud infrastructure is designed to handle complex algorithms and process large datasets efficiently. This is particularly beneficial for machine learning models that require significant computational power, such as deep learning networks or models trained on massive datasets. By leveraging the cloud's computational capabilities, organizations can overcome the limitations of local hardware setups and scale their machine learning projects to meet demanding requirements.

Cloud ML offers dynamic scalability, allowing organizations to easily adapt to changing computational needs. As the volume of data grows or the complexity of machine learning models increases, the cloud infrastructure can seamlessly scale up or down to accommodate these changes. This flexibility ensures consistent performance and enables organizations to handle varying workloads without the need for extensive hardware investments. With Cloud ML, resources can be allocated on-demand, providing a cost-effective and efficient solution for managing machine learning projects.

Cloud ML platforms provide access to a wide range of advanced tools and algorithms specifically designed for machine learning. These tools often include pre-built models, AutoML capabilities, and specialized APIs that simplify the development and deployment of machine learning solutions. Developers can leverage these resources to accelerate the building, training, and optimization of sophisticated models. By utilizing the latest advancements in machine learning algorithms and techniques, organizations can implement state-of-the-art solutions without needing to develop them from scratch.

Cloud ML fosters a collaborative environment that enables teams to work together seamlessly. The centralized nature of the cloud infrastructure allows multiple data scientists and engineers to access and contribute to the same machine learning projects simultaneously. This collaborative approach facilitates knowledge sharing, promotes cross-functional collaboration, and accelerates the development and iteration of machine learning models. Teams can easily share code, datasets, and results through version control and project management tools integrated with cloud platforms.

Adopting Cloud ML can be a cost-effective solution for organizations, especially compared to building and maintaining an on-premises machine learning infrastructure. Cloud service providers offer flexible pricing models, such as pay-as-you-go or subscription-based plans, allowing organizations to pay only for the resources they consume. This eliminates the need for upfront capital investments in specialized hardware like GPUs and TPUs, reducing the overall cost of implementing machine learning projects. Additionally, the ability to automatically scale down resources during periods of low utilization ensures organizations only pay for what they actually use.

The benefits of Cloud ML, including its immense computational power, dynamic scalability, access to advanced tools and algorithms, collaborative environment, and cost-effectiveness, make it a compelling choice for organizations looking to harness the potential of machine learning. By leveraging the capabilities of the cloud, organizations can accelerate their machine learning initiatives, drive innovation, and gain a competitive edge in today's data-driven landscape.

### Challenges {#sec-ml-systems-challenges-6897}

While Cloud ML offers numerous benefits, it also comes with certain challenges that organizations need to consider:

Latency is a primary concern in Cloud ML, particularly for applications requiring real-time responses. The process of transmitting data to centralized cloud servers for processing and then back to applications introduces delays. This can significantly impact time-sensitive scenarios like autonomous vehicles, real-time fraud detection, and industrial control systems where immediate decision-making is crucial. Organizations must implement careful system design to minimize latency and ensure acceptable response times.

Data privacy and security represent critical challenges when centralizing processing and storage in the cloud. Sensitive data transmitted to remote data centers becomes potentially vulnerable to cyber-attacks and unauthorized access. Cloud environments often attract hackers seeking to exploit vulnerabilities in valuable information repositories. Organizations must implement robust security measures including encryption, strict access controls, and continuous monitoring. Additionally, compliance with regulations like GDPR or HIPAA[^fn-gdpr-hipaa] becomes increasingly complex when handling sensitive data in cloud environments.

[^fn-gdpr-hipaa]: GDPR (General Data Protection Regulation) and HIPAA (Health Insurance Portability and Accountability Act): Regulations governing data protection and maintaining data privacy in EU and US respectively.

Cost management becomes increasingly important as data processing requirements grow. Although Cloud ML provides scalability and flexibility, organizations processing large data volumes may experience escalating costs with increased cloud resource consumption. The pay-as-you-go pricing model can quickly accumulate expenses, especially for compute-intensive operations like model training and inference. Effective cloud adoption requires careful monitoring and optimization of usage patterns. Organizations should consider implementing data compression techniques, efficient algorithmic design, and resource allocation optimization to balance cost-effectiveness with performance requirements.

Network dependency presents another significant challenge for Cloud ML implementations. The requirement for stable and reliable internet connectivity means that any disruptions in network availability directly impact system performance. This dependency becomes particularly problematic in environments with limited, unreliable, or expensive network access. Building resilient ML systems requires robust network infrastructure complemented by appropriate failover mechanisms or offline processing capabilities.

Vendor lock-in often emerges as organizations adopt specific tools, APIs, and services from their chosen cloud provider. This dependency can complicate future transitions between providers or platform migrations. Organizations may encounter challenges with portability, interoperability, and cost implications when considering changes to their cloud ML infrastructure. Strategic planning should include careful evaluation of vendor offerings, consideration of long-term goals, and preparation for potential migration scenarios to mitigate lock-in risks.

Addressing these challenges requires thorough planning, thoughtful architectural design, and comprehensive risk mitigation strategies. Organizations must balance Cloud ML benefits against potential challenges based on their specific requirements, data sensitivity concerns, and business objectives. Proactive approaches to these challenges enable organizations to effectively leverage Cloud ML while maintaining data privacy, security, cost-effectiveness, and system reliability.

### Use Cases {#sec-ml-systems-use-cases-02a3}

Cloud ML has found widespread adoption across various domains, revolutionizing the way businesses operate and users interact with technology. Let's explore some notable examples of Cloud ML in action:

Cloud ML plays a crucial role in powering virtual assistants like Siri and Alexa. These systems leverage the immense computational capabilities of the cloud to process and analyze voice inputs in real-time. By harnessing the power of natural language processing and machine learning algorithms, virtual assistants can understand user queries, extract relevant information, and generate intelligent and personalized responses. The cloud's scalability and processing power enable these assistants to handle a vast number of user interactions simultaneously, providing a seamless and responsive user experience.[^fn-virt-asstn]

[^fn-virt-asstn]: Virtual assistants exemplify hybrid ML architecture by combining local wake word detection via Tiny ML with cloud-based natural language processing. This design optimizes for both power efficiency and sophisticated language understanding capabilities while maintaining responsiveness.

Cloud ML forms the backbone of advanced recommendation systems used by platforms like Netflix and Amazon. These systems use the cloud's ability to process and analyze massive datasets to uncover patterns, preferences, and user behavior. By leveraging collaborative filtering and other machine learning techniques, recommendation systems can offer personalized content or product suggestions tailored to each user's interests. The cloud's scalability allows these systems to continuously update and refine their recommendations based on the ever-growing amount of user data, enhancing user engagement and satisfaction.

In the financial industry, Cloud ML has revolutionized fraud detection systems. By leveraging the cloud's computational power, these systems can analyze vast amounts of transactional data in real-time to identify potential fraudulent activities. Machine learning algorithms trained on historical fraud patterns can detect anomalies and suspicious behavior, enabling financial institutions to take proactive measures to prevent fraud and minimize financial losses. The cloud's ability to process and store large volumes of data makes it an ideal platform for implementing robust and scalable fraud detection systems.

Cloud ML is deeply integrated into our online experiences, shaping the way we interact with digital platforms. From personalized ads on social media feeds to predictive text features in email services, Cloud ML powers smart algorithms that enhance user engagement and convenience. It enables e-commerce sites to recommend products based on a user's browsing and purchase history, fine-tunes search engines to deliver accurate and relevant results, and automates the tagging and categorization of photos on platforms like Facebook. By leveraging the cloud's computational resources, these systems can continuously learn and adapt to user preferences, providing a more intuitive and personalized user experience.

Cloud ML plays a role in bolstering user security by powering anomaly detection systems[^fn-anom-det]. These systems continuously monitor user activities and system logs to identify unusual patterns or suspicious behavior. By analyzing vast amounts of data in real-time, Cloud ML algorithms can detect potential cyber threats, such as unauthorized access attempts, malware infections, or data breaches. The cloud's scalability and processing power enable these systems to handle the increasing complexity and volume of security data, providing a proactive approach to protecting users and systems from potential threats.

[^fn-anom-det]: **Anomaly Detection Systems**: Machine learning systems designed to identify unusual patterns or outliers in the data which may indicate suspicious or abnormal behavior.

## Edge Machine Learning {#sec-ml-systems-edge-machine-learning-52c5}

As machine learning applications grow, so does the need for faster, localized decision-making. Edge Machine Learning (Edge ML) shifts computation away from centralized servers, processing data closer to its source. This paradigm is critical for time-sensitive applications, such as autonomous systems, industrial IoT, and smart infrastructure, where minimizing latency and preserving data privacy are paramount. Edge devices, like gateways[^fn-gateways] and IoT hubs,[^fn-IoT-hubs] enable these systems to function efficiently while reducing dependence on cloud infrastructures.

[^fn-gateways]: **Gateways**: Network nodes that act as a bridge between different networks.
[^fn-IoT-hubs]: **IoT Hubs**: Devices or services that manage data communication between IoT devices and the cloud.

::: {.callout-note title="Definition of Edge ML"}

**Edge Machine Learning (Edge ML)** describes the deployment of machine learning models at or near the *edge of the network*. These systems operate in the *tens to hundreds of watts* range and rely on *localized hardware* optimized for *real-time processing*. Edge ML minimizes *latency* and enhances *privacy* by processing data locally, but its primary limitation lies in *restricted computational resources*.
:::

@fig-edge-ml provides an overview of this section.

::: {.content-visible when-format="html"}
![Section overview for Edge ML.](images/png/edgeml.png){#fig-edge-ml}
:::

::: {.content-visible when-format="pdf"}
![Section overview for Edge ML.](images/png/edgeml.png){#fig-edge-ml fig-pos='htb'}
:::

### Characteristics {#sec-ml-systems-characteristics-40ab}

In Edge ML, data processing happens in a decentralized fashion, as illustrated in @fig-edgeml-example. Instead of sending data to remote servers, the data is processed locally on devices like smartphones, tablets, or Internet of Things (IoT) devices. The figure showcases various examples of these edge devices, including wearables, industrial sensors, and smart home appliances. This local processing allows devices to make quick decisions based on the data they collect without relying heavily on a central server's resources.

![Edge ML Examples. Source: Edge Impulse.](images/jpg/edge_ml_iot.jpg){#fig-edgeml-example}

Local data storage and computation are key features of Edge ML. This setup ensures that data can be stored and analyzed directly on the devices, thereby maintaining the privacy of the data and reducing the need for constant internet connectivity. Moreover, this approach reduces latency in decision-making processes, as computations occur closer to where data is generated. This proximity not only enhances real-time capabilities but also often results in more efficient resource utilization, as data doesn't need to travel across networks, saving bandwidth and energy consumption.

### Benefits {#sec-ml-systems-benefits-2d74}

One of Edge ML's main advantages is the significant latency reduction compared to Cloud ML. This reduced latency can be a critical benefit in situations where milliseconds count, such as in autonomous vehicles, where quick decision-making can mean the difference between safety and an accident.

Edge ML also offers improved data privacy, as data is primarily stored and processed locally. This minimizes the risk of data breaches that are more common in centralized data storage solutions. Sensitive information can be kept more secure, as it's not sent over networks that could be intercepted.

Operating closer to the data source means less data must be sent over networks, reducing bandwidth usage. This can result in cost savings and efficiency gains, especially in environments where bandwidth is limited or costly.

### Challenges {#sec-ml-systems-challenges-7d58}

However, Edge ML has its challenges. One of the main concerns is the limited computational resources compared to cloud-based solutions. Endpoint devices may have a different processing power or storage capacity than cloud servers, limiting the complexity of the machine learning models that can be deployed.

Managing a network of edge nodes can introduce complexity, especially regarding coordination, updates, and maintenance. Ensuring all nodes operate seamlessly and are up-to-date with the latest algorithms and security protocols can be a logistical challenge.

While Edge ML offers enhanced data privacy, edge nodes can sometimes be more vulnerable to physical and cyber-attacks. Developing robust security protocols that protect data at each node without compromising the system's efficiency remains a significant challenge in deploying Edge ML solutions.

### Use Cases {#sec-ml-systems-use-cases-c403}

Edge ML has many applications, from autonomous vehicles and smart homes to industrial Internet of Things (IoT). These examples were chosen to highlight scenarios where real-time data processing, reduced latency, and enhanced privacy are not just beneficial but often critical to the operation and success of these technologies. They demonstrate the role that Edge ML can play in driving advancements in various sectors, fostering innovation, and paving the way for more intelligent, responsive, and adaptive systems.

Autonomous vehicles stand as a prime example of Edge ML's potential. These vehicles rely heavily on real-time data processing to navigate and make decisions. Localized machine learning models assist in quickly analyzing data from various sensors to make immediate driving decisions, ensuring safety and smooth operation.

Edge ML plays a crucial role in efficiently managing various systems in smart homes and buildings, from lighting and heating to security. By processing data locally, these systems can operate more responsively and harmoniously with the occupants' habits and preferences, creating a more comfortable living environment.

The Industrial IoT[^fn-indust-iot] leverages Edge ML to monitor and control complex industrial processes. Here, machine learning models can analyze data from numerous sensors in real-time, enabling predictive maintenance, optimizing operations, and enhancing safety measures. This revolution in industrial automation and efficiency is transforming manufacturing and production across various sectors.

[^fn-indust-iot]: Industrial IoT (IoT) encompasses interconnected sensors, instruments, and devices networked together within industrial applications. It enables data collection, exchange, and analysis to improve manufacturing and industrial processes through machine learning and automation.

The applicability of Edge ML is vast and not limited to these examples. Various other sectors, including healthcare, agriculture, and urban planning, are exploring and integrating Edge ML to develop innovative solutions responsive to real-world needs and challenges, heralding a new era of smart, interconnected systems.

## Mobile Machine Learning {#sec-ml-systems-mobile-machine-learning-dbe8}

Machine learning is increasingly being integrated into portable devices like smartphones and tablets, empowering users with real-time, personalized capabilities. Mobile Machine Learning (Mobile ML) supports applications like voice recognition, computational photography, and health monitoring, all while maintaining data privacy through on-device computation. These battery-powered devices are optimized for responsiveness and can operate offline, making them indispensable in everyday consumer technologies.

::: {.callout-note title="Definition of Mobile ML"}

**Mobile Machine Learning (Mobile ML)** enables machine learning models to run directly on *portable, battery-powered devices* like smartphones and tablets. Operating within the *single-digit to tens of watts* range, Mobile ML leverages *on-device computation* to provide *personalized and responsive applications*. This paradigm preserves *privacy* and ensures *offline functionality*, though it must balance *performance* with *battery and storage limitations*.
:::

### Characteristics {#sec-ml-systems-characteristics-c512}

Mobile ML utilizes the processing power of mobile devices' System-on-Chip (SoC)[^fn-soc] architectures, including specialized Neural Processing Units (NPUs)[^fn-npu] and AI accelerators. This enables efficient execution of ML models directly on the device, allowing for real-time processing of data from device sensors like cameras, microphones, and motion sensors without constant cloud connectivity.

[^fn-soc]: **System-on-Chip (SoC)**: An integrated circuit that packages essential components of a computer or other system into a single chip.
[^fn-npu]: **Neural Processing Unit (NPU)**: A specialized hardware unit designed for accelerated processing of AI and machine learning algorithms.

Mobile ML is supported by specialized frameworks and tools designed specifically for mobile deployment, such as TensorFlow Lite for Android devices and Core ML for iOS devices. These frameworks are optimized for mobile hardware and provide efficient model compression[^fn-compress] and quantization techniques to ensure smooth performance within mobile resource constraints.

[^fn-compress]: Model compression reduces ML model size through techniques like pruning, quantization, and knowledge distillation. This process decreases memory requirements and computational demands while preserving key model functionality, enabling efficient deployment on resource-constrained devices.

### Benefits {#sec-ml-systems-benefits-de8e}

Mobile ML enables real-time processing of data directly on mobile devices, eliminating the need for constant server communication. This results in faster response times for applications requiring immediate feedback, such as real-time translation, face detection, or gesture recognition.

By processing data locally on the device, Mobile ML helps maintain user privacy. Sensitive information doesn't need to leave the device, reducing the risk of data breaches and addressing privacy concerns, particularly important for applications handling personal data.

Mobile ML applications can function without constant internet connectivity, making them reliable in areas with poor network coverage or when users are offline. This ensures consistent performance and user experience regardless of network conditions.

### Challenges {#sec-ml-systems-challenges-de63}

Despite modern mobile devices being powerful, they still face resource constraints compared to cloud servers. Mobile ML must operate within limited RAM, storage, and processing power, requiring careful optimization of models and efficient resource management.

ML operations can be computationally intensive, potentially impacting device battery life. Developers must balance model complexity and performance with power consumption to ensure reasonable battery life for users.

Mobile devices have limited storage space, necessitating careful consideration of model size. This often requires model compression and quantization techniques, which can affect model accuracy and performance.

### Use Cases {#sec-ml-systems-use-cases-59ec}

Mobile ML has revolutionized how we use cameras on mobile devices, enabling sophisticated computer vision applications that process visual data in real-time. Modern smartphone cameras now incorporate ML models that can detect faces, analyze scenes, and apply complex filters instantaneously. These models work directly on the camera feed to enable features like portrait mode photography, where ML algorithms separate foreground subjects from backgrounds. Document scanning applications use ML to detect paper edges, correct perspective, and enhance text readability, while augmented reality applications use ML-powered object detection to accurately place virtual objects in the real world.

Natural language processing on mobile devices has transformed how we interact with our phones and communicate with others. Speech recognition models run directly on device, enabling voice assistants to respond quickly to commands even without internet connectivity. Real-time translation applications can now translate conversations and text without sending data to the cloud, preserving privacy and working reliably regardless of network conditions. Mobile keyboards have become increasingly intelligent, using ML to predict not just the next word but entire phrases based on the user's writing style and context, while maintaining all learning and personalization locally on the device.

Mobile ML has enabled smartphones and tablets to become sophisticated health monitoring devices. Through clever use of existing sensors combined with ML models, mobile devices can now track physical activity, analyze sleep patterns, and monitor vital signs. For example, cameras can measure heart rate by detecting subtle color changes in the user's skin, while accelerometers and ML models work together to recognize specific exercises and analyze workout form. These applications process sensitive health data directly on the device, ensuring privacy while providing users with real-time feedback and personalized health insights.

Perhaps the most pervasive but least visible application of Mobile ML lies in how it personalizes and enhances the overall user experience. ML models continuously analyze how users interact with their devices to optimize everything from battery usage to interface layouts. These models learn individual usage patterns to predict which apps users are likely to open next, preload content they might want to see, and adjust system settings like screen brightness and audio levels based on environmental conditions and user preferences. This creates a deeply personalized experience that adapts to each user's needs while maintaining privacy by keeping all learning and adaptation on the device itself.

These applications demonstrate how Mobile ML bridges the gap between cloud-based solutions and edge computing, providing efficient, privacy-conscious, and user-friendly machine learning capabilities on personal mobile devices. The continuous advancement in mobile hardware capabilities and optimization techniques continues to expand the possibilities for Mobile ML applications.

## Tiny Machine Learning {#sec-ml-systems-tiny-machine-learning-ccce}

Tiny Machine Learning (Tiny ML) brings intelligence to the smallest devices, from microcontrollers[^fn-microcontrollers] to embedded sensors, enabling real-time computation in resource-constrained environments. These systems power applications such as predictive maintenance, environmental monitoring, and simple gesture recognition. Tiny ML devices are optimized for energy efficiency, often running for months or years on limited power sources, such as coin-cell batteries, while delivering actionable insights in remote or disconnected environments.

[^fn-microcontrollers]: **Microcontroller**: A compact, low-cost computing device designed for control-oriented applications. Includes an integrated CPU, memory, and peripherals.

::: {.callout-note title="Definition of Tiny ML"}

**Tiny Machine Learning (Tiny ML)** refers to the execution of machine learning models on *ultra-constrained devices*, such as microcontrollers and sensors. These devices operate in the *milliwatt to sub-watt* power range, prioritizing *energy efficiency* and *compactness*. Tiny ML enables *localized decision-making* in resource-constrained environments, excelling in applications where *extended operation on limited power sources* is required. However, it is limited by *severely restricted computational resources*.
:::

@fig-tiny-ml encapsulates the key aspects of Tiny ML discussed in this section.

![Section overview for Tiny ML.](images/png/tinyml.png){#fig-tiny-ml}

### Characteristics {#sec-ml-systems-characteristics-794b}

In Tiny ML, the focus, much like in Mobile ML, is on on-device machine learning. This means that machine learning models are deployed and trained on the device, eliminating the need for external servers or cloud infrastructures. This allows Tiny ML to enable intelligent decision-making right where the data is generated, making real-time insights and actions possible, even in settings where connectivity is limited or unavailable.

Tiny ML excels in low-power and resource-constrained settings. These environments require highly optimized solutions that function within the available resources. @fig-TinyML-example showcases an example Tiny ML device kit, illustrating the compact nature of these systems. These devices can typically fit in the palm of your hand or, in some cases, are even as small as a fingernail. Tiny ML meets the need for efficiency through specialized algorithms and models designed to deliver decent performance while consuming minimal energy, thus ensuring extended operational periods, even in battery-powered devices like those shown.

![Examples of Tiny ML device kits. Source: [Widening Access to Applied Machine Learning with Tiny ML.](https://arxiv.org/pdf/2106.04008.pdf)](images/png/tiny_ml.png){#fig-TinyML-example}

### Benefits {#sec-ml-systems-benefits-c373}

One of the standout benefits of Tiny ML is its ability to offer ultra-low latency. Since computation occurs directly on the device, the time required to send data to external servers and receive a response is eliminated. This is crucial in applications requiring immediate decision-making, enabling quick responses to changing conditions.

Tiny ML inherently enhances data security. Because data processing and analysis happen on the device, the risk of data interception during transmission is virtually eliminated. This localized approach to data management ensures that sensitive information stays on the device, strengthening user data security.

Tiny ML operates within an energy-efficient framework, a necessity given its resource-constrained environments. By employing lean algorithms and optimized computational methods, Tiny ML ensures that devices can execute complex tasks without rapidly depleting battery life, making it a sustainable option for long-term deployments.

### Challenges {#sec-ml-systems-challenges-29ae}

However, the shift to Tiny ML comes with its set of hurdles. The primary limitation is the devices' constrained computational capabilities. The need to operate within such limits means that deployed models must be simplified, which could affect the accuracy and sophistication of the solutions.

Tiny ML also introduces a complicated development cycle. Crafting lightweight and effective models demands a deep understanding of machine learning principles and expertise in embedded systems. This complexity calls for a collaborative development approach, where multi-domain expertise is essential for success.

A central challenge in Tiny ML is model optimization and compression. Creating machine learning models that can operate effectively within the limited memory and computational power of microcontrollers requires innovative approaches to model design. Developers often face the challenge of striking a delicate balance and optimizing models to maintain effectiveness while fitting within stringent resource constraints.

### Use Cases {#sec-ml-systems-use-cases-3173}

In wearables, Tiny ML opens the door to smarter, more responsive gadgets. From fitness trackers offering real-time workout feedback to smart glasses processing visual data on the fly, Tiny ML transforms how we engage with wearable tech, delivering personalized experiences directly from the device.

In industrial settings, Tiny ML plays a significant role in predictive maintenance[^fn-predictive-maintenance]. By deploying Tiny ML algorithms on sensors that monitor equipment health, companies can preemptively identify potential issues, reducing downtime and preventing costly breakdowns. On-site data analysis ensures quick responses, potentially stopping minor issues from becoming major problems.

[^fn-predictive-maintenance]: Predictive maintenance refers to the use of data-driven, proactive maintenance methods that predict equipment failures.

Tiny ML can be employed to create anomaly detection models that identify unusual data patterns. For instance, a smart factory could use Tiny ML to monitor industrial processes and spot anomalies, helping prevent accidents and improve product quality. Similarly, a security company could use Tiny ML to monitor network traffic for unusual patterns, aiding in detecting and preventing cyber-attacks. Tiny ML could monitor patient data for anomalies in healthcare, aiding early disease detection and better patient treatment.

In environmental monitoring, Tiny ML enables real-time data analysis from various field-deployed sensors. These could range from city air quality monitoring to wildlife tracking in protected areas. Through Tiny ML, data can be processed locally, allowing for quick responses to changing conditions and providing a nuanced understanding of environmental patterns, crucial for informed decision-making.

In summary, Tiny ML serves as a trailblazer in the evolution of machine learning, fostering innovation across various fields by bringing intelligence directly to the edge. Its potential to transform our interaction with technology and the world is immense, promising a future where devices are connected, intelligent, and capable of making real-time decisions and responses.

## Hybrid Machine Learning {#sec-ml-systems-hybrid-machine-learning-6d02}

The increasingly complex demands of modern applications often require a blend of machine learning approaches. Hybrid Machine Learning (Hybrid ML) combines the computational power of the cloud, the efficiency of edge and mobile devices, and the compact capabilities of Tiny ML. This approach enables architects to create systems that balance performance, privacy, and resource efficiency, addressing real-world challenges with innovative, distributed solutions.

::: {.callout-note title="Definition of Hybrid ML"}

**Hybrid Machine Learning (Hybrid ML)** refers to the integration of multiple ML paradigms, such as Cloud, Edge, Mobile, and Tiny ML, to form a unified, distributed system. These systems leverage the *complementary strengths* of each paradigm while addressing their *individual limitations*. Hybrid ML supports *scalability, adaptability,* and *privacy-preserving capabilities,* enabling sophisticated ML applications for diverse scenarios. By combining centralized and decentralized computing, Hybrid ML facilitates efficient resource utilization while meeting the demands of complex real-world requirements.
:::

### Design Patterns {#sec-ml-systems-design-patterns-0b70}

Design patterns in Hybrid ML represent reusable solutions to common challenges faced when integrating multiple ML paradigms (cloud, edge, mobile, and tiny). These patterns guide system architects in combining the strengths of different approaches, including the computational power of the cloud and the efficiency of edge devices, while mitigating their individual limitations. By following these patterns, architects can address key trade-offs in performance, latency, privacy, and resource efficiency.

Hybrid ML design patterns serve as blueprints, enabling the creation of scalable, efficient, and adaptive systems tailored to diverse real-world applications. Each pattern reflects a specific strategy for organizing and deploying ML workloads across different tiers of a distributed system, ensuring optimal use of available resources while meeting application-specific requirements.

#### Train-Serve Split {#sec-ml-systems-trainserve-split-33d9}

One of the most common hybrid patterns is the train-serve split, where model training occurs in the cloud but inference happens on edge, mobile, or tiny devices. This pattern takes advantage of the cloud's vast computational resources for the training phase while benefiting from the low latency and privacy advantages of on-device inference. For example, smart home devices often use models trained on large datasets in the cloud but run inference locally to ensure quick response times and protect user privacy. In practice, this might involve training models on powerful systems like the NVIDIA DGX A100, leveraging its 8 A100 GPUs and terabyte-scale memory, before deploying optimized versions to edge devices like the NVIDIA Jetson AGX Orin for efficient inference. Similarly, mobile vision models for computational photography are typically trained on powerful cloud infrastructure but deployed to run efficiently on phone hardware.

#### Hierarchical Processing {#sec-ml-systems-hierarchical-processing-d06a}

Hierarchical processing creates a multi-tier system where data and intelligence flow between different levels of the ML stack. In industrial IoT applications, tiny sensors might perform basic anomaly detection, edge devices aggregate and analyze data from multiple sensors, and cloud systems handle complex analytics and model updates. For instance, we might see ESP32-CAM devices performing basic image classification at the sensor level with their minimal 520 KB RAM, feeding data up to Jetson AGX Orin devices for more sophisticated computer vision tasks, and ultimately connecting to cloud infrastructure for complex analytics and model updates.

This hierarchy allows each tier to handle tasks appropriate to its capabilities. Tiny ML devices handle immediate, simple decisions; edge devices manage local coordination; and cloud systems tackle complex analytics and learning tasks. Smart city installations often use this pattern, with street-level sensors feeding data to neighborhood-level edge processors, which in turn connect to city-wide cloud analytics.

#### Progressive Deployment {#sec-ml-systems-progressive-deployment-86b2}

Progressive deployment strategies adapt models for different computational tiers, creating a cascade of increasingly lightweight versions. A model might start as a large, complex version in the cloud, then be progressively compressed and optimized for edge servers, mobile devices, and finally tiny sensors. Voice assistant systems often employ this pattern, where full natural language processing runs in the cloud, while simplified wake-word detection[^fn-wake-word-detection] runs on-device. This allows the system to balance capability and resource constraints across the ML stack.

[^fn-wake-word-detection]: **Wake-word Detection:** The task of detecting a specific phrase (wake word) used to activate a voice-controlled system.

#### Federated Learning {#sec-ml-systems-federated-learning-37f5}

Federated learning represents a sophisticated hybrid approach where model training is distributed across many edge or mobile devices while maintaining privacy. Devices learn from local data and share model updates, rather than raw data, with cloud servers that aggregate these updates into an improved global model. This pattern is particularly powerful for applications like keyboard prediction on mobile devices or healthcare analytics, where privacy is paramount but benefits from collective learning are valuable. The cloud coordinates the learning process without directly accessing sensitive data, while devices benefit from the collective intelligence of the network.

#### Collaborative Learning {#sec-ml-systems-collaborative-learning-3f3d}

Collaborative learning enables peer-to-peer learning between devices at the same tier, often complementing hierarchical structures. Autonomous vehicle fleets, for example, might share learning about road conditions or traffic patterns directly between vehicles while also communicating with cloud infrastructure. This horizontal collaboration allows systems to share time-sensitive information and learn from each other's experiences without always routing through central servers.

### Real-World Integration {#sec-ml-systems-realworld-integration-9e96}

Design patterns establish a foundation for organizing and optimizing ML workloads across distributed systems. However, the practical application of these patterns often requires combining multiple paradigms into integrated workflows. Thus, in practice, ML systems rarely operate in isolation. Instead, they form interconnected networks where each paradigm, including Cloud, Edge, Mobile, and Tiny ML, plays a specific role while communicating with other parts of the system. These interconnected networks follow integration patterns that assign specific roles to Cloud, Edge, Mobile, and Tiny ML systems based on their unique strengths and limitations. Recall that cloud systems excel at training and analytics but require significant infrastructure. Edge systems provide local processing power and reduced latency. Mobile devices offer personal computing capabilities and user interaction. Tiny ML enables intelligence in the smallest devices and sensors.

@fig-hybrid illustrates these key interactions through specific connection types: "Deploy" paths show how models flow from cloud training to various devices, "Data" and "Results" show information flow from sensors through processing stages, "Analyze" shows how processed information reaches cloud analytics, and "Sync" demonstrates device coordination. Notice how data generally flows upward from sensors through processing layers to cloud analytics, while model deployments flow downward from cloud training to various inference points. The interactions aren't strictly hierarchical. Mobile devices might communicate directly with both cloud services and tiny sensors, while edge systems can assist mobile devices with complex processing tasks.

::: {#fig-hybrid fig-env="figure" fig-pos="htb"}
```{.tikz}
\begin{tikzpicture}[font=\small\usefont{T1}{phv}{m}{n}]
\tikzset{
Line/.style={line width=1.0pt,black!50,text=black},
  Box/.style={inner xsep=2pt,
    node distance=0.6,
    draw=GreenLine, line width=0.75pt,
    fill=GreenL,
    text width=20mm,align=flush center,
    minimum width=20mm, minimum height=9mm
  },
   Text/.style={inner xsep=2pt,
    draw=none, line width=0.75pt,
    fill=TextColor,
    font=\footnotesize\usefont{T1}{phv}{m}{n},
    align=flush center,
    minimum width=7mm, minimum height=5mm
  },
  }

\node[Box,fill=RedL,draw=RedLine](G2){Training};
\node[Box,fill=none,draw=none,below =1.75 of G2](A){};
\node[Box,node distance=1.75, left=of A](B2){Inference};
\node[Box,node distance=1.75,left=of B2,fill=cyan!20,draw=BlueLine](B1){Inference};
\node[Box,node distance=1.75, right=of A,fill=orange!20,draw=OrangeLine](B3){Inference};
%
\node[Box,node distance=1.5, below=of B1,fill=cyan!20,draw=BlueLine](1DB1){Processing};
\node[Box,node distance=1.5, below=of B3,fill=orange!20,draw=OrangeLine](1DB3){Processing};
\path[](1DB3)-|coordinate(S)(G2);
\node[Box,node distance=1.5,fill=RedL,draw=RedLine]at(S)(1DB2){Analytics};
\path[](G2)-|coordinate(SS)(B2);
\node[Box](G1)at(SS){Sensors};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,anchor= west,
       yshift=1mm,fill=BackColor,fit=(G1)(B2),line width=0.75pt](BB2){};
\node[below=3pt of  BB2.north,anchor=north]{TinyML};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,anchor= west,
       yshift=1mm,fill=BackColor,fit=(G2)(1DB2),line width=0.75pt](BB2){};
\node[below=3pt of  BB2.north,anchor=north]{Cloud ML};
%
\draw[Line,-latex](G1.west)--++(180:0.9)|-node[Text,pos=0.1]{Data}(B2);
\draw[Line,-latex](G2)--++(270:0.9)-|node[Text,pos=0.66]{Deploy}(B1);
\draw[Line,-latex](G2)--++(270:0.9)-|node[Text,pos=0.66]{Deploy}(B2);
\draw[Line,-latex](G2)--++(270:0.9)-|node[Text,pos=0.66]{Deploy}(B3);
%
\draw[Line,-latex](B1)--node[Text,pos=0.5]{Results}(1DB1);
\draw[Line,-latex](B2)|-node[Text,pos=0.75]{Results}(1DB1.10);
%
\draw[Line,-latex](B1.330)--++(270:0.9)-|node[Text,pos=0.2]{Assist}(B3.220);
\draw[Line,-latex](B2.east)--node[Text,pos=0.5]{Sync}++(0:4.8)|-(1DB3.170);
%
\draw[Line,-latex](1DB1.350)--node[Text,pos=0.75]{Results}(1DB2.190);
\draw[Line,-latex](1DB3.190)--node[Text,pos=0.50]{Data}(1DB2.350);
\draw[Line,-latex](B3.290)--node[Text,pos=0.5]{Results}(1DB3.70);
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,anchor= west,
      yshift=-1mm,fill=BackColor,fit=(B1)(1DB1),line width=0.75pt](BB2){};
\node[above=3pt of  BB2.south,anchor=south]{Edge ML};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,anchor= west,
      yshift=-1mm,fill=BackColor,fit=(B3)(1DB3),line width=0.75pt](BB2){};
\node[above=3pt of  BB2.south,anchor=south]{Mobile ML};
\end{tikzpicture}

```
Example interaction patterns between ML paradigms, showing data flows, model deployment, and processing relationships across Cloud, Edge, Mobile, and Tiny ML systems.
:::

To understand how these labeled interactions manifest in real applications, let's explore several common scenarios using @fig-hybrid:

- **Model Deployment Scenario**: A company develops a computer vision model for defect detection. Following the "Deploy" paths shown in @fig-hybrid, the cloud-trained model is distributed to edge servers in factories, quality control tablets on the production floor, and tiny cameras embedded in the production line. This showcases how a single ML solution can be distributed across different computational tiers for optimal performance.

- **Data Flow and Analysis Scenario**: In a smart agriculture system, soil sensors (Tiny ML) collect moisture and nutrient data, following the "Data" path to Tiny ML inference. The "Results" flow to edge processors in local stations, which process this information and use the "Analyze" path to send insights to the cloud for farm-wide analytics, while also sharing results with farmers' mobile apps. This demonstrates the hierarchical flow shown in @fig-hybrid from sensors through processing to cloud analytics.

- **Edge-Mobile Assistance Scenario**: When a mobile app needs to perform complex image processing that exceeds the phone's capabilities, it utilizes the "Assist" connection shown in @fig-hybrid. The edge system helps process the heavier computational tasks, sending back results to enhance the mobile app's performance. This shows how different ML tiers can cooperate to handle demanding tasks.

- **Tiny ML-Mobile Integration Scenario**: A fitness tracker uses Tiny ML to continuously monitor activity patterns and vital signs. Using the "Sync" pathway shown in @fig-hybrid, it synchronizes this processed data with the user's smartphone, which combines it with other health data before sending consolidated updates via the "Analyze" path to the cloud for long-term health analysis. This illustrates the common pattern of tiny devices using mobile devices as gateways to larger networks.

- **Multi-Layer Processing Scenario**: In a smart retail environment, tiny sensors monitor inventory levels, using "Data" and "Results" paths to send inference results to both edge systems for immediate stock management and mobile devices for staff notifications. Following the "Analyze" path, the edge systems process this data alongside other store metrics, while the cloud analyzes trends across all store locations. This demonstrates how the interactions shown in @fig-hybrid enable ML tiers to work together in a complete solution.

These real-world patterns demonstrate how different ML paradigms naturally complement each other in practice. While each approach has its own strengths, their true power emerges when they work together as an integrated system. By understanding these patterns, system architects can better design solutions that effectively leverage the capabilities of each ML tier while managing their respective constraints.

## Shared Principles {#sec-ml-systems-shared-principles-db13}

The design and integration patterns illustrate how ML paradigms, such as Cloud, Edge, Mobile, and Tiny, interact to address real-world challenges. While each paradigm is tailored to specific roles, their interactions reveal recurring principles that guide effective system design. These shared principles provide a unifying framework for understanding both individual ML paradigms and their hybrid combinations. As we explore these principles, a deeper system design perspective emerges, showing how different ML implementations, which are optimized for distinct contexts, converge around core concepts. This convergence forms the foundation for systematically understanding ML systems, despite their diversity and breadth.

@fig-ml-systems-convergence illustrates this convergence, highlighting the relationships that underpin practical system design and implementation. Grasping these principles is invaluable not only for working with individual ML systems but also for developing hybrid solutions that leverage their strengths, mitigate their limitations, and create cohesive, efficient ML workflows.

::: {#fig-ml-systems-convergence fig-env="figure" fig-pos="htb"}
```{.tikz}
\begin{tikzpicture}[font=\small\usefont{T1}{phv}{m}{n}]
\tikzset{
Line/.style={line width=1.0pt,black!50,text=black},
  Box/.style={inner xsep=2pt,
    node distance=0.6,
    draw=GreenLine, line width=0.75pt,
    fill=GreenL,
    text width=30mm,align=flush center,
    minimum width=30mm, minimum height=13mm
  },
  Box1/.style={inner xsep=2pt,
    node distance=0.8,
    draw=BlueLine, line width=0.75pt,
    fill=BlueL,
    text width=36mm,align=flush center,
    minimum width=40mm, minimum height=13mm
  },
}

\begin{scope}[anchor=west]
\node[Box](B1){Cloud ML Data Centers Training at Scale};
\node[Box,right=of B1](B2){Edge ML Local Processing Inference Focus};
\node[Box,right=of B2](B3){Mobile ML Personal DevicesUser Applications};
\node[Box, right=of B3](B4){TinyML Embedded Systems Resource Constrained};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=5mm,inner ysep=5mm,minimum width=170mm,
      anchor=west,yshift=2mm,fill=BackColor,
      fit=(B1)(B2)(B3)(B4),line width=0.75pt](BB){};
\node[below=11pt of  BB.north east,anchor=east]{ML System Implementations};
\end{scope}
%
\begin{scope}[shift={(0.4,-2.8)}, anchor=west]
\node[Box1](2B1){Data Pipeline Collection -- Processing -- Deployment};
\node[Box1,right=of 2B1](2B2){Resource Management Compute -- Memory -- Energy -- Network};
\node[Box1,right=of 2B2](2B3){System Architecture Models -- Hardware -- Software};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=5mm,inner ysep=5mm,minimum width=170mm,
      anchor= west,yshift=-1mm,fill=BackColor,fit=(2B1)(2B2)(2B3),line width=0.75pt](BB2){};
\node[above=8pt of  BB2.south east,anchor=east]{Core System Principles};
\end{scope}
%
\begin{scope}[shift={(0.4,-6.0)}, anchor=west]
\node[Box1, fill=VioletL,draw=VioletLine](3B1){Optimization \& Efficiency Model -- Hardware -- Energy};
\node[Box1,right=of 3B1, fill=VioletL,draw=VioletLine](3B2){Operational Aspects Deployment -- Monitoring -- Updates};
\node[Box1,right=of 3B2, fill=VioletL,draw=VioletLine](3B3){Trustworthy AI Security -- Privacy -- Reliability};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=5mm,inner ysep=5mm,minimum width=170mm,
       anchor= west,yshift=-1mm,fill=BackColor,fit=(3B1)(3B2)(3B3),line width=0.75pt](BB3){};
\node[above=8pt of  BB3.south east,anchor=east]{System Considerations};
\end{scope}
%
\draw[-latex,Line](B1.south)--++(270:0.75)-|(2B1);
\draw[-latex,Line](B2.south)--++(270:0.75)-|(2B1);
\draw[-latex,Line](B3.south)--++(270:0.75)-|(2B1);
\draw[-latex,Line](B4.south)--++(270:0.75)-|(2B1);
\draw[-latex,Line](B2.south)--++(270:0.75)-|(2B2);
\draw[-latex,Line](B3.south)--++(270:0.75)-|(2B3);
%
\draw[-latex,Line](2B1.south)--++(270:0.95)-|(3B1);
\draw[-latex,Line](2B2.south)--++(270:0.95)-|(3B1);
\draw[-latex,Line](2B3.south)--++(270:0.95)-|(3B1);
\draw[-latex,Line](2B2.south)--++(270:0.95)-|(3B2);
\draw[-latex,Line](2B3.south)--++(270:0.95)-|(3B3);
\end{tikzpicture}
```
Core principles converge across different ML system implementations, from cloud to tiny deployments, sharing common foundations in data pipelines, resource management, and system architecture.
:::

The figure shows three key layers that help us understand how ML systems relate to each other. At the top, we see the diverse implementations that we have explored throughout this chapter. Cloud ML operates in data centers, focusing on training at scale with vast computational resources. Edge ML emphasizes local processing with inference capabilities closer to data sources. Mobile ML leverages personal devices for user-centric applications. Tiny ML brings intelligence to highly constrained embedded systems and sensors.

Despite their distinct characteristics, the arrows in the figure show how all these implementations connect to the same core system principles. This reflects an important reality in ML systems, even though they may operate at dramatically different scales, from cloud systems processing petabytes to tiny devices handling kilobytes, they all must solve similar fundamental challenges in terms of:

- Managing data pipelines from collection through processing to deployment
- Balancing resource utilization across compute, memory, energy, and network
- Implementing system architectures that effectively integrate models, hardware, and software

These core principles then lead to shared system considerations around optimization, operations, and trustworthiness. This progression helps explain why techniques developed for one scale of ML system often transfer effectively to others. The underlying problems, efficiently processing data, managing resources, and ensuring reliable operation, remain consistent even as the specific solutions vary based on scale and context.

Understanding this convergence becomes particularly valuable as we move towards hybrid ML systems. When we recognize that different ML implementations share fundamental principles, combining them effectively becomes more intuitive. We can better appreciate why, for example, a cloud-trained model can be effectively deployed to edge devices, or why mobile and tiny ML systems can complement each other in IoT applications.

### Implementation Layer {#sec-ml-systems-implementation-layer-40e0}

The top layer of @fig-ml-systems-convergence represents the diverse landscape of ML systems we've explored throughout this chapter. Each implementation addresses specific needs and operational contexts, yet all contribute to the broader ecosystem of ML deployment options.

Cloud ML, centered in data centers, provides the foundation for large-scale training and complex model serving. With access to vast computational resources like the NVIDIA DGX A100 systems we saw in @tbl-representative-systems, cloud implementations excel at handling massive datasets and training sophisticated models. This makes them particularly suited for tasks requiring extensive computational power, such as training foundation models[^fn-foundation-models] or processing large-scale analytics.

[^fn-foundation-models]: **Foundation Models**: Large pre-trained models that can be fine-tuned for various tasks, requiring substantial computational resources for training.

Edge ML shifts the focus to local processing, prioritizing inference capabilities closer to data sources. Using devices like the NVIDIA Jetson AGX Orin, edge implementations balance computational power with reduced latency and improved privacy. This approach proves especially valuable in scenarios requiring quick decisions based on local data, such as industrial automation or real-time video analytics.

Mobile ML leverages the capabilities of personal devices, particularly smartphones and tablets. With specialized hardware like Apple's A17 Pro chip, mobile implementations enable sophisticated ML capabilities while maintaining user privacy and providing offline functionality. This paradigm has revolutionized applications from computational photography to on-device speech recognition.

Tiny ML represents the frontier of embedded ML, bringing intelligence to highly constrained devices. Operating on microcontrollers like the Arduino Nano 33 BLE Sense[^fn-arduino], tiny implementations must carefully balance functionality with severe resource constraints. Despite these limitations, Tiny ML enables ML capabilities in scenarios where power efficiency and size constraints are paramount.

[^fn-arduino]: The Arduino Nano 33 BLE Sense, introduced in 2019, is a microcontroller specifically designed for Tiny ML applications, featuring sensors and Bluetooth connectivity to facilitate on-device intelligence.

### System Principles Layer {#sec-ml-systems-system-principles-layer-7ed6}

The middle layer reveals the fundamental principles that unite all ML systems, regardless of their implementation scale. These core principles remain consistent even as their specific manifestations vary dramatically across different deployments.

Data Pipeline principles govern how systems handle information flow, from initial collection through processing to final deployment. In cloud systems, this might mean processing petabytes of data through distributed pipelines. For tiny systems, it could involve carefully managing sensor data streams within limited memory. Despite these scale differences, all systems must address the same fundamental challenges of data ingestion, transformation, and utilization.

Resource Management emerges as a universal challenge across all implementations. Whether managing thousands of GPUs in a data center or optimizing battery life on a microcontroller, all systems must balance competing demands for computation, memory, energy, and network resources. The quantities involved may differ by orders of magnitude, but the core principles of resource allocation and optimization remain remarkably consistent.

System Architecture principles guide how ML systems integrate models, hardware, and software components. Cloud architectures might focus on distributed computing and scalability, while tiny systems emphasize efficient memory mapping and interrupt handling. Yet all must solve fundamental problems of component integration, data flow optimization, and processing coordination.

### System Considerations Layer {#sec-ml-systems-system-considerations-layer-c419}

The bottom layer of @fig-ml-systems-convergence illustrates how fundamental principles manifest in practical system-wide considerations. These considerations span all ML implementations, though their specific challenges and solutions vary based on scale and context.

**Optimization and Efficiency** shape how ML systems balance performance with resource utilization. In cloud environments, this often means optimizing model training across GPU clusters[^fn-gpu-cluster] while managing energy consumption in data centers. Edge systems focus on reducing model size and accelerating inference without compromising accuracy. Mobile implementations must balance model performance with battery life and thermal constraints. Tiny ML pushes optimization to its limits, requiring extensive model compression and quantization to fit within severely constrained environments. Despite these different emphases, all implementations grapple with the core challenge of maximizing performance within their available resources.

[^fn-gpu-cluster]: **GPU Clusters**: Groups of GPUs networked together to provide increased processing power for tasks like model training.

**Operational Aspects** affect how ML systems are deployed, monitored, and maintained in production environments. Cloud systems must handle continuous deployment across distributed infrastructure while monitoring model performance at scale. Edge implementations need robust update mechanisms and health monitoring across potentially thousands of devices. Mobile systems require seamless app updates and performance monitoring without disrupting user experience. Tiny ML faces unique challenges in deploying updates to embedded devices while ensuring continuous operation. Across all scales, the fundamental problems of deployment, monitoring, and maintenance remain consistent, even as solutions vary.

**Trustworthy AI** considerations ensure ML systems operate reliably, securely, and with appropriate privacy protections. Cloud implementations must secure massive amounts of data while ensuring model predictions remain reliable at scale. Edge systems need to protect local data processing while maintaining model accuracy in diverse environments. Mobile ML must preserve user privacy while delivering consistent performance. Tiny ML systems, despite their size, must still ensure secure operation and reliable inference. These trustworthiness considerations cut across all implementations, reflecting the critical importance of building ML systems that users can depend on.

The progression through these layers, from diverse implementations through core principles to shared considerations, reveals why ML systems can be studied as a unified field despite their apparent differences. While specific solutions may vary dramatically based on scale and context, the fundamental challenges remain remarkably consistent. This understanding becomes particularly valuable as we move toward increasingly sophisticated hybrid systems that combine multiple implementation approaches.

The convergence of fundamental principles across ML implementations helps explain why hybrid approaches work so effectively in practice. As we saw in our discussion of hybrid ML, different implementations naturally complement each other precisely because they share these core foundations. Whether we're looking at train-serve splits that leverage cloud resources for training and edge devices for inference, or hierarchical processing that combines Tiny ML sensors with edge aggregation and cloud analytics, the shared principles enable seamless integration across scales.

### Principles to Practice {#sec-ml-systems-principles-practice-fa6c}

This convergence also suggests why techniques and insights often transfer well between different scales of ML systems. A deep understanding of data pipelines in cloud environments can inform how we structure data flow in embedded systems. Resource management strategies developed for mobile devices might inspire new approaches to cloud optimization. System architecture patterns that prove effective at one scale often adapt surprisingly well to others.

Understanding these fundamental principles and shared considerations provides a foundation for comparing different ML implementations more effectively. While each approach has its distinct characteristics and optimal use cases, they all build upon the same core elements. As we move into our detailed comparison in the next section, keeping these shared foundations in mind will help us better appreciate both the differences and similarities between various ML system implementations.

## System Comparison {#sec-ml-systems-system-comparison-0245}

Building on the shared principles explored earlier, we can synthesize our understanding by examining how the various ML system approaches compare across different dimensions. This synthesis highlights the trade-offs system designers often face when choosing deployment options and how these decisions align with core principles like resource management, data pipelines, and system architecture.

The relationship between computational resources and deployment location forms one of the most fundamental comparisons across ML systems. As we move from cloud deployments to tiny devices, we observe a dramatic reduction in available computing power, storage, and energy consumption. Cloud ML systems, with their data center infrastructure, can leverage virtually unlimited resources, processing data at the scale of petabytes and training models with billions of parameters. Edge ML systems, while more constrained, still offer significant computational capability through specialized hardware like edge GPUs and neural processing units. Mobile ML represents a middle ground, balancing computational power with energy efficiency on devices like smartphones and tablets. At the far end of the spectrum, TinyML operates under severe resource constraints, often limited to kilobytes of memory and milliwatts of power consumption.

+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Aspect                   | Cloud ML                                                 | Edge ML                                                  | Mobile ML                                                 | Tiny ML                                                  |
+:=========================+:=========================================================+:=========================================================+:==========================================================+:=========================================================+
| **Performance**          |                                                          |                                                          |                                                           |                                                          |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Processing Location      | Centralized cloud servers (Data Centers)                 | Local edge devices (gateways, servers)                   | Smartphones and tablets                                   | Ultra-low-power microcontrollers and embedded systems    |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Latency                  | High (100 ms-1000 ms+)                                   | Moderate (10-100 ms)                                     | Low-Moderate (5-50 ms)                                    | Very Low (1-10 ms)                                       |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Compute Power            | Very High (Multiple GPUs/TPUs)                           | High (Edge GPUs)                                         | Moderate (Mobile NPUs/GPUs)                               | Very Low (MCU/tiny processors)                           |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Storage Capacity         | Unlimited (petabytes+)                                   | Large (terabytes)                                        | Moderate (gigabytes)                                      | Very Limited (kilobytes-megabytes)                       |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Energy Consumption       | Very High (kW-MW range)                                  | High (100 s W)                                           | Moderate (1-10 W)                                         | Very Low (mW range)                                      |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Scalability              | Excellent (virtually unlimited)                          | Good (limited by edge hardware)                          | Moderate (per-device scaling)                             | Limited (fixed hardware)                                 |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| **Operational**          |                                                          |                                                          |                                                           |                                                          |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Data Privacy             | Basic-Moderate (Data leaves device)                      | High (Data stays in local network)                       | High (Data stays on phone)                                | Very High (Data never leaves sensor)                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Connectivity Required    | Constant high-bandwidth                                  | Intermittent                                             | Optional                                                  | None                                                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Offline Capability       | None                                                     | Good                                                     | Excellent                                                 | Complete                                                 |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Real-time Processing     | Dependent on network                                     | Good                                                     | Very Good                                                 | Excellent                                                |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| **Deployment**           |                                                          |                                                          |                                                           |                                                          |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Cost                     | High ($1000s+/month)                                     | Moderate ($100s-1000s)                                   | Low ($0-10s)                                              | Very Low ($1-10s)                                        |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Hardware Requirements    | Cloud infrastructure                                     | Edge servers/gateways                                    | Modern smartphones                                        | MCUs/embedded systems                                    |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Development Complexity   | High (cloud expertise needed)                            | Moderate-High (edge+networking)                          | Moderate (mobile SDKs)                                    | High (embedded expertise)                                |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Deployment Speed         | Fast                                                     | Moderate                                                 | Fast                                                      | Slow                                                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+

: Comparison of feature aspects across Cloud ML, Edge ML, and Tiny ML. {#tbl-big_vs_tiny .hover .striped}

The operational characteristics of these systems reveal another important dimension of comparison. @tbl-big_vs_tiny organizes these characteristics into logical groupings, highlighting performance, operational considerations, costs, and development aspects. For instance, latency shows a clear gradient: cloud systems typically incur delays of 100-1000 ms due to network communication, while edge systems reduce this to 10-100 ms by processing data locally. Mobile ML achieves even lower latencies of 5-50 ms for many tasks, and TinyML systems can respond in 1-10 ms for simple inferences. Similarly, privacy and data handling improve progressively as computation shifts closer to the data source, with TinyML offering the strongest guarantees by keeping data entirely local to the device.

The table is designed to provide a high-level view of how these paradigms differ across key dimensions, making it easier to understand the trade-offs and select the most appropriate approach for specific deployment needs.

To complement the details presented in @tbl-big_vs_tiny, radar plots are presented below. These visualizations highlight two critical dimensions: performance characteristics and operational characteristics. The performance characteristics plot in @fig-perf_char focuses on latency, compute power, energy consumption, and scalability. As discussed earlier, Cloud ML demands exceptional compute power and demonstrates good scalability, making it ideal for large-scale tasks requiring extensive resources. Tiny ML, in contrast, excels in latency and energy efficiency due to its lightweight and localized processing, suitable for low-power, real-time scenarios. Edge ML and Mobile ML strike a balance, offering moderate scalability and efficiency for a variety of applications.

::: {.content-visible when-format="html"}
::: {layout-ncol=2}
![Performance characteristics.](images/png/perf_char.png){#fig-perf_char}

![Operational characteristics.](images/png/op_char.png){#fig-op_char}
:::
:::

::: {.content-visible when-format="pdf"}
::: {.column-margin}
\addtocounter{figure}{1}
Figure \thefigure: a) Performance characteristics. b) Operational characteristics.
\addtocounter{figure}{-1}
:::

::: {layout="[[48,-4,48]]"}
![\hphantom{XX}](images/png/perf_char.png){#fig-perf_char}

![\hphantom{XX}](images/png/op_char.png){#fig-op_char}
:::
:::

The operational characteristics plot in @fig-op_char emphasizes data privacy, connectivity independence, offline capability, and real-time processing. Tiny ML emerges as a highly independent and private paradigm, excelling in offline functionality and real-time responsiveness. In contrast, Cloud ML relies on centralized infrastructure and constant connectivity, which can be a limitation in scenarios demanding autonomy or low-latency decision-making.

Development complexity and deployment considerations also vary significantly across these paradigms. Cloud ML benefits from mature development tools and frameworks but requires expertise in cloud infrastructure. Edge ML demands knowledge of both ML and networking protocols, while Mobile ML developers must understand mobile-specific optimizations and platform constraints. TinyML development, though targeting simpler devices, often requires specialized knowledge of embedded systems and careful optimization to work within severe resource constraints.

Cost structures differ markedly as well. Cloud ML typically involves ongoing operational costs for computation and storage, often running into thousands of dollars monthly for large-scale deployments. Edge ML requires significant upfront investment in edge devices but may reduce ongoing costs. Mobile ML leverages existing consumer devices, minimizing additional hardware costs, while TinyML solutions can be deployed for just a few dollars per device, though development costs may be higher.

These comparisons reveal that each paradigm has distinct advantages and limitations. Cloud ML excels at complex, data-intensive tasks but requires constant connectivity. Edge ML offers a balance of computational power and local processing. Mobile ML provides personalized intelligence on ubiquitous devices. TinyML enables ML in previously inaccessible contexts but requires careful optimization. Understanding these trade-offs is crucial for selecting the appropriate deployment strategy for specific applications and constraints.

## Deployment Decision Framework {#sec-ml-systems-deployment-decision-framework-cb57}

We have examined the diverse paradigms of machine learning systems, including Cloud ML, Edge ML, Mobile ML, and Tiny ML, each with its own characteristics, trade-offs, and use cases. Selecting an optimal deployment strategy requires careful consideration of multiple factors.

::: {#fig-mlsys-playbook-flowchart fig-env="figure" fig-pos="!t"}
```{.tikz}
\resizebox{.75\textwidth}{!}{%
\begin{tikzpicture}[font=\small\usefont{T1}{phv}{m}{n},line width=0.75pt]
\tikzset{
  Line/.style={line width=1.0pt,black!50,text=black},
  Box/.style={inner xsep=2pt,
    draw=GreenLine, line width=0.65pt,
    fill=GreenL,
    text width=25mm,align=flush center,
    minimum width=25mm, minimum height=9mm
  },
  Box1/.style={inner xsep=2pt,
    node distance=0.5,
    draw=BlueLine, line width=0.65pt,
    fill=BlueL,
    text width=33mm,align=flush center,
    minimum width=33mm, minimum height=9mm
  },
  Text/.style={inner xsep=2pt,
    draw=none, line width=0.75pt,
    fill=TextColor,
    font=\footnotesize\usefont{T1}{phv}{m}{n},
    align=flush center,
    minimum width=7mm, minimum height=5mm
  },
}
%
\begin{scope}
\node[Box, rounded corners=12pt,fill=magenta!20](B1){Start};
\node[Box1,below=of B1](B2){Is privacy critical?};
\node[Box,below left=0.15 and 1 of B2](B3){Cloud Processing Allowed};
\node[Box,below right=0.15 and 1 of B2](B4){Local Processing Preferred};
\draw[Line,-latex](B1)--(B2);
\draw[Line,-latex](B2)-|node[Text,pos=0.2]{No}(B3);
\draw[Line,-latex](B2)-|node[Text,pos=0.2]{Yes}(B4);
\scoped[on background layer]
\node[draw=BackLine,inner xsep=12mm,inner ysep=4mm,yshift=0mm,
       fill=BackColor,fit=(B1)(B3)(B4),line width=0.75pt](BB){};
\node[below=11pt of BB.north east,anchor=east]{Layer: Privacy};
\end{scope}
%
\begin{scope}[shift={(0,-4.8)}]
\node[Box1](2B1){Is low latency required ($<$10 ms)?};
\node[Box,below left=0.15 and 1 of 2B1](2B2){Latency Tolerant};
\node[Box,below right=0.15 and 1 of 2B1](2B3){Tiny or Edge ML};
\draw[Line,-latex](2B1)-|node[Text,pos=0.2]{No}(2B2);
\draw[Line,-latex](2B1)-|node[Text,pos=0.2]{Yes}(2B3);
\scoped[on background layer]
\node[draw=BackLine,inner xsep=12mm,inner ysep=4mm,yshift=0mm,
       fill=BackColor,fit=(2B1)(2B2)(2B3),line width=0.75pt](BB1){};
\node[below=11pt of BB1.north east,anchor=east]{Layer: Performance};
\end{scope}
\draw[Line,-latex](B3)--++(270:1.15)-|(2B1.110);
\draw[Line,-latex](B4)--++(270:1.15)-|(2B1.70);
%
\begin{scope}[shift={(0,-8.4)}]
\node[Box1](3B1){Does the model require significant compute?};
\node[Box,below left=0.15 and 1 of 3B1](3B2){Heavy Compute};
\node[Box,below right=0.15 and 1 of 3B1](3B3){Lightweight Processing};
\draw[Line,-latex](3B1)-|node[Text,pos=0.2]{Yes}(3B2);
\draw[Line,-latex](3B1)-|node[Text,pos=0.2]{No}(3B3);
\scoped[on background layer]
\node[draw=BackLine,inner xsep=12mm,inner ysep=5mm,yshift=1mm,
       fill=BackColor,fit=(3B1)(3B2)(3B3),line width=0.75pt](BB2){};
\node[below=11pt of BB2.north east,anchor=east]{Layer: Compute Needs};
\end{scope}
\draw[Line,-latex](2B2)--++(270:1.15)-|(3B1.110);
\draw[Line,-latex](2B3)--++(270:1.15)-|(3B1.70);
%4
\begin{scope}[shift={(0,-12.0)}]
\node[Box1](4B1){Are there strict cost constraints?};
\node[Box,below left=0.15 and 1 of 4B1](4B2){Flexible Budget};
\node[Box,below right=0.15 and 1 of 4B1](4B3){Low-Cost Options};
\draw[Line,-latex](4B1)-|node[Text,pos=0.2]{No}(4B2);
\draw[Line,-latex](4B1)-|node[Text,pos=0.2]{Yes}(4B3);
\scoped[on background layer]
\node[draw=BackLine,inner xsep=12mm,inner ysep=5mm,yshift=1mm,
       fill=BackColor,fit=(4B1)(4B2)(4B3),line width=0.75pt](BB3){};
\node[below=11pt of  BB3.north east,anchor=east]{Layer: Cost};
\end{scope}
\draw[Line,-latex](3B2)--++(270:1.15)-|(4B1.110);
\draw[Line,-latex](3B3)--++(270:1.15)-|(4B1.70);
%5
\begin{scope}[shift={(-0.45,-14.8)},anchor=north east]
\node[Box,fill=magenta!20,rounded corners=12pt,text width=18mm,
       minimum width=17mm](5B1){Cloud ML};
\node[Box,node distance=1.0,fill=magenta!20,rounded corners=12pt,left=of 5B1,text width=18mm,
       minimum width=17mm](5B2){Edge ML};
\node[Box,node distance=1.0,fill=magenta!20, rounded corners=12pt,right=of 5B1,text width=18mm,
       minimum width=17mm](5B3){Mobile ML};
\node[Box,node distance=1.0,fill=magenta!20, rounded corners=12pt,right=of 5B3,text width=18mm,
       minimum width=17mm](5B4){Tiny ML};
%
\scoped[on background layer]
\node[draw=BackLine,inner xsep=12mm,inner ysep=5mm,yshift=-1mm,
       fill=BackColor,fit=(5B1)(5B2)(5B4),line width=0.75pt](BB4){};
\node[above=8pt of BB4.south east,anchor=east]{Layer: Deployment Options};
\end{scope}
\draw[Line,-latex](4B3)-|(5B3);
\draw[Line,-latex](4B3)--++(270:1.1)-|(5B4);
\draw[Line,-latex](4B2)--++(270:1.1)-|(5B1);
\draw[Line,-latex](3B2.west)--++(180:0.5)|-(5B2);
\end{tikzpicture}}
```
A decision flowchart for selecting the most suitable ML deployment paradigm.
:::

To facilitate this decision-making process, we present a structured framework in @fig-mlsys-playbook-flowchart. This framework distills the chapter's key insights into a systematic approach for determining the most suitable deployment paradigm based on specific requirements and constraints.

The framework is organized into five fundamental layers of consideration:

- **Privacy**: Determines whether processing can occur in the cloud or must remain local to safeguard sensitive data.
- **Latency**: Evaluates the required decision-making speed, particularly for real-time or near-real-time processing needs.
- **Reliability**: Assesses network stability and its impact on deployment feasibility.

- **Compute Needs**: Identifies whether high-performance infrastructure is required or if lightweight processing suffices.
- **Cost and Energy Efficiency**: Balances resource availability with financial and energy constraints, particularly crucial for low-power or budget-sensitive applications.

As designers progress through these layers, each decision point narrows the viable options, ultimately guiding them toward one of the four deployment paradigms. This systematic approach proves valuable across various scenarios. For instance, privacy-sensitive healthcare applications might prioritize local processing over cloud solutions, while high-performance recommendation engines typically favor cloud infrastructure. Similarly, applications requiring real-time responses often gravitate toward edge or mobile-based deployment.

While not exhaustive, this framework provides a practical roadmap for navigating deployment decisions. By following this structured approach, system designers can evaluate trade-offs and align their deployment choices with technical, financial, and operational priorities, even as they address the unique challenges of each application.

## Summary {#sec-ml-systems-summary-e359}

This chapter has explored the diverse landscape of machine learning systems, highlighting their unique characteristics, benefits, challenges, and applications. Cloud ML leverages immense computational resources, excelling in large-scale data processing and model training but facing limitations such as latency and privacy concerns. Edge ML bridges this gap by enabling localized processing, reducing latency, and enhancing privacy. Mobile ML builds on these strengths, harnessing the ubiquity of smartphones to provide responsive, user-centric applications. At the smallest scale, Tiny ML extends the reach of machine learning to resource-constrained devices, opening new domains of application.

Together, these paradigms reflect an ongoing progression in machine learning, moving from centralized systems in the cloud to increasingly distributed and specialized deployments across edge, mobile, and tiny devices. This evolution marks a shift toward systems that are finely tuned to specific deployment contexts, balancing computational power, energy efficiency, and real-time responsiveness. As these paradigms mature, hybrid approaches are emerging, blending their strengths to unlock new possibilitiesâfrom cloud-based training paired with edge inference to federated learning[^fn-federated-learning] and hierarchical processing[^fn-hierarchical-processing].

[^fn-federated-learning]: Federated learning is an approach where global models are trained locally on devices and then aggregated back on a server, maintaining user privacy.
[^fn-hierarchical-processing]: Hierarchical processing refers to analyzing and processing data in a hierarchical manner, often to manage computational complexity.

Despite their variety, ML systems can be distilled into a core set of unifying principles that span resource management, data pipelines, and system architecture. These principles provide a structured framework for understanding and designing ML systems at any scale. By focusing on these shared fundamentals and mastering their design and optimization, we can navigate the complexity of the ML landscape with clarity and confidence. As we continue to advance, these principles will act as a compass, guiding our exploration and innovation within the ever-evolving field of machine learning systems. Regardless of how diverse or complex these systems become, a strong grasp of these foundational concepts will remain essential to unlocking their full potential.
