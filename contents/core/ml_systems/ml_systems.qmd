---
bibliography: ml_systems.bib
---

# ML Systems {#sec-ml_systems}

::: {.content-visible when-format="html"}
Resources: [Slides](#sec-ml-systems-resource), [Videos](#sec-ml-systems-resource), [Exercises](#sec-ml-systems-resource)
:::

![*DALL·E 3 Prompt: Illustration in a rectangular format depicting the merger of embedded systems with Embedded AI. The left half of the image portrays traditional embedded systems, including microcontrollers and processors, detailed and precise. The right half showcases the world of artificial intelligence, with abstract representations of machine learning models, neurons, and data flow. The two halves are distinctly separated, emphasizing the individual significance of embedded tech and AI, but they come together in harmony at the center.*](images/png/cover_ml_systems.png)

## Purpose {.unnumbered}

_How do the diverse environments where machine learning operates shape the fundamental nature of these systems, and what drives their widespread deployment across computing platforms?_

The deployment of machine learning systems across varied computing environments reveals essential insights into the relationship between theoretical principles and practical implementation. Each computing environment - from large-scale distributed systems to resource-constrained devices - introduces distinct requirements that influence both system architecture and algorithmic approaches. Understanding these relationships reveals core engineering principles that govern the design of machine learning systems. This understanding provides a foundation for examining how theoretical concepts translate into practical implementations, and how system designs adapt to meet diverse computational, memory, and energy constraints.

:::{.callout-tip}

## Learning Objectives

- Understand the key characteristics and differences between Cloud ML, Edge ML, Mobile ML, and Tiny ML systems.

- Analyze the benefits and challenges associated with each ML paradigm.

- Explore real-world applications and use cases for Cloud ML, Edge ML, Mobile ML, and Tiny ML.

- Compare the performance aspects of each ML approach, including latency, privacy, and resource utilization.

- Examine the evolving landscape of ML systems and potential future developments.
:::

## Overview

Modern machine learning systems span a spectrum of deployment options, each with its own set of characteristics and use cases. At one end, we have cloud-based ML, which leverages powerful centralized computing resources for complex, data-intensive tasks. Moving along the spectrum, we encounter edge ML, which brings computation closer to the data source for reduced latency and improved privacy. Mobile ML further extends these capabilities to smartphones and tablets, while at the far end, we find Tiny ML, which enables machine learning on extremely low-power devices with severe memory and processing constraints.

This spectrum of deployment can be visualized like Earth's geological features, each operating at different scales in our computational landscape. Cloud ML systems operate like continents, processing vast amounts of data across interconnected centers; Edge ML exists where these continental powers meet the sea, creating dynamic coastlines where computation flows into local waters; Mobile ML moves through these waters like ocean currents, carrying computing power across the digital seas; and where these currents meet the physical world, TinyML systems rise like islands, each a precise point of intelligence in the vast computational ocean.

@fig-cloud-edge-TinyML-comparison illustrates the spectrum of distributed intelligence across these approaches, providing a visual comparison of their characteristics. We will examine the unique characteristics, advantages, and challenges of each approach, as depicted in the figure. Additionally, we will discuss the emerging trends and technologies that are shaping the future of machine learning deployment, considering how they might influence the balance between these three paradigms.

![Cloud vs. Edge vs. Mobile vs. Tiny ML: The Spectrum of Distributed Intelligence. Source: ABI Research -- Tiny ML.](images/png/cloud-edge-tiny.png){#fig-cloud-edge-TinyML-comparison}

To better understand the dramatic differences between these ML deployment options, @tbl-representative-systems provides examples of representative hardware platforms for each category. These examples illustrate the vast range of computational resources, power requirements, and cost considerations across the ML systems spectrum. As we explore each paradigm in detail, you can refer back to these concrete examples to better understand the practical implications of each approach.

+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Category      | Example Device        | Processor                            | Memory         | Storage          | Power     | Price Range | Example Models/Tasks           |
+===============+:======================+:=====================================+:===============+:=================+:==========+:============+:===============================+
| Cloud ML      | NVIDIA DGX A100       | 8x NVIDIA A100 GPUs (40GB/80GB)      | 1TB System RAM | 15TB NVMe SSD    | 6.5kW     | $200K+      | Large language models (GPT-3), |
|               |                       |                                      |                |                  |           |             | real-time video processing     |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | Google TPU v4 Pod     | 4096 TPU v4 chips                    | 128TB+         | Networked        | ~MW       | Pay-per-use | Training foundation models,    |
|               |                       |                                      |                | storage          |           |             | large-scale ML research        |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Edge ML       | NVIDIA Jetson AGX     | 12-core Arm® Cortex®-A78AE,          | 32GB LPDDR5    | 64GB eMMC        | 15-60W    | $899        | Computer vision, robotics,     |
|               | Orin                  | NVIDIA Ampere GPU                    |                |                  |           |             | autonomous systems             |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | Intel NUC 12 Pro      | Intel Core i7-1260P, Intel Iris Xe   | 32GB DDR4      | 1TB SSD          | 28W       | $750        | Edge AI servers,               |
|               |                       |                                      |                |                  |           |             | industrial automation          |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Mobile ML     | iPhone 15 Pro         | A17 Pro (6-core CPU, 6-core GPU)     | 8GB RAM        | 128GB-1TB        | 3-5W      | $999+       | Face ID, computational         |
|               |                       |                                      |                |                  |           |             | photography, voice recognition |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
| Tiny ML       | Arduino Nano 33       | Arm Cortex-M4 @ 64MHz                | 256KB RAM      | 1MB Flash        | 0.02-0.04W| $35         | Gesture recognition,           |
|               | BLE Sense             |                                      |                |                  |           |             | voice detection                |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+
|               | ESP32-CAM             | Dual-core @ 240MHz                   | 520KB RAM      | 4MB Flash        | 0.05-0.25W| $10         | Image classification,          |
|               |                       |                                      |                |                  |           |             | motion detection               |
+---------------+-----------------------+--------------------------------------+----------------+------------------+-----------+-------------+--------------------------------+

: Representative hardware platforms across the ML systems spectrum, showing typical specifications and capabilities for each category. {#tbl-representative-systems .hover .striped}

The evolution of machine learning systems can be seen as a progression from centralized to increasingly distributed and specialized computing paradigms:

**Cloud ML:** Initially, ML was predominantly cloud-based. Powerful, scalable servers in data centers are used to train and run large ML models. This approach leverages vast computational resources and storage capacities, enabling the development of complex models trained on massive datasets. Cloud ML excels at tasks requiring extensive processing power, distributed training of large models, and is ideal for applications where real-time responsiveness isn't critical. Popular platforms like AWS SageMaker, Google Cloud AI, and Azure ML offer flexible, scalable solutions for model development, training, and deployment. Cloud ML can handle models with billions of parameters, training on petabytes of data, but may incur latencies of 100-500ms for online inference due to network delays.

**Edge ML:** As the need for real-time, low-latency processing grew, Edge ML emerged. This paradigm brings inference capabilities closer to the data source, typically on edge devices such as industrial gateways, smart cameras, autonomous vehicles, or IoT hubs. Edge ML reduces latency (often to less than 50ms), enhances privacy by keeping data local, and can operate with intermittent cloud connectivity. It's particularly useful for applications requiring quick responses or handling sensitive data in industrial or enterprise settings. Frameworks like NVIDIA Jetson or Google's Edge TPU enable powerful ML capabilities on edge devices. Edge ML plays a crucial role in IoT ecosystems, enabling real-time decision making and reducing bandwidth usage by processing data locally.

**Mobile ML:** Building on edge computing concepts, Mobile ML focuses on leveraging the computational capabilities of smartphones and tablets. This approach enables personalized, responsive applications while reducing reliance on constant network connectivity. Mobile ML offers a balance between the power of edge computing and the ubiquity of personal devices. It utilizes on-device sensors (e.g., cameras, GPS, accelerometers) for unique ML applications. Frameworks like TensorFlow Lite and Core ML allow developers to deploy optimized models on mobile devices, with inference times often under 30ms for common tasks. Mobile ML enhances privacy by keeping personal data on the device and can operate offline, but must balance model performance with device resource constraints (typically 4-8GB RAM, 100-200GB storage).

**Tiny ML:** The latest development in this progression is Tiny ML, which enables ML models to run on extremely resource-constrained microcontrollers and small embedded systems. Tiny ML allows for on-device inference without relying on connectivity to the cloud, edge, or even the processing power of mobile devices. This approach is crucial for applications where size, power consumption, and cost are critical factors. Tiny ML devices typically operate with less than 1MB of RAM and flash memory, consuming only milliwatts of power, enabling battery life of months or years. Applications include wake word detection, gesture recognition, and predictive maintenance in industrial settings. Platforms like Arduino Nano 33 BLE Sense and STM32 microcontrollers, coupled with frameworks like TensorFlow Lite for Microcontrollers, enable ML on these tiny devices. However, Tiny ML requires significant model optimization and quantization to fit within these constraints.

Each of these paradigms has its own strengths and is suited to different use cases:

- Cloud ML remains essential for tasks requiring massive computational power or large-scale data analysis.
- Edge ML is ideal for applications needing low-latency responses or local data processing in industrial or enterprise environments.
- Mobile ML is suited for personalized, responsive applications on smartphones and tablets.
- Tiny ML enables AI capabilities in small, power-efficient devices, expanding the reach of ML to new domains.

This progression reflects a broader trend in computing towards more distributed, localized, and specialized processing. The evolution is driven by the need for faster response times, improved privacy, reduced bandwidth usage, and the ability to operate in environments with limited or no connectivity, while also catering to the specific capabilities and constraints of different types of devices.

@fig-vMLsizes illustrates the key differences between Cloud ML, Edge ML, Mobile ML, and Tiny ML in terms of hardware, latency, connectivity, power requirements, and model complexity. As we move from Cloud to Edge to Tiny ML, we see a dramatic reduction in available resources, which presents significant challenges for deploying sophisticated machine learning models. This resource disparity becomes particularly apparent when attempting to deploy deep learning models on microcontrollers, the primary hardware platform for Tiny ML. These tiny devices have severely constrained memory and storage capacities, which are often insufficient for conventional deep learning models. We will learn to put these things into perspective in this chapter.

![From cloud GPUs to microcontrollers: Navigating the memory and storage landscape across computing devices. Source: [@lin2023tiny]](./images/jpg/cloud_mobile_tiny_sizes.jpg){#fig-vMLsizes}

## Cloud ML

Cloud ML utilizes the immense computational power of cloud-based servers to facilitate the training and deployment of large, intricate machine learning models. This paradigm depends heavily on reliable internet connectivity to ensure seamless communication with these robust computational resources. @fig-cloud-ml provides a visual overview of Cloud ML's capabilities, which will be examined in greater detail throughout this section.

![Section overview for Cloud ML.](images/png/cloudml.png){#fig-cloud-ml}

### Characteristics

#### Definition of Cloud ML

Cloud Machine Learning (Cloud ML) is a specialized domain within machine learning that leverages the exceptional scalability and computational power of cloud computing infrastructure. Harnessing the extensive resources of the cloud, Cloud ML facilitates the efficient processing of vast datasets and computationally intensive machine learning algorithms.

#### Centralized Infrastructure

A fundamental characteristic of Cloud ML is its centralized infrastructure, as illustrated in @fig-cloudml-example with an example from Google's Cloud TPU data center. Cloud service providers design and maintain virtualized platforms comprising high-capacity servers, expansive storage systems, and robust networking architectures. These globally distributed facilities house numerous rows of specialized hardware, as depicted in the figure. This centralized configuration supports the pooling and efficient management of computational resources, enabling seamless scalability as project demands evolve.

![Cloud TPU data center at Google. Source: [Google.](https://blog.google/technology/ai/google-gemini-ai/#scalable-efficient)](images/png/cloud_ml_tpu.png){#fig-cloudml-example}

#### Scalable Data Processing and Model Training

Cloud ML is notable for its ability to process and analyze vast quantities of data with exceptional efficiency. The centralized infrastructure is designed to handle complex computations and [model training](../training/training.qmd) tasks that require significant computational power. By leveraging the cloud's scalability, machine learning models can be trained on vast amounts of data, leading to improved learning capabilities and predictive performance.

#### Flexible Deployment and Accessibility

One of the key advantages of Cloud ML is its flexibility in deployment and accessibility. Once a machine learning model has been trained and validated, it can be easily deployed and made accessible to users via cloud-based services. This enables the seamless integration of machine learning capabilities into a wide range of applications and services, irrespective of the user’s location or device.

#### Collaboration and Resource Sharing

Cloud ML promotes collaboration and resource sharing among teams and organizations. The centralized nature of the cloud infrastructure enables multiple users to access and work on the same machine learning projects simultaneously. This collaborative approach facilitates knowledge sharing, accelerates the development process, and optimizes resource utilization.

#### Cost-Effectiveness and Scalability

Cloud ML leverages the pay-as-you-go pricing model cloud service providers offer, enabling organizations to circumvent the significant upfront costs typically associated with building and maintaining a dedicated machine learning infrastructure. This pricing model, combined with the ability to scale resources to meet varying project demands dynamically, ensures both cost-effectiveness and operational flexibility in managing machine learning initiatives.

Cloud ML has fundamentally transformed the field of machine learning, enhancing its accessibility, scalability, and efficiency. It has empowered organizations to harness the full potential of machine learning without requiring substantial investments in physical hardware or local infrastructure.

### Benefits

Cloud ML offers a suite of notable advantages that establish it as a compelling choice for machine learning projects.

#### Immense Computational Power

A principal advantage of Cloud ML lies in its provision of vast computational resources. The cloud infrastructure has been meticulously designed and optimized to efficiently handle complex algorithms and process large datasets. This capability is particularly beneficial for machine learning models that require significant computational resources, such as deep learning networks or models trained on extensive datasets. By utilizing the cloud's computational capabilities, limitations imposed by local hardware setups are mitigated, while scalability is achieved to meet the requirements of demanding projects.

#### Dynamic Scalability

Dynamic scalability is a defining feature of Cloud ML, allowing organizations to seamlessly adjust to evolving computational needs. As data volumes grow or model complexity increases, the cloud infrastructure is dynamically scaled to accommodate these changes. This flexibility ensures consistent performance and facilitates the management of varying workloads without significant investments in physical hardware. Through the allocation of resources on demand, Cloud ML provides a cost-effective and efficient framework for managing machine learning workloads.

#### Access to Advanced Tools and Algorithms

Cloud ML platforms provide access to a wide range of advanced tools and algorithms specifically designed for machine learning. These tools often include pre-built libraries, frameworks, and APIs that simplify the development and deployment of machine learning models. Developers can leverage these resources to accelerate the building, training, and optimization of sophisticated models. By utilizing the latest advancements in machine learning algorithms and techniques, organizations can stay at the forefront of innovation and achieve better results in their machine learning projects.

#### Collaborative Environment

Cloud ML actively facilitates a collaborative environment, enabling seamless teamwork across distributed teams. The centralized cloud infrastructure allows multiple users to simultaneously access, edit, and contribute to the same machine learning projects. This collaborative approach encourages knowledge sharing and fosters cross-functional synergy, enabling faster development cycles and iterative refinements of models. The streamlined sharing of resources—such as code, datasets, and results—further enhances collaboration, driving efficiency and promoting an innovation-driven culture across teams.

#### Cost-Effectiveness

The adoption of Cloud ML represents a cost-effective alternative to establishing and maintaining on-premises machine learning infrastructure. Cloud service providers offer flexible pricing models, such as pay-as-you-go or subscription-based plans, enabling organizations to pay solely for the resources they use. This approach eliminates the need for substantial upfront capital investments in hardware and infrastructure, reducing the overall costs of machine learning projects. Furthermore, the scalability inherent in Cloud ML optimizes resource utilization and eliminates over-provisioning, further improving cost efficiency.

The advantages offered by Cloud ML—including immense computational power, dynamic scalability, access to advanced tools and algorithms, a collaborative environment, and cost-effectiveness—establish it as an indispensable solution for organizations seeking to harness the full potential of machine learning. By leveraging cloud-based capabilities, organizations can accelerate their machine-learning initiatives, foster innovation, and secure a competitive edge in today's data-driven landscape.

### Challenges

While Cloud ML presents numerous advantages, inherent challenges warrant careful consideration by organizations.

#### Latency Issues

A significant challenge associated with Cloud ML is the potential for latency, particularly in applications requiring real-time responsiveness. Data transmission between local sources and centralized cloud servers delays network transmission. This latency can pose critical obstacles in time-sensitive applications, such as autonomous vehicles, real-time fraud detection systems, or industrial control systems, where immediate decision-making is essential. Mitigating these issues involves careful system design, integrating edge computing solutions, or prioritizing localized data processing where feasible. These strategies aim to reduce delays and maintain acceptable response times.

#### Data Privacy and Security Concerns

Centralizing data processing and storage within the cloud inherently raises critical concerns regarding data privacy and security. Transmitting and storing sensitive data in remote data centers increases its vulnerability to potential cyberattacks and unauthorized access. Cloud data centers are frequently targeted by malicious actors seeking to exploit vulnerabilities and access valuable information. Organizations should implement robust security measures to address these risks, including advanced encryption protocols, multifactor authentication, stringent access controls, and continuous monitoring systems. Furthermore, compliance with data privacy regulations, such as GDPR or HIPAA, is essential; non-compliance can result in severe legal and reputational consequences.

#### Cost Considerations

As data processing demands increase, the costs associated with cloud service utilization can also rise significantly. While Cloud ML offers scalability and flexibility, organizations managing large-scale data volumes may encounter escalating expenses as resource consumption grows. While advantageous for scalability, the pay-as-you-go pricing structure can lead to unexpected cost accumulation, especially for compute-intensive operations like model training, inference, and hyperparameter tuning. Effective cost management involves proactively monitoring cloud resource usage and implementing optimization strategies, including data compression, efficient algorithm design, and workload scheduling. Careful planning can help ensure cost-effectiveness while meeting performance objectives.

#### Dependency on Internet Connectivity

The effective operation of Cloud ML depends heavily on stable and reliable internet connectivity. As data transmission between local systems and the cloud is fundamental to its functionality, disruptions or limitations in network connectivity can significantly degrade system performance and availability. This reliance on internet connectivity is particularly challenging when network access is unreliable, costly, or unavailable. This dependency is mitigated through investments in robust, redundant network infrastructures, the integration of edge computing to reduce reliance on cloud systems for real-time tasks, and the development of failover mechanisms or offline processing capabilities to ensure service continuity during connectivity disruptions.

#### Vendor Lock-In

Adopting Cloud ML often entails relying on the specific tools, APIs, and services a chosen cloud vendor provides. This vendor dependency, or "lock-in," can limit organizational flexibility when transitioning to alternative providers or new platforms. Challenges related to data portability, service interoperability, and long-term costs can complicate the process of switching providers. Mitigating vendor lock-in risks requires organizations to evaluate vendor offerings carefully, prioritize adopting open standards and interoperable solutions, and establish long-term migration strategies aligned with organizational objectives.

Addressing these challenges necessitates thorough planning, resilient architectural design, and proactive risk mitigation strategies. Organizations must balance the advantages of Cloud ML against these potential obstacles and make informed decisions based on their unique requirements, data sensitivity, and business objectives. By systematically addressing these challenges, organizations can harness the transformative potential of Cloud ML while ensuring data privacy, security, cost efficiency, and system reliability.

### Example Use Cases

Cloud ML has achieved widespread adoption across diverse domains, redefining business operations and transforming user interactions with technology. The following are notable applications of Cloud ML.

#### Virtual Assistants

Cloud ML is instrumental in powering virtual assistants such as Siri and Alexa. These systems leverage the immense computational capacity of the cloud to process and analyze voice inputs in real-time. Advanced natural language processing and machine learning techniques enable virtual assistants to interpret user queries, extract relevant information, and generate intelligent, context-aware responses. The cloud's scalability and processing power enable these systems to handle large volumes of simultaneous user interactions, ensuring a seamless and highly responsive user experience.

#### Recommendation Systems

Cloud ML forms the foundation of advanced recommendation systems utilized by platforms such as Netflix and Amazon. These systems utilize the cloud's capacity to process and analyze extensive datasets, identifying patterns, preferences, and user behaviors. Techniques such as collaborative filtering, deep learning algorithms, and other advanced methodologies enable these systems to generate personalized recommendations tailored to individual user interests. The cloud's scalability facilitates continuous updates and refinements, allowing these systems to adapt dynamically as user data grows, enhancing engagement and satisfaction.

#### Fraud Detection

In the financial industry, Cloud ML has revolutionized fraud detection systems. By leveraging the cloud's computational power, these systems analyze vast volumes of transactional data in real-time to identify potentially fraudulent activities. Machine learning algorithms trained on historical fraud patterns detect anomalies and suspicious behaviors, enabling financial institutions to mitigate fraud and minimize financial losses proactively. The cloud's ability to process and store extensive datasets makes it an ideal platform for implementing robust and scalable fraud detection infrastructures.

#### Personalized User Experiences

Cloud ML is deeply integrated into modern online experiences, transforming how users interact with digital platforms. From personalized advertisements on social media feeds to predictive text functionalities in email services, Cloud ML powers intelligent algorithms that enhance user engagement and convenience. It enables e-commerce platforms to recommend products based on users' browsing and purchase histories, refines search engines to deliver highly relevant results, and automates the tagging and categorization of images on platforms like Facebook. By leveraging the cloud's computational resources, these systems continuously learn and adapt to user preferences, providing increasingly personalized and intuitive user experiences.

#### Security and Anomaly Detection

Cloud ML is pivotal in enhancing security by powering advanced anomaly detection systems. These systems continuously monitor user activities and system logs to identify unusual patterns or suspicious behaviors. Through real-time analysis of extensive datasets, Cloud ML algorithms detect potential cyber threats, such as unauthorized access attempts, malware infections, or data breaches. The scalability and processing power of the cloud enables these systems to manage the growing complexity and volume of security data, allowing organizations to adopt a proactive approach to safeguarding users and infrastructure against evolving threats. 

## Edge ML

As machine learning applications grow, so does the need for faster, localized decision-making. Edge Machine Learning (Edge ML) shifts computation away from centralized servers, processing data closer to its source. This paradigm is critical for time-sensitive applications, such as autonomous systems, industrial IoT, and smart infrastructure, where minimizing latency and preserving data privacy are paramount. Edge devices, like gateways and IoT hubs, enable these systems to function efficiently while reducing dependence on cloud infrastructures.

::: {.callout-note}
### Definition of Edge ML

**Edge Machine Learning (Edge ML)** describes the deployment of machine learning models at or near the *edge of the network*[^fn-edge-network]. These systems operate in the *tens to hundreds of watts* range and rely on *localized hardware* optimized for *real-time processing*. Edge ML minimizes *latency* and enhances *privacy* by processing data locally, but its primary limitation lies in *restricted computational resources*.
:::

[^fn-edge-network]: The "edge of the network" refers to devices or systems positioned between centralized cloud infrastructures and end-user devices, such as gateways, IoT hubs, or industrial sensors.

@fig-edge-ml provides an overview of this section.

![Section overview for Edge ML.](images/png/edgeml.png){#fig-edge-ml}

### Characteristics

#### Decentralized Data Processing

In Edge ML, data processing happens in a decentralized fashion, as illustrated in @fig-edgeml-example. Instead of sending data to remote servers, the data is processed locally on devices like smartphones, tablets, or Internet of Things (IoT) devices. The figure showcases various examples of these edge devices, including wearables, industrial sensors, and smart home appliances. This local processing allows devices to make quick decisions based on the data they collect without relying heavily on a central server's resources.

![Edge ML Examples. Source: Edge Impulse.](images/jpg/edge_ml_iot.jpg){#fig-edgeml-example}

#### Local Data Storage and Computation

Local data storage and computation are key features of Edge ML. This setup ensures that data can be stored and analyzed directly on the devices, thereby maintaining the privacy of the data and reducing the need for constant internet connectivity. Moreover, this often leads to more efficient computation, as data doesn't have to travel long distances, and computations are performed with a more nuanced understanding of the local context, which can sometimes result in more insightful analyses.

### Benefits

#### Reduced Latency

One of Edge ML's main advantages is the significant latency reduction compared to Cloud ML. This reduced latency can be a critical benefit in situations where milliseconds count, such as in autonomous vehicles, where quick decision-making can mean the difference between safety and an accident.

#### Enhanced Data Privacy

Edge ML also offers improved data privacy, as data is primarily stored and processed locally. This minimizes the risk of data breaches that are more common in centralized data storage solutions. Sensitive information can be kept more secure, as it's not sent over networks that could be intercepted.

#### Lower Bandwidth Usage

Operating closer to the data source means less data must be sent over networks, reducing bandwidth usage. This can result in cost savings and efficiency gains, especially in environments where bandwidth is limited or costly.

### Challenges

#### Limited Computational Resources Compared to Cloud ML

However, Edge ML has its challenges. One of the main concerns is the limited computational resources compared to cloud-based solutions. Endpoint devices may have a different processing power or storage capacity than cloud servers, limiting the complexity of the machine learning models that can be deployed.

#### Complexity in Managing Edge Nodes

Managing a network of edge nodes can introduce complexity, especially regarding coordination, updates, and maintenance. Ensuring all nodes operate seamlessly and are up-to-date with the latest algorithms and security protocols can be a logistical challenge.

#### Security Concerns at the Edge Nodes

While Edge ML offers enhanced data privacy, edge nodes can sometimes be more vulnerable to physical and cyber-attacks. Developing robust security protocols that protect data at each node without compromising the system's efficiency remains a significant challenge in deploying Edge ML solutions.

### Example Use Cases

Edge ML has many applications, from autonomous vehicles and smart homes to industrial Internet of Things (IoT). These examples were chosen to highlight scenarios where real-time data processing, reduced latency, and enhanced privacy are not just beneficial but often critical to the operation and success of these technologies. They demonstrate the role that Edge ML can play in driving advancements in various sectors, fostering innovation, and paving the way for more intelligent, responsive, and adaptive systems.

#### Autonomous Vehicles

Autonomous vehicles stand as a prime example of Edge ML's potential. These vehicles rely heavily on real-time data processing to navigate and make decisions. Localized machine learning models assist in quickly analyzing data from various sensors to make immediate driving decisions, ensuring safety and smooth operation.

#### Smart Homes and Buildings

Edge ML plays a crucial role in efficiently managing various systems in smart homes and buildings, from lighting and heating to security. By processing data locally, these systems can operate more responsively and harmoniously with the occupants' habits and preferences, creating a more comfortable living environment.

#### Industrial IoT

The Industrial IoT leverages Edge ML to monitor and control complex industrial processes. Here, machine learning models can analyze data from numerous sensors in real-time, enabling predictive maintenance, optimizing operations, and enhancing safety measures. This revolution in industrial automation and efficiency is transforming manufacturing and production across various sectors.

The applicability of Edge ML is vast and not limited to these examples. Various other sectors, including healthcare, agriculture, and urban planning, are exploring and integrating Edge ML to develop innovative solutions responsive to real-world needs and challenges, heralding a new era of smart, interconnected systems.

## Mobile ML

Machine learning is increasingly being integrated into portable devices like smartphones and tablets, empowering users with real-time, personalized capabilities. Mobile Machine Learning (Mobile ML) supports applications like voice recognition, computational photography, and health monitoring, all while maintaining data privacy through on-device computation. These battery-powered devices are optimized for responsiveness and can operate offline, making them indispensable in everyday consumer technologies.

::: {.callout-note}
### Definition of Mobile ML

**Mobile Machine Learning (Mobile ML)** enables machine learning models to run directly on *portable, battery-powered devices* like smartphones and tablets. Operating within the *single-digit to tens of watts* range, Mobile ML leverages *on-device computation* to provide *personalized and responsive applications*. This paradigm preserves *privacy* and ensures *offline functionality*, though it must balance *performance* with *battery and storage limitations*.
:::

### Characteristics

#### On-Device Processing

Mobile ML utilizes the processing power of mobile devices' System-on-Chip (SoC) architectures, including specialized Neural Processing Units (NPUs) and AI accelerators. This enables efficient execution of ML models directly on the device, allowing for real-time processing of data from device sensors like cameras, microphones, and motion sensors without constant cloud connectivity.

#### Optimized Frameworks

Mobile ML is supported by specialized frameworks and tools designed specifically for mobile deployment, such as TensorFlow Lite for Android devices and Core ML for iOS devices. These frameworks are optimized for mobile hardware and provide efficient model compression and quantization techniques to ensure smooth performance within mobile resource constraints.

### Benefits

#### Real-Time Processing

Mobile ML enables real-time processing of data directly on mobile devices, eliminating the need for constant server communication. This results in faster response times for applications requiring immediate feedback, such as real-time translation, face detection, or gesture recognition.

#### Privacy Preservation

By processing data locally on the device, Mobile ML helps maintain user privacy. Sensitive information doesn't need to leave the device, reducing the risk of data breaches and addressing privacy concerns, particularly important for applications handling personal data.

#### Offline Functionality

Mobile ML applications can function without constant internet connectivity, making them reliable in areas with poor network coverage or when users are offline. This ensures consistent performance and user experience regardless of network conditions.

### Challenges

#### Resource Constraints

Despite modern mobile devices being powerful, they still face resource constraints compared to cloud servers. Mobile ML must operate within limited RAM, storage, and processing power, requiring careful optimization of models and efficient resource management.

#### Battery Life Impact

ML operations can be computationally intensive, potentially impacting device battery life. Developers must balance model complexity and performance with power consumption to ensure reasonable battery life for users.

#### Model Size Limitations

Mobile devices have limited storage space, necessitating careful consideration of model size. This often requires model compression and quantization techniques, which can affect model accuracy and performance.

### Example Use Cases

#### Computer Vision Applications

Mobile ML has revolutionized how we use cameras on mobile devices, enabling sophisticated computer vision applications that process visual data in real-time. Modern smartphone cameras now incorporate ML models that can detect faces, analyze scenes, and apply complex filters instantaneously. These models work directly on the camera feed to enable features like portrait mode photography, where ML algorithms separate foreground subjects from backgrounds. Document scanning applications use ML to detect paper edges, correct perspective, and enhance text readability, while augmented reality applications use ML-powered object detection to accurately place virtual objects in the real world.

#### Natural Language Processing

Natural language processing on mobile devices has transformed how we interact with our phones and communicate with others. Speech recognition models run directly on device, enabling voice assistants to respond quickly to commands even without internet connectivity. Real-time translation applications can now translate conversations and text without sending data to the cloud, preserving privacy and working reliably regardless of network conditions. Mobile keyboards have become increasingly intelligent, using ML to predict not just the next word but entire phrases based on the user's writing style and context, while maintaining all learning and personalization locally on the device.

#### Health and Fitness Monitoring

Mobile ML has enabled smartphones and tablets to become sophisticated health monitoring devices. Through clever use of existing sensors combined with ML models, mobile devices can now track physical activity, analyze sleep patterns, and monitor vital signs. For example, cameras can measure heart rate by detecting subtle color changes in the user's skin, while accelerometers and ML models work together to recognize specific exercises and analyze workout form. These applications process sensitive health data directly on the device, ensuring privacy while providing users with real-time feedback and personalized health insights.

#### Personalization and User Experience

Perhaps the most pervasive but least visible application of Mobile ML lies in how it personalizes and enhances the overall user experience. ML models continuously analyze how users interact with their devices to optimize everything from battery usage to interface layouts. These models learn individual usage patterns to predict which apps users are likely to open next, preload content they might want to see, and adjust system settings like screen brightness and audio levels based on environmental conditions and user preferences. This creates a deeply personalized experience that adapts to each user's needs while maintaining privacy by keeping all learning and adaptation on the device itself.

These applications demonstrate how Mobile ML bridges the gap between cloud-based solutions and edge computing, providing efficient, privacy-conscious, and user-friendly machine learning capabilities on personal mobile devices. The continuous advancement in mobile hardware capabilities and optimization techniques continues to expand the possibilities for Mobile ML applications.

## Tiny ML

Tiny Machine Learning (Tiny ML) brings intelligence to the smallest devices, from microcontrollers to embedded sensors, enabling real-time computation in resource-constrained environments. These systems power applications such as predictive maintenance, environmental monitoring, and simple gesture recognition. Tiny ML devices are optimized for energy efficiency, often running for months or years on limited power sources, such as coin-cell batteries, while delivering actionable insights in remote or disconnected environments.

::: {.callout-note}
### Definition of Tiny ML

**Tiny Machine Learning (Tiny ML)** refers to the execution of machine learning models on *ultra-constrained devices*, such as microcontrollers and sensors. These devices operate in the *milliwatt to sub-watt* power range, prioritizing *energy efficiency* and *compactness*. Tiny ML enables *localized decision-making* in resource-constrained environments, excelling in applications where *extended operation on limited power sources* is required. However, it is limited by *severely restricted computational resources*.
:::

@fig-tiny-ml encapsulates the key aspects of Tiny ML discussed in this section. 

![Section overview for Tiny ML.](images/png/tinyml.png){#fig-tiny-ml}

### Characteristics

#### On-Device Machine Learning

In Tiny ML, the focus, much like in Mobile ML, is on on-device machine learning. This means that machine learning models are deployed and trained on the device, eliminating the need for external servers or cloud infrastructures. This allows Tiny ML to enable intelligent decision-making right where the data is generated, making real-time insights and actions possible, even in settings where connectivity is limited or unavailable.

#### Low Power and Resource-Constrained Environments

Tiny ML excels in low-power and resource-constrained settings. These environments require highly optimized solutions that function within the available resources. @fig-TinyML-example showcases an example Tiny ML device kit, illustrating the compact nature of these systems. These devices can typically fit in the palm of your hand or, in some cases, are even as small as a fingernail. Tiny ML meets the need for efficiency through specialized algorithms and models designed to deliver decent performance while consuming minimal energy, thus ensuring extended operational periods, even in battery-powered devices like those shown.

![Examples of Tiny ML device kits. Source: [Widening Access to Applied Machine Learning with Tiny ML.](https://arxiv.org/pdf/2106.04008.pdf)](images/jpg/tiny_ml.jpg){#fig-TinyML-example}

::: {#exr-TinyML .callout-caution collapse="true"}

### Tiny ML with Arduino

Get ready to bring machine learning to the smallest of devices! In the embedded machine learning world, Tiny ML is where resource constraints meet ingenuity. This Colab notebook will walk you through building a gesture recognition model designed on an Arduino board. You'll learn how to train a small but effective neural network, optimize it for minimal memory usage, and deploy it to your microcontroller. If you're excited about making everyday objects smarter, this is where it begins!

[![](https://colab.research.google.com/assets/colab-badge.png)](https://colab.research.google.com/github/arduino/ArduinoTensorFlowLiteTutorials/blob/master/GestureToEmoji/arduino_TinyML_workshop.ipynb)
:::

### Benefits

#### Extremely Low Latency

One of the standout benefits of Tiny ML is its ability to offer ultra-low latency. Since computation occurs directly on the device, the time required to send data to external servers and receive a response is eliminated. This is crucial in applications requiring immediate decision-making, enabling quick responses to changing conditions.

#### High Data Security

Tiny ML inherently enhances data security. Because data processing and analysis happen on the device, the risk of data interception during transmission is virtually eliminated. This localized approach to data management ensures that sensitive information stays on the device, strengthening user data security.

#### Energy Efficiency

Tiny ML operates within an energy-efficient framework, a necessity given its resource-constrained environments. By employing lean algorithms and optimized computational methods, Tiny ML ensures that devices can execute complex tasks without rapidly depleting battery life, making it a sustainable option for long-term deployments.

### Challenges

#### Limited Computational Capabilities

However, the shift to Tiny ML comes with its set of hurdles. The primary limitation is the devices' constrained computational capabilities. The need to operate within such limits means that deployed models must be simplified, which could affect the accuracy and sophistication of the solutions.

#### Complex Development Cycle

Tiny ML also introduces a complicated development cycle. Crafting lightweight and effective models demands a deep understanding of machine learning principles and expertise in embedded systems. This complexity calls for a collaborative development approach, where multi-domain expertise is essential for success.

#### Model Optimization and Compression

A central challenge in Tiny ML is model optimization and compression. Creating machine learning models that can operate effectively within the limited memory and computational power of microcontrollers requires innovative approaches to model design. Developers often face the challenge of striking a delicate balance and optimizing models to maintain effectiveness while fitting within stringent resource constraints.

### Example Use Cases

#### Wearable Devices

In wearables, Tiny ML opens the door to smarter, more responsive gadgets. From fitness trackers offering real-time workout feedback to smart glasses processing visual data on the fly, Tiny ML transforms how we engage with wearable tech, delivering personalized experiences directly from the device.

#### Predictive Maintenance

In industrial settings, Tiny ML plays a significant role in predictive maintenance. By deploying Tiny ML algorithms on sensors that monitor equipment health, companies can preemptively identify potential issues, reducing downtime and preventing costly breakdowns. On-site data analysis ensures quick responses, potentially stopping minor issues from becoming major problems.

#### Anomaly Detection

Tiny ML can be employed to create anomaly detection models that identify unusual data patterns. For instance, a smart factory could use Tiny ML to monitor industrial processes and spot anomalies, helping prevent accidents and improve product quality. Similarly, a security company could use Tiny ML to monitor network traffic for unusual patterns, aiding in detecting and preventing cyber-attacks. Tiny ML could monitor patient data for anomalies in healthcare, aiding early disease detection and better patient treatment.

#### Environmental Monitoring

In environmental monitoring, Tiny ML enables real-time data analysis from various field-deployed sensors. These could range from city air quality monitoring to wildlife tracking in protected areas. Through Tiny ML, data can be processed locally, allowing for quick responses to changing conditions and providing a nuanced understanding of environmental patterns, crucial for informed decision-making.

In summary, Tiny ML serves as a trailblazer in the evolution of machine learning, fostering innovation across various fields by bringing intelligence directly to the edge. Its potential to transform our interaction with technology and the world is immense, promising a future where devices are connected, intelligent, and capable of making real-time decisions and responses.

## Hybrid ML

The increasingly complex demands of modern applications often require a blend of machine learning approaches. Hybrid Machine Learning (Hybrid ML) combines the computational power of the cloud, the efficiency of edge and mobile devices, and the compact capabilities of Tiny ML. This approach enables architects to create systems that balance performance, privacy, and resource efficiency, addressing real-world challenges with innovative, distributed solutions.

::: {.callout-note}
### Definition of Hybrid ML

**Hybrid Machine Learning (Hybrid ML)** refers to the integration of multiple ML paradigms—such as Cloud, Edge, Mobile, and Tiny ML—to form a unified, distributed system. These systems leverage the *complementary strengths* of each paradigm while addressing their *individual limitations*. Hybrid ML supports *scalability, adaptability,* and *privacy-preserving capabilities,* enabling sophisticated ML applications for diverse scenarios. By combining centralized and decentralized computing, Hybrid ML facilitates efficient resource utilization while meeting the demands of complex real-world requirements.
:::

### Design Patterns

Design patterns in Hybrid ML represent reusable solutions to common challenges faced when integrating multiple ML paradigms (cloud, edge, mobile, and tiny). These patterns guide system architects in combining the strengths of different approaches—such as the computational power of the cloud and the efficiency of edge devices—while mitigating their individual limitations. By following these patterns, architects can address key trade-offs in performance, latency, privacy, and resource efficiency.

Hybrid ML design patterns serve as blueprints, enabling the creation of scalable, efficient, and adaptive systems tailored to diverse real-world applications. Each pattern reflects a specific strategy for organizing and deploying ML workloads across different tiers of a distributed system, ensuring optimal use of available resources while meeting application-specific requirements.

#### Train-Serve Split

One of the most common hybrid patterns is the train-serve split, where model training occurs in the cloud but inference happens on edge, mobile, or tiny devices. This pattern takes advantage of the cloud's vast computational resources for the training phase while benefiting from the low latency and privacy advantages of on-device inference. For example, smart home devices often use models trained on large datasets in the cloud but run inference locally to ensure quick response times and protect user privacy. In practice, this might involve training models on powerful systems like the NVIDIA DGX A100, leveraging its 8 A100 GPUs and terabyte-scale memory, before deploying optimized versions to edge devices like the NVIDIA Jetson AGX Orin for efficient inference. Similarly, mobile vision models for computational photography are typically trained on powerful cloud infrastructure but deployed to run efficiently on phone hardware.

#### Hierarchical Processing

Hierarchical processing creates a multi-tier system where data and intelligence flow between different levels of the ML stack. In industrial IoT applications, tiny sensors might perform basic anomaly detection, edge devices aggregate and analyze data from multiple sensors, and cloud systems handle complex analytics and model updates. For instance, we might see ESP32-CAM devices performing basic image classification at the sensor level with their minimal 520KB RAM, feeding data up to Jetson AGX Orin devices for more sophisticated computer vision tasks, and ultimately connecting to cloud infrastructure for complex analytics and model updates.

This hierarchy allows each tier to handle tasks appropriate to its capabilities---Tiny ML devices handle immediate, simple decisions; edge devices manage local coordination; and cloud systems tackle complex analytics and learning tasks. Smart city installations often use this pattern, with street-level sensors feeding data to neighborhood-level edge processors, which in turn connect to city-wide cloud analytics.

#### Progressive Deployment

Progressive deployment strategies adapt models for different computational tiers, creating a cascade of increasingly lightweight versions. A model might start as a large, complex version in the cloud, then be progressively compressed and optimized for edge servers, mobile devices, and finally tiny sensors. Voice assistant systems often employ this pattern---full natural language processing runs in the cloud, while simplified wake-word detection runs on-device. This allows the system to balance capability and resource constraints across the ML stack.

#### Federated Learning

Federated learning represents a sophisticated hybrid approach where model training is distributed across many edge or mobile devices while maintaining privacy. Devices learn from local data and share model updates, rather than raw data, with cloud servers that aggregate these updates into an improved global model. This pattern is particularly powerful for applications like keyboard prediction on mobile devices or healthcare analytics, where privacy is paramount but benefits from collective learning are valuable. The cloud coordinates the learning process without directly accessing sensitive data, while devices benefit from the collective intelligence of the network.

#### Collaborative Learning

Collaborative learning enables peer-to-peer learning between devices at the same tier, often complementing hierarchical structures. Autonomous vehicle fleets, for example, might share learning about road conditions or traffic patterns directly between vehicles while also communicating with cloud infrastructure. This horizontal collaboration allows systems to share time-sensitive information and learn from each other's experiences without always routing through central servers.

### Real-world Integration

Design patterns establish a foundation for organizing and optimizing ML workloads across distributed systems. However, the practical application of these patterns often requires combining multiple paradigms into integrated workflows. Thus, in practice, ML systems rarely operate in isolation. Instead, they form interconnected networks where each paradigm—Cloud, Edge, Mobile, and Tiny ML—plays a specific role while communicating with other parts of the system. These interconnected networks follow integration patterns that assign specific roles to Cloud, Edge, Mobile, and Tiny ML systems based on their unique strengths and limitations. Recall that cloud systems excel at training and analytics but require significant infrastructure. Edge systems provide local processing power and reduced latency. Mobile devices offer personal computing capabilities and user interaction. Tiny ML enables intelligence in the smallest devices and sensors.

![Example interaction patterns between ML paradigms, showing data flows, model deployment, and processing relationships across Cloud, Edge, Mobile, and Tiny ML systems.](./images/png/hybrid.png){#fig-hybrid}

@fig-hybrid illustrates these key interactions through specific connection types: "Deploy" paths show how models flow from cloud training to various devices, "Data" and "Results" show information flow from sensors through processing stages, "Analyze" shows how processed information reaches cloud analytics, and "Sync" demonstrates device coordination. Notice how data generally flows upward from sensors through processing layers to cloud analytics, while model deployments flow downward from cloud training to various inference points. The interactions aren't strictly hierarchical---mobile devices might communicate directly with both cloud services and tiny sensors, while edge systems can assist mobile devices with complex processing tasks.

To understand how these labeled interactions manifest in real applications, let's explore several common scenarios using @fig-hybrid:

- **Model Deployment Scenario:** A company develops a computer vision model for defect detection. Following the "Deploy" paths shown in @fig-hybrid, the cloud-trained model is distributed to edge servers in factories, quality control tablets on the production floor, and tiny cameras embedded in the production line. This showcases how a single ML solution can be distributed across different computational tiers for optimal performance.

- **Data Flow and Analysis Scenario:** In a smart agriculture system, soil sensors (Tiny ML) collect moisture and nutrient data, following the "Data" path to Tiny ML inference. The "Results" flow to edge processors in local stations, which process this information and use the "Analyze" path to send insights to the cloud for farm-wide analytics, while also sharing results with farmers' mobile apps. This demonstrates the hierarchical flow shown in @fig-hybrid from sensors through processing to cloud analytics.

- **Edge-Mobile Assistance Scenario:** When a mobile app needs to perform complex image processing that exceeds the phone's capabilities, it utilizes the "Assist" connection shown in @fig-hybrid. The edge system helps process the heavier computational tasks, sending back results to enhance the mobile app's performance. This shows how different ML tiers can cooperate to handle demanding tasks.

- **Tiny ML-Mobile Integration Scenario:** A fitness tracker uses Tiny ML to continuously monitor activity patterns and vital signs. Using the "Sync" pathway shown in @fig-hybrid, it synchronizes this processed data with the user's smartphone, which combines it with other health data before sending consolidated updates via the "Analyze" path to the cloud for long-term health analysis. This illustrates the common pattern of tiny devices using mobile devices as gateways to larger networks.

- **Multi-Layer Processing Scenario:** In a smart retail environment, tiny sensors monitor inventory levels, using "Data" and "Results" paths to send inference results to both edge systems for immediate stock management and mobile devices for staff notifications. Following the "Analyze" path, the edge systems process this data alongside other store metrics, while the cloud analyzes trends across all store locations. This demonstrates how the interactions shown in @fig-hybrid enable ML tiers to work together in a complete solution.

These real-world patterns demonstrate how different ML paradigms naturally complement each other in practice. While each approach has its own strengths, their true power emerges when they work together as an integrated system. By understanding these patterns, system architects can better design solutions that effectively leverage the capabilities of each ML tier while managing their respective constraints.

## Shared Principles

The design and integration patterns illustrate how ML paradigms---Cloud, Edge, Mobile, and Tiny--interact to address real-world challenges. While each paradigm is tailored to specific roles, their interactions reveal recurring principles that guide effective system design. These shared principles provide a unifying framework for understanding both individual ML paradigms and their hybrid combinations. As we explore these principles, a deeper system design perspective emerges, showing how different ML implementations—optimized for distinct contexts—converge around core concepts. This convergence forms the foundation for systematically understanding ML systems, despite their diversity and breadth.

@fig-ml-systems-convergence illustrates this convergence, highlighting the relationships that underpin practical system design and implementation. Grasping these principles is invaluable not only for working with individual ML systems but also for developing hybrid solutions that leverage their strengths, mitigate their limitations, and create cohesive, efficient ML workflows.

![Core principles converge across different ML system implementations, from cloud to tiny deployments, sharing common foundations in data pipelines, resource management, and system architecture.](./images/png/convergence.png){#fig-ml-systems-convergence}

The figure shows three key layers that help us understand how ML systems relate to each other. At the top, we see the diverse implementations that we have explored throughout this chapter. Cloud ML operates in data centers, focusing on training at scale with vast computational resources. Edge ML emphasizes local processing with inference capabilities closer to data sources. Mobile ML leverages personal devices for user-centric applications. Tiny ML brings intelligence to highly constrained embedded systems and sensors.

Despite their distinct characteristics, the arrows in the figure show how all these implementations connect to the same core system principles. This reflects an important reality in ML systems---while they may operate at dramatically different scales, from cloud systems processing petabytes to tiny devices handling kilobytes, they all must solve similar fundamental challenges in terms of:

- Managing data pipelines from collection through processing to deployment
- Balancing resource utilization across compute, memory, energy, and network
- Implementing system architectures that effectively integrate models, hardware, and software

These core principles then lead to shared system considerations around optimization, operations, and trustworthiness. This progression helps explain why techniques developed for one scale of ML system often transfer effectively to others. The underlying problems---efficiently processing data, managing resources, and ensuring reliable operation---remain consistent even as the specific solutions vary based on scale and context.

Understanding this convergence becomes particularly valuable as we move towards hybrid ML systems. When we recognize that different ML implementations share fundamental principles, combining them effectively becomes more intuitive. We can better appreciate why, for example, a cloud-trained model can be effectively deployed to edge devices, or why mobile and tiny ML systems can complement each other in IoT applications.

### Implementations Layer

The top layer of @fig-ml-systems-convergence represents the diverse landscape of ML systems we've explored throughout this chapter. Each implementation addresses specific needs and operational contexts, yet all contribute to the broader ecosystem of ML deployment options.

Cloud ML, centered in data centers, provides the foundation for large-scale training and complex model serving. With access to vast computational resources like the NVIDIA DGX A100 systems we saw in @tbl-representative-systems, cloud implementations excel at handling massive datasets and training sophisticated models. This makes them particularly suited for tasks requiring extensive computational power, such as training foundation models or processing large-scale analytics.

Edge ML shifts the focus to local processing, prioritizing inference capabilities closer to data sources. Using devices like the NVIDIA Jetson AGX Orin, edge implementations balance computational power with reduced latency and improved privacy. This approach proves especially valuable in scenarios requiring quick decisions based on local data, such as industrial automation or real-time video analytics.

Mobile ML leverages the capabilities of personal devices, particularly smartphones and tablets. With specialized hardware like Apple's A17 Pro chip, mobile implementations enable sophisticated ML capabilities while maintaining user privacy and providing offline functionality. This paradigm has revolutionized applications from computational photography to on-device speech recognition.

Tiny ML represents the frontier of embedded ML, bringing intelligence to highly constrained devices. Operating on microcontrollers like the Arduino Nano 33 BLE Sense[^fn-arduino], tiny implementations must carefully balance functionality with severe resource constraints. Despite these limitations, Tiny ML enables ML capabilities in scenarios where power efficiency and size constraints are paramount.

[^fn-arduino]: The Arduino Nano 33 BLE Sense, introduced in 2019, is a microcontroller specifically designed for Tiny ML applications, featuring sensors and Bluetooth connectivity to facilitate on-device intelligence.  

### System Principles Layer

The middle layer reveals the fundamental principles that unite all ML systems, regardless of their implementation scale. These core principles remain consistent even as their specific manifestations vary dramatically across different deployments.

Data Pipeline principles govern how systems handle information flow, from initial collection through processing to final deployment. In cloud systems, this might mean processing petabytes of data through distributed pipelines. For tiny systems, it could involve carefully managing sensor data streams within limited memory. Despite these scale differences, all systems must address the same fundamental challenges of data ingestion, transformation, and utilization.

Resource Management emerges as a universal challenge across all implementations. Whether managing thousands of GPUs in a data center or optimizing battery life on a microcontroller, all systems must balance competing demands for computation, memory, energy, and network resources. The quantities involved may differ by orders of magnitude, but the core principles of resource allocation and optimization remain remarkably consistent.

System Architecture principles guide how ML systems integrate models, hardware, and software components. Cloud architectures might focus on distributed computing and scalability, while tiny systems emphasize efficient memory mapping and interrupt handling. Yet all must solve fundamental problems of component integration, data flow optimization, and processing coordination.

### System Considerations Layer

The bottom layer of @fig-ml-systems-convergence illustrates how fundamental principles manifest in practical system-wide considerations. These considerations span all ML implementations, though their specific challenges and solutions vary based on scale and context.

Optimization and Efficiency shape how ML systems balance performance with resource utilization. In cloud environments, this often means optimizing model training across GPU clusters while managing energy consumption in data centers. Edge systems focus on reducing model size and accelerating inference without compromising accuracy. Mobile implementations must balance model performance with battery life and thermal constraints. Tiny ML pushes optimization to its limits, requiring extensive model compression and quantization to fit within severely constrained environments. Despite these different emphases, all implementations grapple with the core challenge of maximizing performance within their available resources.

Operational Aspects affect how ML systems are deployed, monitored, and maintained in production environments. Cloud systems must handle continuous deployment across distributed infrastructure while monitoring model performance at scale. Edge implementations need robust update mechanisms and health monitoring across potentially thousands of devices. Mobile systems require seamless app updates and performance monitoring without disrupting user experience. Tiny ML faces unique challenges in deploying updates to embedded devices while ensuring continuous operation. Across all scales, the fundamental problems of deployment, monitoring, and maintenance remain consistent, even as solutions vary.

Trustworthy AI considerations ensure ML systems operate reliably, securely, and with appropriate privacy protections. Cloud implementations must secure massive amounts of data while ensuring model predictions remain reliable at scale. Edge systems need to protect local data processing while maintaining model accuracy in diverse environments. Mobile ML must preserve user privacy while delivering consistent performance. Tiny ML systems, despite their size, must still ensure secure operation and reliable inference. These trustworthiness considerations cut across all implementations, reflecting the critical importance of building ML systems that users can depend on.

The progression through these layers---from diverse implementations through core principles to shared considerations---reveals why ML systems can be studied as a unified field despite their apparent differences. While specific solutions may vary dramatically based on scale and context, the fundamental challenges remain remarkably consistent. This understanding becomes particularly valuable as we move toward increasingly sophisticated hybrid systems that combine multiple implementation approaches.

The convergence of fundamental principles across ML implementations helps explain why hybrid approaches work so effectively in practice. As we saw in our discussion of hybrid ML, different implementations naturally complement each other precisely because they share these core foundations. Whether we're looking at train-serve splits that leverage cloud resources for training and edge devices for inference, or hierarchical processing that combines Tiny ML sensors with edge aggregation and cloud analytics, the shared principles enable seamless integration across scales.

### From Principles to Practice

This convergence also suggests why techniques and insights often transfer well between different scales of ML systems. A deep understanding of data pipelines in cloud environments can inform how we structure data flow in embedded systems. Resource management strategies developed for mobile devices might inspire new approaches to cloud optimization. System architecture patterns that prove effective at one scale often adapt surprisingly well to others.

Understanding these fundamental principles and shared considerations provides a foundation for comparing different ML implementations more effectively. While each approach has its distinct characteristics and optimal use cases, they all build upon the same core elements. As we move into our detailed comparison in the next section, keeping these shared foundations in mind will help us better appreciate both the differences and similarities between various ML system implementations.


## ML System Comparison

Building on the shared principles explored earlier, we can synthesize our understanding by examining how the various ML system approaches compare across different dimensions. This synthesis highlights the trade-offs system designers often face when choosing deployment options and how these decisions align with core principles like resource management, data pipelines, and system architecture.

The relationship between computational resources and deployment location forms one of the most fundamental comparisons across ML systems. As we move from cloud deployments to tiny devices, we observe a dramatic reduction in available computing power, storage, and energy consumption. Cloud ML systems, with their data center infrastructure, can leverage virtually unlimited resources, processing data at the scale of petabytes and training models with billions of parameters. Edge ML systems, while more constrained, still offer significant computational capability through specialized hardware like edge GPUs and neural processing units. Mobile ML represents a middle ground, balancing computational power with energy efficiency on devices like smartphones and tablets. At the far end of the spectrum, TinyML operates under severe resource constraints, often limited to kilobytes of memory and milliwatts of power consumption.

The operational characteristics of these systems reveal another important dimension of comparison. @tbl-big_vs_tiny provides a comprehensive view of how these systems differ across various operational aspects. Latency, for instance, shows a clear pattern: cloud systems typically incur delays of 100-1000ms due to network communication, while edge systems reduce this to 10-100ms by processing data locally. Mobile ML achieves even lower latencies of 5-50ms for many tasks, and TinyML systems can respond in 1-10ms for simple inferences. This latency gradient illustrates how moving computation closer to the data source can improve real-time processing capabilities.

+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Aspect                   | Cloud ML                                                 | Edge ML                                                  | Mobile ML                                                 | Tiny ML                                                   |
+:=========================+:=========================================================+:=========================================================+:==========================================================+:=========================================================+
| Processing Location      | Centralized cloud servers (Data Centers)                 | Local edge devices (gateways, servers)                   | Smartphones and tablets                                   | Ultra-low-power microcontrollers and embedded systems    |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Latency                  | High (100ms-1000ms+)                                     | Moderate (10-100ms)                                      | Low-Moderate (5-50ms)                                     | Very Low (1-10ms)                                        |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Data Privacy             | Basic-Moderate (Data leaves device)                      | High (Data stays in local network)                       | High (Data stays on phone)                                | Very High (Data never leaves sensor)                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Compute Power            | Very High (Multiple GPUs/TPUs)                           | High (Edge GPUs)                                         | Moderate (Mobile NPUs/GPUs)                               | Very Low (MCU/tiny processors)                           |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Energy Consumption       | Very High (kW-MW range)                                  | High (100s W)                                            | Moderate (1-10W)                                          | Very Low (mW range)                                      |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Scalability              | Excellent (virtually unlimited)                          | Good (limited by edge hardware)                          | Moderate (per-device scaling)                             | Limited (fixed hardware)                                 |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Cost                     | High ($1000s+/month)                                     | Moderate ($100s-1000s)                                   | Low ($0-10s)                                              | Very Low ($1-10s)                                        |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Connectivity Required    | Constant high-bandwidth                                  | Intermittent                                             | Optional                                                  | None                                                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Real-time Processing     | Dependent on network                                     | Good                                                     | Very Good                                                 | Excellent                                                |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Storage Capacity         | Unlimited (petabytes+)                                   | Large (terabytes)                                        | Moderate (gigabytes)                                      | Very Limited (kilobytes-megabytes)                       |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Primary Use Cases        | Big Data Analytics, Training, Complex AI Models          | Smart Manufacturing, Video Analytics, IoT Hubs           | AR/VR Apps, Mobile Gaming, Photo/Video Processing         | Sensor Processing, Gesture Detection, Keyword Spotting   |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Development Complexity   | High (cloud expertise needed)                            | Moderate-High (edge+networking)                          | Moderate (mobile SDKs)                                    | High (embedded expertise)                                |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Deployment Speed         | Fast                                                     | Moderate                                                 | Fast                                                      | Slow                                                     |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Hardware Requirements    | Cloud infrastructure                                     | Edge servers/gateways                                    | Modern smartphones                                        | MCUs/embedded systems                                    |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Framework Support        | All ML frameworks                                        | Most frameworks                                          | Mobile-optimized (TFLite, CoreML)                         | Tiny ML frameworks                                        |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Model Size Limits        | None                                                     | Several GB                                               | 10s-100s MB                                               | Bytes-KB range                                           |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Battery Impact           | N/A                                                      | N/A                                                      | Moderate                                                  | Minimal                                                  |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+
| Offline Capability       | None                                                     | Good                                                     | Excellent                                                 | Complete                                                 |
+--------------------------+----------------------------------------------------------+----------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------------+

: Comparison of feature aspects across Cloud ML, Edge ML, and Tiny ML. {#tbl-big_vs_tiny .hover .striped}

Privacy and data handling represent another crucial axis of comparison. Cloud ML requires data to leave the device, potentially raising privacy concerns despite robust security measures. Edge ML improves privacy by keeping data within local networks, while Mobile ML further enhances this by processing sensitive information directly on personal devices. TinyML offers the strongest privacy guarantees, as data never leaves the sensor or microcontroller where it's collected.

Development complexity and deployment considerations also vary significantly across these paradigms. Cloud ML benefits from mature development tools and frameworks but requires expertise in cloud infrastructure. Edge ML demands knowledge of both ML and networking protocols, while Mobile ML developers must understand mobile-specific optimizations and platform constraints. TinyML development, though targeting simpler devices, often requires specialized knowledge of embedded systems and careful optimization to work within severe resource constraints.

Cost structures differ markedly as well. Cloud ML typically involves ongoing operational costs for computation and storage, often running into thousands of dollars monthly for large-scale deployments. Edge ML requires significant upfront investment in edge devices but may reduce ongoing costs. Mobile ML leverages existing consumer devices, minimizing additional hardware costs, while TinyML solutions can be deployed for just a few dollars per device, though development costs may be higher.

These comparisons reveal that each paradigm has distinct advantages and limitations. Cloud ML excels at complex, data-intensive tasks but requires constant connectivity. Edge ML offers a balance of computational power and local processing. Mobile ML provides personalized intelligence on ubiquitous devices. TinyML enables ML in previously inaccessible contexts but requires careful optimization. Understanding these trade-offs is crucial for selecting the appropriate deployment strategy for specific applications and constraints.

## ML Deployment Decision Framework

We have examined the diverse paradigms of machine learning systems—Cloud ML, Edge ML, Mobile ML, and Tiny ML—each with its own characteristics, trade-offs, and use cases. Selecting an optimal deployment strategy requires careful consideration of multiple factors.

To facilitate this decision-making process, we present a structured framework in @fig-mlsys-playbook-flowchart. This framework distills the chapter's key insights into a systematic approach for determining the most suitable deployment paradigm based on specific requirements and constraints.

![A decision flowchart for selecting the most suitable ML deployment paradigm.](images/png/mlsys_playbook.png){#fig-mlsys-playbook-flowchart}

The framework is organized into five fundamental layers of consideration:

- **Privacy**: Determines whether processing can occur in the cloud or must remain local to safeguard sensitive data.
- **Latency**: Evaluates the required decision-making speed, particularly for real-time or near-real-time processing needs.
- **Reliability**: Assesses network stability and its impact on deployment feasibility.
- **Compute Needs**: Identifies whether high-performance infrastructure is required or if lightweight processing suffices.
- **Cost and Energy Efficiency**: Balances resource availability with financial and energy constraints, particularly crucial for low-power or budget-sensitive applications.

As designers progress through these layers, each decision point narrows the viable options, ultimately guiding them toward one of the four deployment paradigms. This systematic approach proves valuable across various scenarios. For instance, privacy-sensitive healthcare applications might prioritize local processing over cloud solutions, while high-performance recommendation engines typically favor cloud infrastructure. Similarly, applications requiring real-time responses often gravitate toward edge or mobile-based deployment.

While not exhaustive, this framework provides a practical roadmap for navigating deployment decisions. By following this structured approach, system designers can evaluate trade-offs and align their deployment choices with technical, financial, and operational priorities, even as they address the unique challenges of each application.

## Conclusion

This chapter has explored the diverse landscape of machine learning systems, highlighting their unique characteristics, benefits, challenges, and applications. Cloud ML leverages immense computational resources, excelling in large-scale data processing and model training but facing limitations such as latency and privacy concerns. Edge ML bridges this gap by enabling localized processing, reducing latency, and enhancing privacy. Mobile ML builds on these strengths, harnessing the ubiquity of smartphones to provide responsive, user-centric applications. At the smallest scale, Tiny ML extends the reach of machine learning to resource-constrained devices, opening new domains of application.

Together, these paradigms reflect an ongoing progression in machine learning, moving from centralized systems in the cloud to increasingly distributed and specialized deployments across edge, mobile, and tiny devices. This evolution marks a shift toward systems that are finely tuned to specific deployment contexts, balancing computational power, energy efficiency, and real-time responsiveness. As these paradigms mature, hybrid approaches are emerging, blending their strengths to unlock new possibilities—from cloud-based training paired with edge inference to federated learning and hierarchical processing.

Despite their variety, ML systems can be distilled into a core set of unifying principles that span resource management, data pipelines, and system architecture. These principles provide a structured framework for understanding and designing ML systems at any scale. By focusing on these shared fundamentals and mastering their design and optimization, we can navigate the complexity of the ML landscape with clarity and confidence. As we continue to advance, these principles will act as a compass, guiding our exploration and innovation within the ever-evolving field of machine learning systems. Regardless of how diverse or complex these systems become, a strong grasp of these foundational concepts will remain essential to unlocking their full potential.

## Resources {#sec-ml-systems-resource}

Here is a curated list of resources to support students and instructors in their learning and teaching journeys. We are continuously working on expanding this collection and will be adding new exercises soon.

::: {.callout-note collapse="false"}

#### Slides

These slides are a valuable tool for instructors to deliver lectures and for students to review the material at their own pace. We encourage students and instructors to leverage these slides to improve their understanding and facilitate effective knowledge transfer.

- [Embedded Systems Overview.](https://docs.google.com/presentation/d/1Lgrn7bddHYxyrOmk0JfSVmEBimRePqI7WSliUKRPK9E/edit?resourcekey=0-c5JvfDeqHIdV9A5RMAMAyw#slide=id.g94db9f9f78_0_8)

- [Embedded Computer Hardware.](https://docs.google.com/presentation/d/1hDCFcOrZ08kZPhY4DA3gVikGUo47HwNyvqNrLW-t-Tg/edit?resourcekey=0-J6ix5AYvZMGbFFOa7ae4Hw#slide=id.g94db9f9f78_0_8)

- [Embedded I/O.](https://docs.google.com/presentation/d/1rnWh9XC6iCKSx_hQd4xq2iIDlpc-GkBQw_GjzlP5mQc/edit#slide=id.g94db9f9f78_0_8)

- [Embedded systems software.](https://docs.google.com/presentation/d/1TApZn9xxPWCRY-D-soJ8YOSsfysnccR5UjOyspzeTuU/edit?resourcekey=0-BRWIyCKPLNQFnIfG0fJJ9A#slide=id.g94db9f9f78_0_8)

- [Embedded ML software.](https://docs.google.com/presentation/d/17wgAfoF24Rcx7uPrbau0c8FyzXIUWbe48qGGBOXXT-g/edit?resourcekey=0-Uv29DvmF7gYzKdOoRtn0vw#slide=id.g94db9f9f78_0_8)

- [Embedded Inference.](https://docs.google.com/presentation/d/1FOUQ9dbe3l_qTa2AnroSbOz0ykuCz5cbTNO77tvFxEs/edit?usp=drive_link)

- [Tiny ML on Microcontrollers.](https://docs.google.com/presentation/d/1jwAZz3UOoJTR8PY6Wa34FxijpoDc9gBM/edit?usp=drive_link&ouid=102419556060649178683&rtpof=true&sd=true)

- Tiny ML as a Service (Tiny MLaaS):

 ---[Tiny MLaaS: Introduction.](https://docs.google.com/presentation/d/1O7bxb36SnexfDI3iE_p0C8JI_VYXAL8cyAx3JKDfeUo/edit?usp=drive_link)

 ---[Tiny MLaaS: Design Overview.](https://docs.google.com/presentation/d/1ZUUHtTbKlzeTwVteQMSztscQmdmMxT1A24pBKSys7g0/edit#slide=id.g94db9f9f78_0_2)
:::

::: {.callout-important collapse="false"}

#### Videos

- *Coming soon.*
:::

::: {.callout-caution collapse="false"}

#### Exercises

To reinforce the concepts covered in this chapter, we have curated a set of exercises that challenge students to apply their knowledge and deepen their understanding.

- *Coming soon.*
:::
