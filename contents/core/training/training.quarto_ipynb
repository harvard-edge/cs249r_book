{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "bibliography: training.bib\n",
        "quiz: training_quizzes.json\n",
        "---\n",
        "\n",
        "# AI Training\n",
        "\n",
        "::: {layout-narrow}\n",
        "::: {.column-margin}\n",
        "*DALLÂ·E 3 Prompt: An illustration for AI training, depicting a neural network with neurons that are being repaired and firing. The scene includes a vast network of neurons, each glowing and firing to represent activity and learning. Among these neurons, small figures resembling engineers and scientists are actively working, repairing and tweaking the neurons. These miniature workers symbolize the process of training the network, adjusting weights and biases to achieve convergence. The entire scene is a visual metaphor for the intricate and collaborative effort involved in AI training, with the workers representing the continuous optimization and learning within a neural network. The background is a complex array of interconnected neurons, creating a sense of depth and complexity.*\n",
        ":::\n",
        "\n",
        "\\noindent\n",
        "![](images/png/ai_training.png)\n",
        "\n",
        ":::\n",
        "\n",
        "## Purpose {.unnumbered}\n",
        "\n",
        "_How do machine learning training workloads manifest as systems challenges, and what architectural principles guide their efficient implementation?_\n",
        "\n",
        "Machine learning training is a unique class of computational workload that demands careful orchestration of computation, memory, and data movement. The process of transforming training algorithms into efficient system implementations requires understanding how mathematical operations map to hardware resources, how data flows through memory hierarchies, and how system architectures influence training performance. Investigating these system-level considerations helps establish core principles for designing and optimizing training infrastructure. By understanding and addressing these challenges, we can develop more efficient and scalable solutions to meet the demands of modern machine learning workloads.\n",
        "\n",
        "::: {.callout-tip title=\"Learning Objectives\"}\n",
        "\n",
        "* Explain the link between mathematical operations and system trade-offs in AI training.\n",
        "\n",
        "* Identify bottlenecks in training systems and their impact on performance.\n",
        "\n",
        "* Outline the key components of training pipelines and their roles in model training.\n",
        "\n",
        "* Determine appropriate optimization techniques to improve training efficiency.\n",
        "\n",
        "* Analyze training systems beyond a single machine, including distributed approaches.\n",
        "\n",
        "* Evaluate and design training processes with a focus on efficiency and scalability.\n",
        "\n",
        ":::\n",
        "\n",
        "## Overview {#sec-ai-training-overview-8ba1}\n",
        "\n",
        "Machine learning has revolutionized modern computing by enabling systems to learn patterns from data, with training being its cornerstone. This computationally intensive process involves adjusting millions, and even billions, of parameters to minimize errors on training examples while ensuring the model generalizes effectively to unseen data. The success of machine learning models hinges on this training phase.\n",
        "\n",
        "The training process brings together algorithms, data, and computational resources into an integrated workflow. Models, particularly deep neural networks used in domains such as computer vision and natural language processing, require significant computational effort due to their complexity and scale. Even resource-constrained models, such as those used in Mobile ML or Tiny ML applications, require careful tuning to achieve an optimal balance between accuracy, computational efficiency, and generalization.\n",
        "\n",
        "As models have grown in size and complexity[^fn-modelsize], the systems that enable efficient training have become increasingly sophisticated. Training systems must coordinate computation across memory hierarchies, manage data movement, and optimize resource utilization, all while maintaining numerical stability and convergence properties. This intersection of mathematical optimization with systems engineering creates unique challenges in maximizing training throughput.\n",
        "\n",
        "[^fn-modelsize]: Model sizes have grown exponentially since AlexNet (60M parameters) in 2012, with modern large language models like GPT-4 estimated to have over 1 trillion parameters, which represents an increase of over 16,000x in just over a decade.\n",
        "\n",
        "This chapter examines the key components and architecture of machine learning training systems. We discuss the design of training pipelines, memory and computation systems, data management strategies, and advanced optimization techniques. Additionally, we explore distributed training frameworks and their role in scaling training processes. Real-world examples and case studies are provided to connect theoretical principles to practical implementations, offering insight into the development of efficient, scalable, and effective training systems.\n",
        "\n",
        "## Training Systems {#sec-ai-training-training-systems-e99c}\n",
        "\n",
        "Machine learning training systems represent a distinct class of computational workload with unique demands on hardware and software infrastructure. These systems must efficiently orchestrate repeated computations over large datasets while managing substantial memory requirements and data movement patterns. Unlike traditional high-performance computing workloads, training systems exhibit specific characteristics that influence their design and implementation.\n",
        "\n",
        "### System Evolution {#sec-ai-training-system-evolution-8a46}\n",
        "\n",
        "Computing system architectures have evolved through distinct generations, with each new era building upon previous advances while introducing specialized optimizations for emerging application requirements (@fig-evolution-systems). This progression demonstrates how hardware adaptation to application needs shapes modern machine learning systems.\n",
        "\n",
        "::: {#fig-evolution-systems fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\sf,node distance=0pt,xscale=2]\n",
        "\\tikzset{\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    draw=black!80, line width=0.75pt,\n",
        "    fill=black!10,\n",
        "    anchor=south,\n",
        " rounded corners=2pt,\n",
        "    font=\\sf\\footnotesize,\n",
        "    %text width=27mm,\n",
        "    align=center,\n",
        "    %minimum width=27mm,\n",
        "    minimum height=5mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\definecolor{col1}{RGB}{240,240,255}\n",
        "\\definecolor{col2}{RGB}{255, 255, 205}\n",
        "\n",
        "\\def\\du{190mm}\n",
        "\\def\\vi{15mm}\n",
        "\n",
        "\\node[fill=green!10,draw=none,minimum width=\\du,\n",
        "name path=G4,\n",
        "anchor=south west, minimum height=\\vi](B1)at(-19.0mm,3mm){};\n",
        "\n",
        "\\node[right=2mm of B1.west,anchor=west,align=left]{AI Hypercomputing\\\\ Era};\n",
        "\n",
        "\\node[fill=col2,draw=none,minimum width=\\du,\n",
        "name path=G3,\n",
        "anchor=south west, minimum height=\\vi](Z)at(B1.north west){};\n",
        "\\node[right=2mm of Z.west,anchor=west,align=left]{Warehouse Scale\\\\ Computing};\n",
        "\n",
        "\\node[fill=red!10,draw=none,minimum width=\\du,\n",
        "anchor=south west, minimum height=\\vi](B2)at (Z.north west){};\n",
        "\\node[right=2mm of B2.west,anchor=west,align=left]{High-Performance\\\\ Computing};\n",
        "\n",
        "\\node[fill=col1,draw=none,minimum width=\\du,\n",
        "name path=G1,\n",
        "anchor=south west, minimum height=\\vi](V)at(B2.north west){};\n",
        "\\node[right= 2mmof V.west,anchor=west,align=left]{Mainframe};\n",
        "\n",
        "\\def\\hi{6.75}\n",
        "\\draw[thick,name path=V1](0mm,0)node[below]{1950}--++(90:\\hi);\n",
        "\\draw[thick,name path=V2](10mm,0)node[below]{1960}--++(90:\\hi);\n",
        "\\draw[thick,name path=V3](20mm,0)node[below]{1970}--++(90:\\hi);\n",
        "\\draw[thick,name path=V4](30mm,0)node[below]{1980}--++(90:\\hi);\n",
        "\\draw[thick,name path=V5](40mm,0)node[below]{1990}--++(90:\\hi);\n",
        "\\draw[thick,name path=V6](50mm,0)node[below]{2000}--++(90:\\hi);\n",
        "\\draw[thick,name path=V7](60mm,0)node[below]{2010}--++(90:\\hi);\n",
        "\\draw[thick,name path=V8](70mm,0)node[below]{2020}--++(90:\\hi);\n",
        "\n",
        "\\def\\fa{2}\n",
        "\\path [name intersections={of=V1 and G1,by={A,B}}];\n",
        "\\node[Box, minimum width=20mm,  anchor=south west,\n",
        "xshift=-\\fa*5mm]at([yshift=1pt]B){ENIAC};\n",
        "\n",
        "\\path [name intersections={of=V3 and G1,by={C,D}}];\n",
        "\\node[Box, minimum width=20mm,  anchor=north west,\n",
        "xshift=-\\fa*6mm]at([yshift=-1pt]C){IBM\\\\ System/360};\n",
        "\\node[Box, minimum width=40mm,  anchor=north west,\n",
        "xshift=-\\fa*6mm]at([yshift=-1pt]D){CDC 6600};\n",
        "%%%%\n",
        "\\path [name intersections={of=V4 and G3,by={E,F}}];\n",
        "\\node[Box, minimum width=30mm,  anchor=south west,\n",
        "xshift=-\\fa*4mm]at([yshift=1pt]E){Cray-1};\n",
        "\n",
        "\\path [name intersections={of=V6 and G3,by={G,H}}];\n",
        "\\node[Box, minimum width=20mm,  anchor=north west,\n",
        "xshift=0mm]at([yshift=-1pt]G){Google Data\\\\ Centers};\n",
        "\n",
        "\\path [name intersections={of=V7 and G3,by={I,J}}];\n",
        "\\node[Box, minimum width=22mm,  anchor=south west,\n",
        "xshift=-\\fa*5mm]at([yshift=1pt]J){AWS};\n",
        "\n",
        "\\path [name intersections={of=V8 and G4,by={K,L}}];\n",
        "\\node[Box, minimum width=20mm,  anchor=north west,\n",
        "xshift=-\\fa*5mm]at([yshift=-1pt]K){NVIDIA GPU};\n",
        "\n",
        "\\node[Box,minimum width=2mm,  anchor=south,\n",
        "xshift=-\\fa*0mm]at([yshift=1pt]L){};\n",
        "\\node[minimum width=20mm,  anchor=south west,\n",
        "xshift=-\\fa*5mm]at([yshift=1pt]L){Google TPUs};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Computing System Evolution**: Hardware advancements continuously adapt to the increasing demands of machine learning workloads, transitioning from centralized mainframes to specialized architectures like gpus and AI hypercomputing systems optimized for parallel processing and massive datasets. This progression reflects a shift toward accelerating model training and inference through increased computational power and memory bandwidth.\n",
        ":::\n",
        "\n",
        "Electronic computation began with the mainframe era. ENIAC (1945) established the viability of electronic computation at scale, while the IBM System/360 (1964) introduced architectural principles of standardized instruction sets and memory hierarchies. These fundamental concepts laid the groundwork for all subsequent computing systems.\n",
        "\n",
        "High-performance computing (HPC) systems [@thornton1965cdc] built upon these foundations while specializing for scientific computation. The CDC 6600 and later systems like the CM-5 [@thinking_machines_cm5] optimized for dense matrix operations and floating-point calculations.\n",
        "\n",
        "HPC These systems implemented specific architectural features for scientific workloads: high-bandwidth memory systems for array operations, vector processing units for mathematical computations, and specialized interconnects for collective communication patterns. Scientific computing demanded emphasis on numerical precision and stability, with processors and memory systems designed for regular, predictable access patterns. The interconnects supported tightly synchronized parallel execution, enabling efficient collective operations across computing nodes.\n",
        "\n",
        "Warehouse-scale computing marked the next evolutionary step. Google's data center implementations [@barroso2003web] introduced new optimizations for internet-scale data processing. Unlike HPC systems focused on tightly coupled scientific calculations, warehouse computing handled loosely coupled tasks with irregular data access patterns.\n",
        "\n",
        "WSC systems introduced architectural changes to support high throughput for independent tasks, with robust fault tolerance and recovery mechanisms. The storage and memory systems adapted to handle sparse data structures efficiently, moving away from the dense array optimizations of HPC. Resource management systems evolved to support multiple applications sharing the computing infrastructure, contrasting with HPC's dedicated application execution model.\n",
        "\n",
        "Deep learning computation emerged as the next frontier, building upon this accumulated architectural knowledge. AlexNet's [@krizhevsky2012imagenet] success in 2012 highlighted the need for further specialization. While previous systems focused on either scientific calculations or independent data processing tasks, neural network training introduced new computational patterns. The training process required continuous updates to large sets of parameters, with complex data dependencies during model optimization. These workloads demanded new approaches to memory management and inter-device communication that neither HPC nor warehouse computing had fully addressed.\n",
        "\n",
        "The AI hypercomputing era, beginning in 2015, represents the latest step in this evolutionary chain. NVIDIA GPUs and Google TPUs introduced hardware designs specifically optimized for neural network computations, moving beyond adaptations of existing architectures. These systems implemented new approaches to parallel processing, memory access, and device communication to handle the distinct patterns of model training. The resulting architectures balanced the numerical precision needs of scientific computing with the scale requirements of warehouse systems, while adding specialized support for the iterative nature of neural network optimization.\n",
        "\n",
        "This architectural progression illuminates why traditional computing systems proved insufficient for neural network training. As shown in @tbl-computing-eras, while HPC systems provided the foundation for parallel numerical computation and warehouse-scale systems demonstrated distributed processing at scale, neither fully addressed the computational patterns of model training. Modern neural networks combine intensive parameter updates, complex memory access patterns, and coordinated distributed computation in ways that demanded new architectural approaches.\n",
        "\n",
        "+-------------------+-----------------------------+-------------------------------+------------------------------+--------------------------------------------+\n",
        "| Era               | Primary Workload            | Memory Patterns               | Processing Model             | System Focus                               |\n",
        "+:==================+:============================+:==============================+:=============================+:===========================================+\n",
        "| Mainframe         | Sequential batch processing | Simple memory hierarchy       | Single instruction stream    | General-purpose computation                |\n",
        "+-------------------+-----------------------------+-------------------------------+------------------------------+--------------------------------------------+\n",
        "| HPC               | Scientific simulation       | Regular array access          | Synchronized parallel        | Numerical precision, collective operations |\n",
        "+-------------------+-----------------------------+-------------------------------+------------------------------+--------------------------------------------+\n",
        "| Warehouse-scale   | Internet services           | Sparse, irregular access      | Independent parallel tasks   | Throughput, fault tolerance                |\n",
        "+-------------------+-----------------------------+-------------------------------+------------------------------+--------------------------------------------+\n",
        "| AI Hypercomputing | Neural network training     | Parameter-heavy, mixed access | Hybrid parallel, distributed | Training optimization, model scale         |\n",
        "+-------------------+-----------------------------+-------------------------------+------------------------------+--------------------------------------------+\n",
        "\n",
        ": **Computing Era Evolution**: System architectures progressively adapted to meet the demands of evolving workloads, transitioning from general-purpose computation to specialized designs optimized for neural network training. High-performance computing (HPC) established parallel processing foundations, while warehouse-scale systems enabled distributed computation; however, modern neural networks require architectures that balance intensive parameter updates, complex memory access, and coordinated distributed computation. {#tbl-computing-eras .striped .hover}\n",
        "\n",
        "Understanding these distinct characteristics and their evolution from previous computing eras explains why modern AI training systems require dedicated hardware features and optimized system designs. This historical context provides the foundation for examining machine learning training system architectures in detail.\n",
        "\n",
        "### System Role {#sec-ai-training-system-role-eaa4}\n",
        "\n",
        "The development of modern machine learning models relies critically on specialized systems for training and optimization. These systems are a complex interplay of hardware and software components that must efficiently handle massive datasets while maintaining numerical precision and computational stability. While there is no universally accepted definition of training systems due to their rapid evolution and diverse implementations, they share common characteristics and requirements that distinguish them from traditional computing infrastructures.\n",
        "\n",
        "::: {.callout-note title=\"Definition of Training Systems\"}\n",
        "\n",
        "**Machine Learning Training Systems** refer to the specialized computational frameworks that manage and execute the *iterative optimization* of machine learning models. These systems encompass the *software and hardware stack* responsible for processing training data, computing gradients, updating model parameters, and coordinating distributed computation. Training systems operate at multiple scales, from single hardware accelerators to *distributed clusters*, and incorporate components for *data management*, *computation scheduling*, *memory optimization*, and *performance monitoring*. They serve as the foundational infrastructure that enables the systematic development and refinement of machine learning models through empirical training on data.\n",
        ":::\n",
        "\n",
        "These training systems constitute the fundamental infrastructure required for developing predictive models. They execute the mathematical optimization of model parameters, converting input data into computational representations for tasks such as pattern recognition, language understanding, and decision automation. The training process involves systematic iteration over datasets to minimize error functions and achieve optimal model performance.\n",
        "\n",
        "Training systems function as integral components within the broader machine learning pipeline. They interface with preprocessing frameworks that standardize and transform raw data, while connecting to deployment architectures that enable model serving. The computational efficiency and reliability of training systems directly influence the development cycle, from initial experimentation through model validation to production deployment.\n",
        "\n",
        "The emergence of transformer architectures and large-scale models has introduced new requirements for training systems. Contemporary implementations must efficiently process petabyte-scale datasets, orchestrate distributed training across multiple accelerators, and optimize memory utilization for models containing billions of parameters. The management of data parallelism, model parallelism, and inter-device communication presents significant technical challenges in modern training architectures.\n",
        "\n",
        "Training systems also significantly impact the operational considerations of machine learning development. System design must address multiple technical constraints: computational throughput, energy consumption, hardware compatibility, and scalability with increasing model complexity. These factors determine both the technical feasibility and operational viability of machine learning implementations across different scales and applications.\n",
        "\n",
        "### Systems Thinking {#sec-ai-training-systems-thinking-81dd}\n",
        "\n",
        "The practical execution of training models is deeply tied to system design. Training is not merely a mathematical optimization problem; it is a system-driven process that requires careful orchestration of computing hardware, memory, and data movement.\n",
        "\n",
        "Training workflows consist of interdependent stages: data preprocessing, forward and backward passes, and parameter updates. Each stage imposes specific demands on system resources. For instance, data preprocessing relies on storage and I/O subsystems to provide computing hardware with continuous input. While traditional processors like CPUs handle many training tasks effectively, increasingly complex models have driven the adoption of hardware accelerators, such as Graphics Processing Units, GPUs, and specialized machine learning processors, that can process mathematical operations in parallel. These accelerators, alongside CPUs, handle operations like gradient computation and parameter updates. The performance of these stages depends on how well the system manages bottlenecks such as memory bandwidth and communication latency.\n",
        "\n",
        "System constraints often dictate the performance limits of training workloads. Modern accelerators are frequently bottlenecked by memory bandwidth, as data movement between memory hierarchies can be slower and more energy-intensive than the computations themselves [@patterson2021hardware]. In distributed setups, synchronization across devices introduces additional latency, with the performance of interconnects (e.g., NVLink, InfiniBand) playing a crucial role.\n",
        "\n",
        "Optimizing training workflows is essential to overcoming these limitations. Techniques like overlapping computation with data loading, mixed-precision training [@micikevicius2018mixed], and efficient memory allocation can significantly enhance performance. These optimizations ensure that accelerators are utilized effectively, minimizing idle time and maximizing throughput.\n",
        "\n",
        "Beyond training infrastructure, systems thinking has also informed model architecture decisions. System-level constraints often guide the development of new model architectures and training approaches. For example, memory limitations have motivated research into more efficient neural network architectures [@vaswani2017attention], while communication overhead in distributed systems has influenced the design of optimization algorithms. These adaptations demonstrate how practical system considerations shape the evolution of machine learning approaches within given computational bounds.\n",
        "\n",
        "For example, training large Transformer models requires partitioning data and model parameters across multiple devices. This introduces synchronization challenges, particularly during gradient updates. Communication libraries such as [NVIDIA's Collective Communications Library (NCCL)](https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/overview.html) enable efficient gradient sharing, providing the foundation for more advanced techniques we discuss in later sections. These examples illustrate how system-level considerations influence the feasibility and efficiency of modern training workflows.\n",
        "\n",
        "## Mathematical Foundations {#sec-ai-training-mathematical-foundations-86ce}\n",
        "\n",
        "Neural networks are grounded in mathematical principles that define their structure and functionality. These principles encompass key operations essential for enabling networks to learn complex patterns from data. A thorough understanding of the mathematical foundations underlying these operations is vital, not only for comprehending the mechanics of neural network computation but also for recognizing their broader implications at the system level.\n",
        "\n",
        "Therefore, we need to connect the theoretical underpinnings of these operations to their practical implementation, examining how modern systems optimize these computations to address critical challenges such as memory management, computational efficiency, and scalability in training deep learning models.\n",
        "\n",
        "### Neural Network Computation {#sec-ai-training-neural-network-computation-e39c}\n",
        "\n",
        "We have previously introduced the basic operations involved in training a neural network (see [Chapter 3](../dl_primer/dl_primer.qmd) and [Chapter 4](../dnn_architectures/dnn_architectures.qmd)), such as forward propagation and the use of loss functions to evaluate performance. Here, we build on those foundational concepts to explore how these operations are executed at the system level. Key mathematical operations such as matrix multiplications and activation functions[^fn-act-fun] underpin the system requirements for training neural networks. Foundational works by @rumelhart1986learning via the introduction of backpropagation and the development of efficient matrix computation libraries, e.g., BLAS [@dongarra1988extended], laid the groundwork for modern training architectures.\n",
        "\n",
        "[^fn-act-fun]: Activation functions are nonlinear transformations applied to neuron outputs that enable neural networks to learn complex patterns. By introducing nonlinearity between layers, they allow networks to approximate arbitrary functions. Without activation functions, neural networks would collapse into simple linear models. Like biological neurons that only fire above certain thresholds, activation functions introduce essential nonlinear behavior.\n",
        "\n",
        "#### Core Operations {#sec-ai-training-core-operations-516a}\n",
        "\n",
        "At the heart of a neural network is the process of forward propagation, in its simplest case,  involves two primary operations: matrix multiplication and the application of an activation function. Matrix multiplication forms the basis of the linear transformation in each layer of the network. At layer $l$, the computation can be described as:\n",
        "$$\n",
        "A^{(l)} = f\\left(W^{(l)} A^{(l-1)} + b^{(l)}\\right)\n",
        "$$\n",
        "Where:\n",
        "\n",
        "* $A^{(l-1)}$ represents the activations from the previous layer (or the input layer for the first layer),\n",
        "* $W^{(l)}$ is the weight matrix at layer $l$, which contains the parameters learned by the network,\n",
        "* $b^{(l)}$ is the bias vector for layer $l$,\n",
        "* $f(\\cdot)$ is the activation function applied element-wise (e.g., ReLU, sigmoid) to introduce non-linearity.\n",
        "\n",
        "#### Matrix Operations {#sec-ai-training-matrix-operations-7c99}\n",
        "\n",
        "The computational patterns in neural networks revolve around various types of matrix operations. Understanding these operations and their evolution reveals the reasons why specific system designs and optimizations emerged in machine learning training systems.\n",
        "\n",
        "##### Dense Matrix-Matrix Multiplication {#sec-ai-training-dense-matrixmatrix-multiplication-21ab}\n",
        "\n",
        "Matrix-matrix multiplication dominates computation in neural networks, accounting for 60-90% of training time [@he2016residual]. Early neural network implementations relied on standard CPU-based linear algebra libraries. The evolution of matrix multiplication algorithms has closely followed advancements in numerical linear algebra. From Strassen's algorithm, which reduced the naive $O(n^3)$ complexity to approximately $O(n^{2.81})$ [@strassen1969gauss], to contemporary hardware-accelerated libraries like [cuBLAS](https://developer.nvidia.com/cublas), these innovations have continually pushed the limits of computational efficiency.\n",
        "\n",
        "Modern systems implement blocked matrix computations for parallel processing across multiple units. As neural architectures grew in scale, these multiplications began to demand significant memory resources, weight matrices and activation matrices must both remain accessible for the backward pass during training. Hardware designs adapted to optimize for these dense multiplication patterns while managing growing memory requirements.\n",
        "\n",
        "##### Matrix-Vector Operations {#sec-ai-training-matrixvector-operations-5b34}\n",
        "\n",
        "Matrix-vector multiplication became essential with the introduction of normalization techniques in neural architectures. While computationally simpler than matrix-matrix multiplication, these operations present unique system challenges. They exhibit lower hardware utilization due to their limited parallelization potential. This characteristic influences both hardware design and model architecture decisions, particularly in networks processing sequential inputs or computing layer statistics.\n",
        "\n",
        "##### Batched Operations {#sec-ai-training-batched-operations-fcae}\n",
        "\n",
        "The introduction of batching transformed matrix computation in neural networks. By processing multiple inputs simultaneously, training systems convert matrix-vector operations into more efficient matrix-matrix operations. This approach improves hardware utilization but increases memory demands for storing intermediate results. Modern implementations must balance batch sizes against available memory, leading to specific optimizations in memory management and computation scheduling.\n",
        "\n",
        "Hardware accelerators like Google's TPU [@jouppi2017tpu] reflect this evolution, incorporating specialized matrix units and memory hierarchies for these diverse multiplication patterns. These hardware adaptations enable training of large-scale models like GPT-3 [@brown2020language] through efficient handling of varied matrix operations.\n",
        "\n",
        "#### Activation Functions {#sec-ai-training-activation-functions-4d2f}\n",
        "\n",
        "Activation functions are central to neural network operation. As shown in @fig-training-activations, these functions apply different non-linear transformations to input values, which is essential for enabling neural networks to approximate complex mappings between inputs and outputs. Without activation functions, neural networks, regardless of depth, would collapse into linear systems, severely limiting their representational power [@goodfellow2016deep].\n",
        "\n",
        "::: {#fig-training-activations fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line join=round,font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\pgfplotsset{\n",
        "    compat=1.15,\n",
        "    MyStyle/.style={\n",
        "        title style={yshift=-1mm},\n",
        "        legend style={at={(0.17,0.88)}, anchor=south},\n",
        "        legend cell align={left},\n",
        "        axis x line=bottom,\n",
        "        axis y line*=left,\n",
        "        axis line style={thick},\n",
        "        width=10cm,\n",
        "        height=7cm,\n",
        "        grid = major,\n",
        "        major grid style={dashed},\n",
        "        xlabel = {},\n",
        "        tick style = {line width=1.0pt},\n",
        "        tick align = inside,\n",
        "        tick label style={/pgf/number format/assume math mode=true},\n",
        "        ticklabel style={font=\\footnotesize\\usefont{T1}{phv}{m}{n},\n",
        "},\n",
        "   yticklabel style={\n",
        "  font=\\footnotesize\\usefont{T1}{phv}{m}{n},\n",
        "  /pgf/number format/fixed,\n",
        "  /pgf/number format/fixed zerofill,\n",
        "  /pgf/number format/precision=2\n",
        "},\n",
        "    },\n",
        "}\n",
        "\n",
        " \\begin{scope}[local bounding box=GR1,shift={($(0,0)+(0,0)$)}]\n",
        " \\begin{axis}[\n",
        "        title = {Sigmoid Activation Function},\n",
        "        MyStyle,\n",
        "        ymin=-0.05, ymax=1.05,\n",
        "        xmin=-10.5,xmax=10.75,\n",
        "        xtick={-10.0,-7.5,-5,0,-2.5,0.0,2.5,5.0,7.5,10.0},]\n",
        "        \\addplot[\n",
        "            blue!70!black,line width=2pt,\n",
        "            domain = -10:10,\n",
        "            samples = 100\n",
        "        ]\n",
        "            {1/(1+exp(-x))};\n",
        "            \\addlegendentry{Sigmoid}\n",
        "    \\end{axis}\n",
        "    \\end{scope}\n",
        " %\n",
        "\n",
        "\\begin{scope}[local bounding box=GR2,shift={($(0,0)+(10,0)$)}]\n",
        " \\begin{axis}[\n",
        "        title = {Tanh Activation Function},\n",
        "        MyStyle,\n",
        "        ymin=-1.1, ymax=1.1,\n",
        "        xmin=-10.5,xmax=10.75,\n",
        "        xtick={-10.0,-7.5,-5,0,-2.5,0.0,2.5,5.0,7.5,10.0},\n",
        "        ytick={-1.00,-0.75,-0.5,-0.25,0.0,0.25,0.50,0.75,1.00},\n",
        "    ]\n",
        "        \\addplot[\n",
        "            OrangeLine,line width=2pt,\n",
        "            domain = -10:10,\n",
        "            samples = 100\n",
        "        ]\n",
        "           {tanh(x)};\n",
        "           \\addlegendentry{Tanh}\n",
        "    \\end{axis}\n",
        "    \\end{scope}\n",
        " %\n",
        " \\begin{scope}[local bounding box=GR3,shift={($(0,0)+(0,-7)$)}]\n",
        " \\begin{axis}[\n",
        "        title = {ReLU Activation Function},\n",
        "        MyStyle,\n",
        "        ymin=-0.5, ymax=10.5,\n",
        "        xmin=-10.5,xmax=10.75,\n",
        "        xtick={-10.0,-7.5,-5,0,-2.5,0.0,2.5,5.0,7.5,10.0},\n",
        "        ytick={0,2,4,6,8,10},\n",
        "    ]\n",
        "        \\addplot[\n",
        "            red,line width=2pt,\n",
        "            domain = -10:10,\n",
        "            samples = 100\n",
        "        ]\n",
        "          {max(0, x)};\n",
        "          \\addlegendentry{ReLU}\n",
        "    \\end{axis}\n",
        "    \\end{scope}\n",
        "     %\n",
        " \\begin{scope}[local bounding box=GR4,shift={($(0,0)+(10,-7)$)}]\n",
        " \\begin{axis}[\n",
        "        title = {Softmax Activation Function},\n",
        "        MyStyle,\n",
        "        ymin=-0.002, ymax=0.042,\n",
        "        xmin=-10.5,xmax=10.75,\n",
        "        xtick={-10.0,-7.5,-5,0,-2.5,0.0,2.5,5.0,7.5,10.0},\n",
        "        ytick={0.000,0.005,0.010,0.015,0.020,0.025,0.030,0.035,0.040},\n",
        "        scaled y ticks = false,\n",
        "   yticklabel style={/pgf/number format/precision=3},\n",
        "    ]\n",
        "        \\addplot[\n",
        "            green!70!black,line width=2pt,\n",
        "            domain = -10:10,\n",
        "            samples = 100\n",
        "        ]\n",
        "           {exp(x)/(exp(13)+exp(0)+exp(x))};\n",
        "           \\addlegendentry{Softmax}\n",
        "    \\end{axis}\n",
        "    \\end{scope}\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Activation Function Nonlinearity**: Neural networks rely on nonlinear activation functions to approximate complex relationships; without them, even deep networks collapse to linear models incapable of learning intricate patterns. Each curve represents a different activation functionâsigmoid, relu, and tanhâwith varying output ranges and sensitivities that influence network behavior and training dynamics.\n",
        ":::\n",
        "\n",
        "While activation functions are applied element-wise to the outputs of each neuron, their computational cost is significantly lower than that of matrix multiplications. Typically, activation functions contribute to about 5-10% of the total computation time. However, their impact on the learning process is profound, influencing not only the network's ability to learn but also its convergence rate and gradient flow.\n",
        "\n",
        "A careful understanding of activation functions and their computational implications is vital for designing efficient machine learning pipelines. Selecting the appropriate activation function can minimize computation time without compromising the network's ability to learn complex patterns, ensuring both efficiency and accuracy.\n",
        "\n",
        "##### Sigmoid {#sec-ai-training-sigmoid-3392}\n",
        "\n",
        "The sigmoid function is one of the original activation functions in neural networks. It maps input values to the range $(0, 1)$ through the following mathematical expression:\n",
        "$$\n",
        "\\text{sigmoid}(x) = \\frac{1}{1 + e^{-x}}\n",
        "$$\n",
        "\n",
        "This function produces an S-shaped curve, where inputs far less than zero approach an output of 0, and inputs much greater than zero approach 1. The smooth transition between these bounds makes sigmoid particularly useful in scenarios where outputs need to be interpreted as probabilities. It is therefore commonly applied in the output layer of networks for binary classification tasks.\n",
        "\n",
        "The sigmoid function is differentiable and has a well-defined gradient, which makes it suitable for use with gradient-based optimization methods. Its bounded output ensures numerical stability, preventing excessively large activations that might destabilize the training process. However, for inputs with very high magnitudes (positive or negative), the gradient becomes negligible, which can lead to the vanishing gradient problem.[^fn-explode-vanish] This issue is particularly detrimental in deep networks, where gradients must propagate through many layers during training [@hochreiter1998vanishing].\n",
        "\n",
        "[^fn-explode-vanish]: Vanishing gradients prevent learning in deep layers as parameter updates become negligible. Conversely, exploding gradients cause rapid weight updates, leading to unstable training. Both issues can hinder convergence and degrade model performance.\n",
        "\n",
        "Additionally, sigmoid outputs are not zero-centered, meaning that the function produces only positive values. This lack of symmetry can cause optimization algorithms like stochastic gradient descent (SGD)[^fn-sto-gd] to exhibit inefficient updates, as gradients may introduce biases that slow convergence. To mitigate these issues, techniques such as batch normalization[^fn-batchnorm] or careful initialization may be employed.[^fn-pop-frameworks]\n",
        "\n",
        "[^fn-pop-frameworks]: Popular deep learning frameworks like PyTorch and TensorFlow implement robust initialization schemes based on theoretical principles and empirical research. These defaults help prevent vanishing/exploding gradients and ensure stable training.\n",
        "\n",
        "[^fn-sto-gd]: **Stochastic Gradient Descent (SGD)**: Unlike full gradient descent which computes gradients over the entire dataset, SGD estimates gradients using small batches of data. This reduces memory requirements and enables frequent parameter updates, though it introduces variance in the optimization process. This variance can help escape local minima but results in less precise convergence compared to full gradient descent.\n",
        "\n",
        "[^fn-batchnorm]: **Batch Normalization**: A technique that normalizes the input of each layer by adjusting and scaling the activations, reducing internal covariate shift and enabling faster training.\n",
        "\n",
        "Despite its limitations, sigmoid remains an effective choice in specific contexts. It is often used in the final layer of binary classification models, where its output can be interpreted directly as the probability of a particular class. For example, in a network designed to classify emails as either spam or not spam, the sigmoid function converts the network's raw score into a probability, making the output more interpretable.\n",
        "\n",
        "##### Tanh {#sec-ai-training-tanh-598d}\n",
        "\n",
        "The hyperbolic tangent, or tanh, is a commonly used activation function in neural networks. It maps input values through a nonlinear transformation into the range $(-1, 1)$. The mathematical definition of the tanh function is:\n",
        "$$\n",
        "\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n",
        "$$\n",
        "\n",
        "This function produces an S-shaped curve, similar to the sigmoid function, but with the important distinction that its output is centered around zero. Negative inputs are mapped to values in the range $[-1, 0)$, while positive inputs are mapped to values in the range $(0, 1]$. This zero-centered property makes tanh advantageous for hidden layers, as it reduces bias in weight updates and facilitates faster convergence during optimization [@lecun1998efficient].\n",
        "\n",
        "The tanh function is smooth and differentiable, with a gradient that is well-defined for all input values. Its symmetry around zero helps balance the activations of neurons, leading to more stable and efficient learning dynamics. However, for inputs with very large magnitudes (positive or negative), the function saturates, and the gradient approaches zero. This vanishing gradient problem can impede training in deep networks.\n",
        "\n",
        "The tanh function is often used in the hidden layers of neural networks, particularly for tasks where the input data contains both positive and negative values. Its symmetric range $(-1, 1)$ ensures balanced activations, making it well-suited for applications such as sequence modeling and time series analysis.\n",
        "\n",
        "For example, tanh is widely used in recurrent neural networks (RNNs), where its bounded and symmetric properties help stabilize learning dynamics over time. While tanh has largely been replaced by ReLU in many modern architectures due to its computational inefficiencies and vanishing gradient issues, it remains a viable choice in scenarios where its range and symmetry are beneficial.\n",
        "\n",
        "##### ReLU {#sec-ai-training-relu-d304}\n",
        "\n",
        "The Rectified Linear Unit (ReLU) is one of the most widely used activation functions in modern neural networks. Its simplicity and effectiveness have made it the default choice for most machine learning architectures. The ReLU function is defined as:\n",
        "\n",
        "$$\n",
        "\\text{ReLU}(x) = \\max(0, x)\n",
        "$$\n",
        "\n",
        "This function outputs the input value if it is positive and zero otherwise. Unlike sigmoid and tanh, which produce smooth, bounded outputs, ReLU introduces sparsity in the network by setting all negative inputs to zero. This sparsity can help reduce overfitting and improve computation efficiency in many scenarios.\n",
        "\n",
        "ReLU is particularly effective in avoiding the vanishing gradient problem, as it maintains a constant gradient for positive inputs. However, it introduces another issue known as the dying ReLU problem, where neurons can become permanently inactive if they consistently output zero. This occurs when the weights cause the input to remain in the negative range. In such cases, the neuron no longer contributes to learning.\n",
        "\n",
        "ReLU is commonly used in the hidden layers of neural networks, particularly in convolutional neural networks (CNNs) and machine learning models for image and speech recognition tasks. Its computational simplicity and ability to prevent vanishing gradients make it ideal for training deep architectures.\n",
        "\n",
        "##### Softmax {#sec-ai-training-softmax-ffbf}\n",
        "\n",
        "The softmax function is a widely used activation function, primarily applied in the output layer of classification models. It transforms raw scores into a probability distribution, ensuring that the outputs sum to 1. This makes it particularly suitable for multi-class classification tasks, where each output represents the probability of the input belonging to a specific class.\n",
        "\n",
        "The mathematical definition of the softmax function for a vector of inputs $\\mathbf{z}=[z_1,z_2,\\dots,z_K]$ is:\n",
        "$$\n",
        "\\sigma(z_i)=\\frac{e^{z_i}}{\\sum_{j=1}^K e^{z_j}},\\quad i=1,2,\\dots,K\n",
        "$$\n",
        "Here, $K$ is the number of classes, $z_i$ represents the raw score (logit) for the $i$-th class, and $\\sigma(z_i)$ is the probability of the input belonging to that class.\n",
        "\n",
        "Softmax has several desirable properties that make it essential for classification tasks. It converts arbitrary real-valued inputs into probabilities, with each output value in the range $(0,1)$ and the sum of all outputs equal to 1. The function is differentiable, which allows it to be used with gradient-based optimization methods. Additionally, the probabilistic interpretation of its output is crucial for tasks where confidence levels are needed, such as object detection or language modeling.\n",
        "\n",
        "However, softmax is sensitive to the magnitude of the input logits. Large differences in logits can lead to highly peaked distributions, where most of the probability mass is concentrated on a single class, potentially leading to overconfidence in predictions.\n",
        "\n",
        "Softmax finds extensive application in the final layer of neural networks for multi-class classification tasks. For instance, in image classification, models such as AlexNet and ResNet employ softmax in their final layers to assign probabilities to different image categories. Similarly, in natural language processing tasks like language modeling and machine translation, softmax is applied over large vocabularies to predict the next word or token, making it an essential component in understanding and generating human language.\n",
        "\n",
        "##### Trade-offs {#sec-ai-training-tradeoffs-d0fa}\n",
        "\n",
        "Activation functions in neural networks significantly impact both mathematical properties and system-level performance. The selection of an activation function directly influences training time, model scalability, and hardware efficiency through three primary factors: computational cost, gradient behavior, and memory usage.\n",
        "\n",
        "Benchmarking common activation functions on an Apple M2 single-threaded CPU reveals meaningful performance differences, as illustrated in @fig-activation-perf. The data demonstrates that Tanh and ReLU execute more efficiently than Sigmoid on CPU architectures, making them particularly suitable for real-time applications and large-scale systems.\n",
        "\n",
        "::: {#fig-activation-perf fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\scalebox{0.8}{%\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\definecolor{Softmax}{HTML}{FDAE61}\n",
        "\\definecolor{ReLU}{HTML}{ABDDA4}\n",
        "\\definecolor{Tanh}{HTML}{2B83BA}\n",
        "\\begin{axis}[\n",
        "    ylabel={Execution Time (seconds)},\n",
        "    ymin=0.49,\n",
        "    axis lines=left,\n",
        "   axis line style={thick,-latex},\n",
        "    ytick={0.5,0.55,...,1.1},\n",
        "    tick label style={/pgf/number format/assume math mode=true},\n",
        "    yticklabel style={font=\\footnotesize\\usefont{T1}{phv}{m}{n},\n",
        "    /pgf/number format/.cd, fixed, fixed zerofill, precision=2},\n",
        "    xticklabel style={font=\\footnotesize\\usefont{T1}{phv}{m}{n}},\n",
        "    ylabel style={font=\\footnotesize\\usefont{T1}{phv}{m}{n}},\n",
        "    ymax=1.15,\n",
        "    enlarge x limits=0.2,\n",
        "    tick style={draw=black,thin,},\n",
        "    tick align=outside,\n",
        "    major tick length=1mm,\n",
        "    bar width=30pt,\n",
        "    xtick={1,2,3,4},\n",
        "    xticklabels={Sigmoid,Tanh,ReLU,Softmax},\n",
        "    every axis plot/.append style={\n",
        "          ybar,\n",
        "          bar width=0.55,\n",
        "          bar shift=0pt,\n",
        "          fill\n",
        "        }]\n",
        "      \\addplot[red]coordinates {(1,1.1)};\n",
        "      \\addplot[Tanh]coordinates{(2,0.61)};\n",
        "      \\addplot[ReLU]coordinates{(3,0.78)};\n",
        "      \\addplot[Softmax]coordinates{(4,0.91)};\n",
        "\\end{axis}\n",
        "\\end{tikzpicture}}\n",
        "```\n",
        "**Activation Function Performance**: CPU execution time varies significantly across common activation functions, with tanh and relu offering substantial speed advantages over sigmoid on this architecture. These differences impact system-level considerations such as training time and real-time inference capabilities, guiding activation function selection for performance-critical applications.\n",
        ":::\n",
        "\n",
        "While these benchmark results provide valuable insights, they represent CPU-only performance without hardware acceleration. In production environments, modern hardware accelerators like GPUs can substantially alter the relative performance characteristics of activation functions. System architects must therefore consider their specific hardware environment and deployment context when evaluating computational efficiency.\n",
        "\n",
        "The selection of activation functions requires careful balancing of computational considerations against mathematical properties. Key factors include the function's ability to mitigate vanishing gradients and introduce beneficial sparsity in neural activations. Each major activation function presents distinct advantages and challenges:\n",
        "\n",
        "###### Sigmoid {#sec-ai-training-sigmoid-9bec}\n",
        "\n",
        "The sigmoid function has smooth gradients and a bounded output in the range $(0, 1)$, making it useful in probabilistic settings. However, the computation of the sigmoid involves an exponential function, which becomes a key consideration in both software and hardware implementations. In software, this computation is expensive and inefficient, particularly for deep networks or large datasets. Additionally, sigmoid suffers from vanishing gradients, especially for large input values, which can hinder the learning process in deep architectures. Its non-zero-centered output can also slow optimization, requiring more epochs to converge.\n",
        "\n",
        "These computational challenges are addressed differently in hardware. Modern accelerators like GPUs and TPUs typically avoid direct computation of the exponential function, instead using lookup tables (LUTs) or piece-wise linear approximations to balance accuracy with speed. While these hardware optimizations help, the multiple memory lookups and interpolation calculations still make sigmoid more resource-intensive than simpler functions like ReLU, even on highly parallel architectures.\n",
        "\n",
        "###### Tanh {#sec-ai-training-tanh-d980}\n",
        "\n",
        "The tanh function outputs values in the range $(-1, 1)$, making it zero-centered and helping to stabilize gradient-based optimization algorithms. This zero-centered output helps reduce biases in weight updates, an advantage over sigmoid. Like sigmoid, however, tanh involves exponential computations that impact both software and hardware implementations. In software, this computational overhead can slow training, particularly when working with large datasets or deep models. While tanh helps prevent some of the saturation issues associated with sigmoid, it still suffers from vanishing gradients for large inputs, especially in deep networks.\n",
        "\n",
        "In hardware, tanh leverages its mathematical relationship with sigmoid (being essentially a scaled and shifted version) to optimize implementation. Modern hardware often implement tanh using a hybrid approach: lookup tables for common input ranges combined with piece-wise approximations for edge cases. This approach helps balance accuracy with computational efficiency, though tanh remains more resource-intensive than simpler functions. Despite these challenges, tanh remains common in RNNs and LSTMs where balanced gradients are crucial.\n",
        "\n",
        "###### ReLU {#sec-ai-training-relu-a594}\n",
        "\n",
        "The ReLU function stands out for its mathematical simplicity: it passes positive values unchanged and sets negative values to zero. This straightforward behavior has profound implications for both software and hardware implementations. In software, ReLU's simple thresholding operation results in faster computation compared to sigmoid or tanh. It also helps prevent vanishing gradients and introduces beneficial sparsity in activations, as many neurons output zero. However, ReLU can suffer from the \"dying ReLU\" problem in deep networks, where neurons become permanently inactive and never update their weights.\n",
        "\n",
        "The hardware implementation of ReLU showcases why it has become the dominant activation function in modern neural networks. Its simple $\\max(0,x)$ operation requires just a single comparison and conditional set, translating to minimal circuit complexity. Modern GPUs and TPUs can implement ReLU using a simple multiplexer that checks the input's sign bit, allowing for extremely efficient parallel processing. This hardware efficiency, combined with the sparsity it introduces, results in both reduced computation time and lower memory bandwidth requirements.\n",
        "\n",
        "###### Softmax {#sec-ai-training-softmax-ebdc}\n",
        "\n",
        "The softmax function transforms raw logits into a probability distribution, ensuring outputs sum to 1, making it essential for classification tasks. Its computation involves exponentiating each input value and normalizing by their sum, a process that becomes increasingly complex with larger output spaces. In software, this creates significant computational overhead for tasks like natural language processing, where vocabulary sizes can reach hundreds of thousands of terms. However this is typically not a significant issue since it is often only used in the final layer. The function also requires keeping all values in memory during computation, as each output probability depends on the entire input.\n",
        "\n",
        "At the hardware level, softmax faces unique challenges because it can't process each value independently like other activation functions. Unlike ReLU's simple threshold or even sigmoid's per-value computation, softmax needs access to all values to perform normalization. This becomes particularly demanding in modern transformer architectures, where softmax computations in attention mechanisms process thousands of values simultaneously. To manage these demands, hardware implementations often use approximation techniques or simplified versions of softmax, especially when dealing with large vocabularies or attention mechanisms.\n",
        "\n",
        "@tbl-compare-activations summarizes the trade-offs of these commonly used activation functions and highlights how these choices affect system performance.\n",
        "\n",
        "+--------------+----------------------------------------------------+-----------------------------------------------+----------------------------------------------------------------------------------------------------------+\n",
        "| Function     | Key Advantages                                     | Key Disadvantages                             | System Implications                                                                                      |\n",
        "+:=============+:===================================================+:==============================================+:=========================================================================================================+\n",
        "| Sigmoid      | Smooth gradients; bounded output in $(0, 1)$.      | Vanishing gradients; non-zero-centered        | Exponential computation adds overhead; limited scalability for deep networks on modern accelerators.     |\n",
        "|              |                                                    | output.                                       |                                                                                                          |\n",
        "+--------------+----------------------------------------------------+-----------------------------------------------+----------------------------------------------------------------------------------------------------------+\n",
        "| Tanh         | Zero-centered output in $(-1, 1)$; stabilizes      | Vanishing gradients for large inputs.         | More expensive than ReLU; effective for RNNs/LSTMs but less common in CNNs and Transformers.             |\n",
        "|              | gradients.                                         |                                               |                                                                                                          |\n",
        "+--------------+----------------------------------------------------+-----------------------------------------------+----------------------------------------------------------------------------------------------------------+\n",
        "| ReLU         | Computationally efficient; avoids vanishing        | Dying neurons; unbounded output.              | Simple operations optimize well on GPUs/TPUs; sparse activations reduce memory and computation needs.    |\n",
        "|              | gradients; introduces sparsity.                    |                                               |                                                                                                          |\n",
        "+--------------+----------------------------------------------------+-----------------------------------------------+----------------------------------------------------------------------------------------------------------+\n",
        "| Softmax      | Converts logits into probabilities; sums to $1$.   | Computationally expensive for large outputs.  | High cost for large vocabularies; hierarchical or sampled softmax needed for scalability in NLP tasks.   |\n",
        "+--------------+----------------------------------------------------+-----------------------------------------------+----------------------------------------------------------------------------------------------------------+\n",
        "\n",
        ": **Activation Function Trade-Offs**: Comparing activation functions exposes inherent advantages and disadvantages impacting system performance; for example, softmaxâs normalization requirement poses hardware challenges in large-scale transformer models, while relu offers computational efficiency but can suffer from vanishing gradients. This table clarifies how activation function choices influence both model behavior and the practical constraints of machine learning system design. {#tbl-compare-activations .striped .hover}\n",
        "\n",
        "The choice of activation function should balance computational considerations with their mathematical properties, such as handling vanishing gradients or introducing sparsity in neural activations. This data emphasizes the importance of evaluating both theoretical and practical performance when designing neural networks. For large-scale networks or real-time applications, ReLU is often the best choice due to its efficiency and scalability. However, for tasks requiring probabilistic outputs, such as classification, softmax remains indispensable despite its computational cost. Ultimately, the ideal activation function depends on the specific task, network architecture, and hardware environment.\n",
        "\n",
        "### Optimization Algorithms {#sec-ai-training-optimization-algorithms-3569}\n",
        "\n",
        "Optimization algorithms play an important role in neural network training by guiding the adjustment of model parameters to minimize a loss function. This process is fundamental to enabling neural networks to learn from data, and it involves finding the optimal set of parameters that yield the best model performance on a given task. Broadly, these algorithms can be divided into two categories: classical methods, which provide the theoretical foundation, and advanced methods, which introduce enhancements for improved performance and efficiency.\n",
        "\n",
        "These algorithms are responsible for navigating the complex, high-dimensional landscape of the loss function, identifying regions where the function achieves its lowest values. This task is challenging because the loss function surface is rarely smooth or simple, often characterized by local minima, saddle points, and sharp gradients. Effective optimization algorithms are designed to overcome these challenges, ensuring convergence to a solution that generalizes well to unseen data.[^fn-unseen]\n",
        "\n",
        "[^fn-unseen]: When training machine learning models, a portion of data should remain completely isolated from both training and validation to provide an unbiased assessment of final model performance. This held-out test set helps evaluate how well the model generalizes to truly unseen examples.\n",
        "\n",
        "The selection and design of optimization algorithms have significant system-level implications, such as computation efficiency, memory requirements, and scalability to large datasets or models. A deeper understanding of these algorithms is essential for addressing the trade-offs between accuracy, speed, and resource usage.\n",
        "\n",
        "#### Classical Methods {#sec-ai-training-classical-methods-d1ab}\n",
        "\n",
        "Modern neural network training relies on variations of gradient descent for parameter optimization. These approaches differ in how they process training data, leading to distinct system-level implications.\n",
        "\n",
        "##### Gradient Descent {#sec-ai-training-gradient-descent-6924}\n",
        "\n",
        "Gradient descent is the mathematical foundation of neural network training, iteratively adjusting parameters to minimize a loss function. The basic gradient descent algorithm computes the gradient of the loss with respect to each parameter, then updates parameters in the opposite direction of the gradient:\n",
        "$$ \\theta_{t+1} = \\theta_t - \\alpha \\nabla L(\\theta_t) $$\n",
        "\n",
        "In training systems, this mathematical operation translates into specific computational patterns. For each iteration, the system must:\n",
        "\n",
        "1. Compute forward pass activations\n",
        "2. Calculate loss value\n",
        "3. Compute gradients through backpropagation\n",
        "4. Update parameters using the gradient values\n",
        "\n",
        "The computational demands of gradient descent scale with both model size and dataset size. Consider a neural network with $M$ parameters training on $N$ examples. Computing gradients requires storing intermediate activations during the forward pass for use in backpropagation. These activations consume memory proportional to the depth of the network and the number of examples being processed.\n",
        "\n",
        "Traditional gradient descent processes the entire dataset in each iteration. For a training set with 1 million examples, computing gradients requires evaluating and storing results for each example before performing a parameter update. This approach poses significant system challenges:\n",
        "$$ \\text{Memory Required} = N \\times \\text{(Activation Memory + Gradient Memory)} $$\n",
        "\n",
        "The memory requirements often exceed available hardware resources on modern hardware. A ResNet-50 model processing ImageNet-scale datasets would require hundreds of gigabytes of memory using this approach. Additionally, processing the full dataset before each update creates long iteration times, reducing the rate at which the model can learn from the data.\n",
        "\n",
        "###### Stochastic Descent {#sec-ai-training-stochastic-descent-1088}\n",
        "\n",
        "These system constraints led to the development of variants that better align with hardware capabilities. The key insight was that exact gradient computation, while mathematically appealing, is not necessary for effective learning. This realization opened the door to methods that trade gradient accuracy for improved system efficiency.\n",
        "\n",
        "These system limitations motivated the development of more efficient optimization approaches. SGD is a big shift in the optimization strategy. Rather than computing gradients over the entire dataset, SGD estimates gradients using individual training examples:\n",
        "$$ \\theta_{t+1} = \\theta_t - \\alpha \\nabla L(\\theta_t; x_i, y_i) $$\n",
        "where $(x_i, y_i)$ represents a single training example. This approach drastically reduces memory requirements since only one example's activations and gradients need storage at any time. The stochastic nature of these updates introduces noise into the optimization process, but this noise often helps escape local minima and reach better solutions.\n",
        "\n",
        "However, processing single examples creates new system challenges. Modern accelerators achieve peak performance through parallel computation, processing multiple data elements simultaneously. Single-example updates leave most computing resources idle, resulting in poor hardware utilization. The frequent parameter updates also increase memory bandwidth requirements, as weights must be read and written for each example rather than amortizing these operations across multiple examples.\n",
        "\n",
        "##### Mini-batch Processing {#sec-ai-training-minibatch-processing-56a1}\n",
        "\n",
        "Mini-batch gradient descent emerges as a practical compromise between full-batch and stochastic methods. It computes gradients over small batches of examples, enabling parallel computations that align well with modern GPU architectures [@dean2012large].\n",
        "$$ \\theta_{t+1} = \\theta_t - \\alpha \\frac{1}{B} \\sum_{i=1}^B \\nabla L(\\theta_t; x_i, y_i) $$\n",
        "\n",
        "Mini-batch processing aligns well with modern hardware capabilities. Consider a training system using GPU hardware. These devices contain thousands of cores designed for parallel computation. Mini-batch processing allows these cores to simultaneously compute gradients for multiple examples, improving hardware utilization. The batch size B becomes a key system parameter, influencing both computational efficiency and memory requirements.\n",
        "\n",
        "The relationship between batch size and system performance follows clear patterns. Memory requirements scale linearly with batch size:\n",
        "$$ \\text{Memory Required} = B \\times \\text{(Activation Memory + Gradient Memory)} $$\n",
        "\n",
        "However, larger batches enable more efficient computation through improved parallelism. This creates a trade-off between memory constraints and computational efficiency. Training systems must select batch sizes that maximize hardware utilization while fitting within available memory.\n",
        "\n",
        "#### Advanced Optimization Algorithms {#sec-ai-training-advanced-optimization-algorithms-9eeb}\n",
        "\n",
        "Advanced optimization algorithms introduce mechanisms like momentum and adaptive learning rates[^fn-learn-rate] to improve convergence. These methods have been instrumental in addressing the inefficiencies of classical approaches [@kingma2014adam].\n",
        "\n",
        "[^fn-learn-rate]: **Learning rate**: A parameter that controls the size of parameter updates during training. A rate that is too high can cause training to diverge, while one that is too low leads to slow convergence. Finding the optimal learning rate is critical for efficient model training.\n",
        "\n",
        "##### Momentum-Based Methods {#sec-ai-training-momentumbased-methods-b91a}\n",
        "\n",
        "Momentum methods enhance gradient descent by accumulating a velocity vector across iterations. The momentum update equations introduce an additional term to track the history of parameter updates:\n",
        "\\begin{gather*}\n",
        "v_{t+1} = \\beta v_t + \\nabla L(\\theta_t)\n",
        "\\\\\n",
        "\\theta_{t+1} = \\theta_t - \\alpha v_{t+1}\n",
        "\\end{gather*}\n",
        "where $\\beta$ is the momentum coefficient, typically set between 0.9 and 0.99. From a systems perspective, momentum introduces additional memory requirements. The training system must maintain a velocity vector with the same dimensionality as the parameter vector, effectively doubling the memory needed for optimization state.\n",
        "\n",
        "##### Adaptive Learning Rate Methods {#sec-ai-training-adaptive-learning-rate-methods-d672}\n",
        "\n",
        "RMSprop modifies the basic gradient descent update by maintaining a moving average of squared gradients for each parameter:\n",
        "\\begin{gather*}\n",
        "s_t = \\gamma s_{t-1} + (1-\\gamma)\\big(\\nabla L(\\theta_t)\\big)^2\n",
        "\\\\\n",
        "\\theta_{t+1} = \\theta_t - \\alpha \\frac{\\nabla L(\\theta_t)}{\\sqrt{s_t + \\epsilon}}\n",
        "\\end{gather*}\n",
        "\n",
        "This per-parameter adaptation requires storing the moving average $s_t$, creating memory overhead similar to momentum methods. The element-wise operations in RMSprop also introduce additional computational steps compared to basic gradient descent.\n",
        "\n",
        "##### Adam Optimization {#sec-ai-training-adam-optimization-4f17}\n",
        "\n",
        "Adam combines concepts from both momentum and RMSprop, maintaining two moving averages for each parameter:\n",
        "\\begin{gather*}\n",
        "m_t = \\beta_1 m_{t-1} + (1-\\beta_1)\\nabla L(\\theta_t)\n",
        "\\\\\n",
        "v_t = \\beta_2 v_{t-1} + (1-\\beta_2)\\big(\\nabla L(\\theta_t)\\big)^2\n",
        "\\\\\n",
        "\\theta_{t+1} = \\theta_t - \\alpha \\frac{m_t}{\\sqrt{v_t + \\epsilon}}\n",
        "\\end{gather*}\n",
        "\n",
        "The system implications of Adam are more substantial than previous methods. The optimizer must store two additional vectors ($m_t$ and $v_t$) for each parameter, tripling the memory required for optimization state. For a model with 100 million parameters using 32-bit floating-point numbers, the additional memory requirement is approximately 800 MB.\n",
        "\n",
        "#### System Implications {#sec-ai-training-system-implications-a056}\n",
        "\n",
        "The practical implementation of both classical and advanced optimization methods requires careful consideration of system resources and hardware capabilities. Understanding these implications helps inform algorithm selection and system design choices.\n",
        "\n",
        "##### Trade-offs {#sec-ai-training-tradeoffs-c39d}\n",
        "\n",
        "The choice of optimization algorithm creates specific patterns of computation and memory access that influence training efficiency. Memory requirements increase progressively from basic gradient descent to more sophisticated methods:\n",
        "\\begin{gather*}\n",
        "\\text{Memory}_{\\text{SGD}} = \\text{Size}_{\\text{params}}\n",
        "\\\\\n",
        "\\text{Memory}_{\\text{Momentum}} = 2 \\times \\text{Size}_{\\text{params}}\n",
        "\\\\\n",
        "\\text{Memory}_{\\text{Adam}} = 3 \\times \\text{Size}_{\\text{params}}\n",
        "\\end{gather*}\n",
        "\n",
        "These memory costs must be balanced against convergence benefits. While Adam often requires fewer iterations to reach convergence, its per-iteration memory and computation overhead may impact training speed on memory-constrained systems.\n",
        "\n",
        "##### Implementation Considerations {#sec-ai-training-implementation-considerations-d2da}\n",
        "\n",
        "The efficient implementation of optimization algorithms in training frameworks hinges on strategic system-level considerations that directly influence performance. Key factors include memory bandwidth management, operation fusion techniques, and numerical precision optimization. These elements collectively determine the computational efficiency, memory utilization, and scalability of optimizers across diverse hardware architectures.\n",
        "\n",
        "Memory bandwidth presents the primary bottleneck in optimizer implementation. Modern frameworks address this through operation fusion, which reduces memory access overhead by combining multiple operations into a single kernel. For example, the Adam optimizerâs memory access requirements can grow linearly with parameter size when operations are performed separately:\n",
        "$$ \\text{Bandwidth}_{\\text{separate}} = 5 \\times \\text{Size}_{\\text{params}} $$\n",
        "\n",
        "However, fusing these operations into a single computational kernel significantly reduces the bandwidth requirement:\n",
        "$$ \\text{Bandwidth}_{\\text{fused}} = 2 \\times \\text{Size}_{\\text{params}} $$\n",
        "\n",
        "These techniques have been effectively demonstrated in systems like cuDNN and other GPU-accelerated frameworks that optimize memory bandwidth usage and operation fusion [@chetlur2014cudnn; @jouppi2017tpu].\n",
        "\n",
        "Memory access patterns also play an important role in determining the efficiency of cache utilization. Sequential access to parameter and optimizer state vectors maximizes cache hit rates and effective memory bandwidth. This principle is evident in hardware such as GPUs and tensor processing units (TPUs), where optimized memory layouts significantly improve performance [@jouppi2017tpu].\n",
        "\n",
        "Numerical precision represents another important tradeoff in implementation. Empirical studies have shown that optimizer states remain stable even when reduced precision formats, such as 16-bit floating-point (FP16), are used. Transitioning from 32-bit to 16-bit formats reduces memory requirements, as illustrated for the Adam optimizer:\n",
        "$$ \\text{Memory}_{\\text{Adam-FP16}} = \\frac{3}{2} \\times \\text{Size}_{\\text{params}} $$\n",
        "\n",
        "Mixed-precision training has been shown to achieve comparable accuracy while significantly reducing memory consumption and computational overhead [@micikevicius2018mixed; @krishnamoorthi2018quantizing].\n",
        "\n",
        "The above implementation factors determine the practical performance of optimization algorithms in deep learning systems, emphasizing the importance of tailoring memory, computational, and numerical strategies to the underlying hardware architecture [@chen2015mxnet].\n",
        "\n",
        "##### Optimizer Trade-offs {#sec-ai-training-optimizer-tradeoffs-f8bc}\n",
        "\n",
        "The evolution of optimization algorithms in neural network training reveals an important intersection between algorithmic efficiency and system performance. While optimizers were primarily developed to improve model convergence, their implementation significantly impacts memory usage, computational requirements, and hardware utilization.\n",
        "\n",
        "A deeper examination of popular optimization algorithms reveals their varying impacts on system resources. As shown in @tbl-optimizer-properties, each optimizer presents distinct trade-offs between memory usage, computational patterns, and convergence behavior. SGD maintains minimal memory overhead, requiring storage only for model parameters and current gradients. This lightweight memory footprint comes at the cost of slower convergence and potentially poor hardware utilization due to its sequential update nature.\n",
        "\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Property                      | SGD         | Momentum       | RMSprop           | Adam                              |\n",
        "+:==============================+:===========:+:==============:+:=================:+:=================================:+\n",
        "| Memory Overhead               | None        | Velocity terms | Squared gradients |Both velocity and squared gradients|\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Memory Cost                   | $1\\times$   | $2\\times$      | $2\\times$         | $3\\times$                         |\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Access Pattern                | Sequential  | Sequential     | Random            | Random                            |\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Operations/Parameter          | 2           | 3              | 4                 | 5                                 |\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Hardware Efficiency           | Low         | Medium         | High              | Highest                           |\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "| Convergence Speed             | Slowest     | Medium         | Fast              | Fastest                           |\n",
        "+-------------------------------+-------------+----------------+-------------------+-----------------------------------+\n",
        "\n",
        ": **Optimizer Memory Footprint**: Different optimization algorithms impose varying memory costs due to the storage of intermediate values like gradients, velocities, and squared gradients; understanding these trade-offs is crucial for resource-constrained deployments and large-scale model training. Selecting an optimizer involves balancing convergence speed with available memory and computational resources. {#tbl-optimizer-properties}\n",
        "\n",
        "Momentum methods introduce additional memory requirements by storing velocity terms for each parameter, doubling the memory footprint compared to SGD. This increased memory cost brings improved convergence through better gradient estimation, while maintaining relatively efficient memory access patterns. The sequential nature of momentum updates allows for effective hardware prefetching and cache utilization.\n",
        "\n",
        "RMSprop adapts learning rates per parameter by tracking squared gradient statistics. Its memory overhead matches momentum methods, but its computation patterns become more irregular. The algorithm requires additional arithmetic operations for maintaining running averages and computing adaptive learning rates, increasing computational intensity from 3 to 4 operations per parameter.\n",
        "\n",
        "Adam combines the benefits of momentum and adaptive learning rates, but at the highest system resource cost. @tbl-optimizer-properties reveals that it maintains both velocity terms and squared gradient statistics, tripling the memory requirements compared to SGD. The algorithm's computational patterns involve 5 operations per parameter update, though these operations often utilize hardware more effectively due to their regular structure and potential for parallelization.\n",
        "\n",
        "Training system designers must balance these trade-offs when selecting optimization strategies. Modern hardware architectures influence these decisions. GPUs excel at the parallel computations required by adaptive methods, while memory-constrained systems might favor simpler optimizers. The choice of optimizer affects not only training dynamics but also maximum feasible model size, achievable batch size, hardware utilization efficiency, and overall training time to convergence.\n",
        "\n",
        "Modern training frameworks continue to evolve, developing techniques like optimizer state sharding, mixed-precision storage, and fused operations to better balance these competing demands. Understanding these system implications helps practitioners make informed decisions about optimization strategies based on their specific hardware constraints and training requirements.\n",
        "\n",
        "### Backpropagation Mechanics {#sec-ai-training-backpropagation-mechanics-139c}\n",
        "\n",
        "The backpropagation algorithm computes gradients by systematically moving backward through a neural network's computational graph. While earlier discussions introduced backpropagation's mathematical principles, implementing this algorithm in training systems requires careful management of memory, computation, and data flow.\n",
        "\n",
        "#### Basic Mechanics {#sec-ai-training-basic-mechanics-b365}\n",
        "\n",
        "During the forward pass, each layer in a neural network performs computations and produces activations. These activations must be stored for use during the backward pass:\n",
        "\\begin{gather*}\n",
        "z^{(l)} = W^{(l)}a^{(l-1)} + b^{(l)}\n",
        "\\\\\n",
        "a^{(l)} = f(z^{(l)})\n",
        "\\end{gather*}\n",
        "where $z^{(l)}$ represents the pre-activation values and $a^{(l)}$ represents the activations at layer $l$. The storage of these intermediate values creates specific memory requirements that scale with network depth and batch size.\n",
        "\n",
        "The backward pass computes gradients by applying the chain rule, starting from the network's output and moving toward the input:\n",
        "\\begin{gather*}\n",
        "\\frac{\\partial L}{\\partial z^{(l)}}=\\frac{\\partial L}{\\partial a^{(l)}} \\odot f'(z^{(l)})\n",
        "\\\\\n",
        "\\frac{\\partial L}{\\partial W^{(l)}}=\\frac{\\partial L}{\\partial z^{(l)}}\\big(a^{(l-1)}\\big)^T\n",
        "\\end{gather*}\n",
        "\n",
        "Each gradient computation requires access to stored activations from the forward pass, creating a specific pattern of memory access and computation that training systems must manage efficiently.\n",
        "\n",
        "#### Backpropagation Mechanics {#sec-ai-training-backpropagation-mechanics-f431}\n",
        "\n",
        "Neural networks learn by adjusting their parameters to reduce errors. Backpropagation computes how much each parameter contributed to the error by systematically moving backward through the network's computational graph. This process forms the computational core of the optimization algorithms discussed earlier.\n",
        "\n",
        "For a network with parameters $W_i$ at each layer, we need to compute $\\frac{\\partial L}{\\partial W_i}$---how much the loss L changes when we adjust each parameter. The computation builds on the core operations covered earlier: matrix multiplications and activation functions, but in reverse order. The chain rule provides a systematic way to organize these computations:\n",
        "$$ \\frac{\\partial L_{full}}{\\partial L_{i}} = \\frac{\\partial A_{i}}{\\partial L_{i}} \\frac{\\partial L_{i+1}}{\\partial A_{i}} ... \\frac{\\partial A_{n}}{\\partial L_{n}} \\frac{\\partial L_{full}}{\\partial A_{n}} $$\n",
        "\n",
        "This equation reveals key requirements for training systems. Computing gradients for early layers requires information from all later layers, creating specific patterns in data storage and access. These patterns directly influence the efficiency of optimization algorithms like SGD or Adam discussed earlier. Modern training systems use autodifferentiation to handle these computations automatically, but the underlying system requirements remain the same.\n",
        "\n",
        "#### Memory Requirements {#sec-ai-training-memory-requirements-0044}\n",
        "\n",
        "Training systems must maintain intermediate values (activations) from the forward pass to compute gradients during the backward pass. This requirement compounds the memory demands we saw with optimization algorithms. For each layer l, the system must store:\n",
        "\n",
        "* Input activations from the forward pass\n",
        "* Output activations after applying layer operations\n",
        "* Layer parameters being optimized\n",
        "* Computed gradients for parameter updates\n",
        "\n",
        "Consider a batch of training examples passing through a network. The forward pass computes and stores:\n",
        "\\begin{gather*}\n",
        "z^{(l)} = W^{(l)}a^{(l-1)} + b^{(l)}\n",
        "\\\\\n",
        "a^{(l)} = f(z^{(l)})\n",
        "\\end{gather*}\n",
        "\n",
        "Both $z^{(l)}$ and $a^{(l)}$ must be cached for the backward pass. This creates a multiplicative effect on memory usage: each layer's memory requirement is multiplied by the batch size, and the optimizer's memory overhead (discussed in the previous section) applies to each parameter.\n",
        "\n",
        "The total memory needed scales with:\n",
        "\n",
        "* Network depth (number of layers)\n",
        "* Layer widths (number of parameters per layer)\n",
        "* Batch size (number of examples processed together)\n",
        "* Optimizer state (additional memory for algorithms like Adam)\n",
        "\n",
        "This creates a complex set of trade-offs. Larger batch sizes enable more efficient computation and better gradient estimates for optimization, but require proportionally more memory for storing activations. More sophisticated optimizers like Adam can achieve faster convergence but require additional memory per parameter.\n",
        "\n",
        "#### Memory-Computation Trade-offs {#sec-ai-training-memorycomputation-tradeoffs-d509}\n",
        "\n",
        "Training systems must balance memory usage against computational efficiency. Each forward pass through the network generates a set of activations that must be stored for the backward pass. For a neural network with $L$ layers, processing a batch of $B$ examples requires storing:\n",
        "$$ \\text{Memory per batch} = B \\times \\sum_{l=1}^L (s_l + a_l) $$\n",
        "where $s_l$ represents the size of intermediate computations (like $z^{(l)}$) and $a_l$ represents the activation outputs at layer l.\n",
        "\n",
        "This memory requirement compounds with the optimizer's memory needs discussed in the previous section. The total memory consumption of a training system includes both the stored activations and the optimizer state:\n",
        "$$ \\text{Total Memory} = \\text{Memory per batch} + \\text{Memory}_{\\text{optimizer}} $$\n",
        "\n",
        "To manage these substantial memory requirements, training systems use several sophisticated strategies. Gradient checkpointing is a basic approach, strategically recomputing some intermediate values during the backward pass rather than storing them. While this increases computational work, it can significantly reduce memory usage, enabling training of deeper networks or larger batch sizes on memory-constrained hardware [@chen2016training].\n",
        "\n",
        "The efficiency of these memory management strategies depends heavily on the underlying hardware architecture. GPU systems, with their high computational throughput but limited memory bandwidth, often encounter different bottlenecks than CPU systems. Memory bandwidth limitations on GPUs mean that even when sufficient storage exists, moving data between memory and compute units can become the primary performance constraint [@jouppi2017tpu].\n",
        "\n",
        "These hardware considerations guide the implementation of backpropagation in modern training systems. Specialized memory-efficient algorithms for operations like convolutions compute gradients in tiles or chunks, adapting to available memory bandwidth. Dynamic memory management tracks the lifetime of intermediate values throughout the computation graph, deallocating memory as soon as tensors become unnecessary for subsequent computations [@paszke2019pytorch].\n",
        "\n",
        "### System Implications {#sec-ai-training-system-implications-1335}\n",
        "\n",
        "Efficiently managing the forward pass, backward pass, and parameter updates requires a holistic understanding of how these operations interact with data loading, preprocessing pipelines, and hardware accelerators. For instance, matrix multiplications shape decisions about batch size, data parallelism, and memory allocation, while activation functions influence convergence rates and require careful trade-offs between computational efficiency and learning dynamics.\n",
        "\n",
        "These operations set the stage for addressing the challenges of training pipeline architecture. From designing workflows for data preprocessing to employing advanced techniques like mixed-precision training, gradient accumulation, and checkpointing, their implications are far-reaching.\n",
        "\n",
        "## Pipeline Architecture {#sec-ai-training-pipeline-architecture-78f0}\n",
        "\n",
        "A training pipeline is the framework that governs how raw data is transformed into a trained machine learning model. Within the confines of a single system, it orchestrates the steps necessary for data preparation, computational execution, and model evaluation. The design of such pipelines is critical to ensure that training is both efficient and reproducible, allowing machine learning workflows to operate reliably.\n",
        "\n",
        "As shown in @fig-training-pipeline, the training pipeline consists of three main components: the data pipeline for ingestion and preprocessing, the training loop that handles model updates, and the evaluation pipeline for assessing performance. These components work together in a coordinated manner, with processed batches flowing from the data pipeline to the training loop, and evaluation metrics providing feedback to guide the training process.\n",
        "\n",
        "::: {#fig-training-pipeline fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{ Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=3.0,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=30mm,\n",
        "    minimum width=30mm,\n",
        "    minimum height=20mm\n",
        "  },\n",
        "   Text/.style={%\n",
        "    inner sep=4pt,\n",
        "    draw=none,\n",
        "    line width=0.75pt,\n",
        "    fill=TextColor,\n",
        "    text=black,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=7mm, minimum height=5mm\n",
        "  },\n",
        "}\n",
        "\\node[Box](B1){\\textbf{Data Pipeline}\\\\ Ingestion, Preprocessing, Batching};\n",
        "\\node[Box,right=of B1](B2){\\textbf{Training Loop}\\\\ Forward Pass, Loss Calculation, Backward Pass};\n",
        "\\node[Box,right=of B2](B3){\\textbf{Evaluation Pipeline}\\\\ Validation and Metrics Computation};\n",
        "%\n",
        "\\draw[-latex,Line](B1)--node[Text]{Processed\\\\ Batches}(B2);\n",
        "\\draw[-latex,Line](B2.20)--node[Text]{Evaluation\\\\ Metrics}(B3.160);\n",
        "\\draw[latex-,Line](B2.340)--node[Text]{Feedback}(B3.200);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Pipeline Architecture**: Machine learning systems organize training through interconnected data, training, and evaluation pipelines, enabling iterative model refinement and performance assessment. Data flows sequentially through these components, with evaluation metrics providing feedback to optimize the training process and ensure reproducible results.\n",
        ":::\n",
        "\n",
        "### Architectural Overview {#sec-ai-training-architectural-overview-0290}\n",
        "\n",
        "The architecture of a training pipeline is organized around three interconnected components: the data pipeline, the training loop, and the evaluation pipeline. These components collectively process raw data, train the model, and assess its performance, ensuring that the training process is efficient and effective.\n",
        "\n",
        "The data pipeline initiates the process by ingesting raw data and transforming it into a format suitable for the model. This data is passed to the training loop, where the model performs its core computations to learn from the inputs. Periodically, the evaluation pipeline assesses the model's performance using a separate validation dataset. This modular structure ensures that each stage operates efficiently while contributing to the overall workflow.\n",
        "\n",
        "#### Data Pipeline {#sec-ai-training-data-pipeline-dab5}\n",
        "\n",
        "The data pipeline manages the ingestion, preprocessing, and batching of data for training. Raw data is typically loaded from local storage and transformed dynamically during training to avoid redundancy and enhance diversity. For instance, image datasets may undergo preprocessing steps like normalization, resizing, and augmentation to improve the robustness of the model. These operations are performed in real time to minimize storage overhead and adapt to the specific requirements of the task [@lecun1998efficient]. Once processed, the data is packaged into batches and handed off to the training loop.\n",
        "\n",
        "#### Training Loop {#sec-ai-training-training-loop-8c1e}\n",
        "\n",
        "The training loop is the computational core of the pipeline, where the model learns from the input data. @fig-training-loop illustrates this process, highlighting the forward pass, loss computation, and parameter updates on a single GPU:\n",
        "\n",
        "::: {#fig-training-loop fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\tikzset{%\n",
        "  mycylinder/.style={cylinder, shape border rotate=90, aspect=1.3, draw, fill=white,\n",
        "  minimum width=20mm,minimum height=9mm,line width=1pt},\n",
        "  mycycle/.style={circle, draw=none, fill=red, minimum width=5mm},\n",
        "  myline/.style={line width=1.15pt,draw=cyan},\n",
        "%\n",
        " Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    draw=RedLine,\n",
        "    line width=0.75pt,\n",
        "    fill=RedL!20,\n",
        "    text width=22mm,\n",
        "    minimum width=22mm, minimum height=8mm\n",
        "  },\n",
        "%\n",
        "Line/.style={line width=1.0pt,black!50}\n",
        "}\n",
        "\n",
        "\\begin{scope}[node distance=-1.7,local bounding box = SC1]]\n",
        "\\node[mycylinder,fill=red!30] (A) {};\n",
        "\\scoped[on background layer]\n",
        "\\node[mycylinder, above=of A,fill=red!50] (C) {};\n",
        "\\node[mycylinder, below=of A,fill=red!10] (B) {};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(3.75,0.9))},local bounding box = SC2]\n",
        "\\node[mycycle] (C1) {};\n",
        "\\node[mycycle,below=of C1] (C2) {};\n",
        "\\node[mycycle,below=of C2] (C3) {};\n",
        "\\node[mycycle,below=of C3] (C4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C1)!0.5!(C2)$] (CL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C2)!0.5!(C3)$] (CL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C3)!0.5!(C4)$] (CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(C1)!0.4!(C3)$] (CD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(C2)!0.6!(C4)$] (CD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {CL1, CL2, CL3, CD1, CD2} {\n",
        "    \\draw[myline] (\\y) -- (C\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,below=0.8 of C4](B1){GPU 1};\n",
        "\\draw[myline,dashed](C4)--(B1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(11.5,0.9))},local bounding box = SC3]\n",
        "\\node[mycycle] (3C1) {};\n",
        "\\node[mycycle,below=of 3C1] (3C2) {};\n",
        "\\node[mycycle,below=of 3C2] (3C3) {};\n",
        "\\node[mycycle,below=of 3C3] (3C4) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C1)!0.5!(3C2)$] (3CL1) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C2)!0.5!(3C3)$] (3CL2) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C3)!0.5!(3C4)$] (3CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,left=0.6 of $(3C1)!0.4!(3C3)$] (3CD1) {};\n",
        "\\node[mycycle,fill=green,left=0.6 of $(3C2)!0.6!(3C4)$] (3CD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {3CL1, 3CL2, 3CL3, 3CD1, 3CD2} {\n",
        "    \\draw[myline] (\\y) -- (3C\\x);\n",
        "  }\n",
        "}\n",
        "\n",
        "\\node[Box,below=0.8 of 3C4](3B1){GPU 1};\n",
        "\\draw[myline,dashed](3C4)--(3B1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(17,0.9))},local bounding box = SC4]\n",
        "\\node[mycycle] (4C1) {};\n",
        "\\node[mycycle,below=of 4C1] (4C2) {};\n",
        "\\node[mycycle,below=of 4C2] (4C3) {};\n",
        "\\node[mycycle,below=of 4C3] (4C4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C1)!0.5!(4C2)$] (4CL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C2)!0.5!(4C3)$] (4CL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C3)!0.5!(4C4)$] (4CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(4C1)!0.4!(4C3)$] (4CD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(4C2)!0.6!(4C4)$] (4CD2) {};\n",
        "%\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {4CL1, 4CL2, 4CL3, 4CD1, 4CD2} {\n",
        "    \\draw[myline] (\\y) -- (4C\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,below=0.8 of 4C4](4B1){GPU 1};\n",
        "\\draw[myline,dashed](4C4)--(4B1);\n",
        "\\end{scope}\n",
        "\\coordinate(X)at($(CD1)!0.5!(CD2)$);\n",
        "\\coordinate(Y)at($(3CD1)!0.5!(3CD2)$);\n",
        "\n",
        "\\node[fill=white,minimum height=45](ER)at($(X)!0.3!(Y)$){Error};\n",
        "\\node[fill=white,align=center,minimum height=45](CO)at($(X)!0.7!(Y)$){Compute\\\\ loss\\\\ function};\n",
        "\\draw[myline,-latex,shorten <=3mm](X)--(ER.west);\n",
        "\\draw[myline,-latex](ER.east)--(CO.west);\n",
        "\\draw[myline,-latex,shorten >=3mm](CO.east)--(Y);\n",
        "\\draw[myline,dashed](CO.south)--++(270:1)-|node[fill=white,align=center,\n",
        "pos=0.25](COM){Compare\\\\ predicted\\\\ label with\\\\ annotation}\n",
        "(ER.south);\n",
        "\n",
        "\\node[fill=white,minimum height=45](OP)at($(3CL2)!0.5!(4CL2)$){Optimizer};\n",
        "\\draw[myline,-latex,shorten <=1mm](3CL2)--(OP.west);\n",
        "\\draw[myline,latex-,shorten <=1mm](4CL2)--(OP.east);\n",
        "%\n",
        "\\draw[myline,latex-,shorten <=3mm,shorten >=3mm](CL2)--(SC1.east|-CL2);\n",
        "%\n",
        "\\draw[myline,dashed](OP.north)--++(90:1.7)coordinate(OP1);\n",
        "\\draw[myline,dashed]($(ER.north east)!0.5!(CO.north west)$)--++(90:1.7)coordinate(ER1);\n",
        "\\coordinate (C) at ($(OP1) + (0,5mm)$);\n",
        "\\coordinate (B) at ($(ER1) + (0,5mm)$);\n",
        "\\path[red](C)-|coordinate(D1)(4CD1);\n",
        "\\path[red](B)-|coordinate(A1)(SC1);\n",
        "\\coordinate (D) at ($(D1) + (15mm,0)$);\n",
        "\\coordinate (A) at ($(A1) + (-15mm,0)$);\n",
        "\\draw[myline,dashed,shorten >=3mm,shorten <=3mm](B)--\n",
        "node[fill=white]{Step 2 -- Compute gradients}(C);\n",
        "\\draw[myline,dashed,shorten >=3mm,pos=0.46](C)--\n",
        "node[fill=white]{Step 3 -- Update Parameters}(D);\n",
        "\\draw[myline,dashed,shorten >=3mm,pos=0.46](B)--\n",
        "node[fill=white]{Step 1 -- Predict a label}(A);\n",
        "\n",
        "\\node[above=0.3 of SC1]{Data set};\n",
        "\\node[above=0.3 of SC2]{Forward pass};\n",
        "\\node[above=0.3 of SC3]{Backward pass};\n",
        " \\end{tikzpicture}\n",
        "```\n",
        "**GPU-Accelerated Training**: Modern deep learning relies on gpus to parallelize matrix operations, significantly accelerating the forward and backward passes required for parameter updates during training. This single-GPU workflow iteratively refines model parameters by computing gradients from loss functions and applying them to minimize prediction errors.\n",
        ":::\n",
        "\n",
        "Each iteration of the training loop involves several key steps:\n",
        "\n",
        "1. **Step 1 â Forward Pass**: A batch of data from the dataset is passed through the neural network on the GPU to generate predictions. The model applies matrix multiplications and activation functions to transform the input into meaningful outputs.\n",
        "\n",
        "2. **Step 2 â Compute Gradients**: The predicted values are compared with the ground truth labels to compute the error using a loss function. The loss function outputs a scalar value that quantifies the model's performance. This error signal is then propagated backward through the network using backpropagation, which applies the chain rule of differentiation to compute gradients for each layerâs parameters. These gradients indicate the necessary adjustments required to minimize the loss.\n",
        "\n",
        "3. **Step 3 â Update Parameters**: The computed gradients are passed to an optimizer, which updates the modelâs parameters to minimize the loss. Different optimization algorithms, such as SGD or Adam, influence how the parameters are adjusted. The choice of optimizer impacts convergence speed and stability.\n",
        "\n",
        "This process repeats iteratively across multiple batches and epochs, gradually refining the model to improve its predictive accuracy.\n",
        "\n",
        "#### Evaluation Pipeline {#sec-ai-training-evaluation-pipeline-5401}\n",
        "\n",
        "The evaluation pipeline provides periodic feedback on the model's performance during training. Using a separate validation dataset, the model's predictions are compared against known outcomes to compute metrics such as accuracy or loss. These metrics help to monitor progress and detect issues like overfitting or underfitting. Evaluation is typically performed at regular intervals, such as at the end of each epoch, ensuring that the training process aligns with the desired objectives.\n",
        "\n",
        "#### Component Integration {#sec-ai-training-component-integration-3e05}\n",
        "\n",
        "The data pipeline, training loop, and evaluation pipeline are tightly integrated to ensure a smooth and efficient workflow. Data preparation often overlaps with computation, such as when preprocessing the next batch while the current batch is being processed in the training loop. Similarly, the evaluation pipeline operates in tandem with training, providing insights that inform adjustments to the model or training procedure. This integration minimizes idle time for the system's resources and ensures that training proceeds without interruptions.\n",
        "\n",
        "### Data Pipeline {#sec-ai-training-data-pipeline-5abd}\n",
        "\n",
        "The data pipeline moves data from storage to computational devices during training. Like a highway system moving vehicles from neighborhoods to city centers, the data pipeline transports training data through multiple stages to reach computational resources.\n",
        "\n",
        "::: {#fig-data-pipeline fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line width=0.75pt,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "%\n",
        "\\tikzset{ Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=0.7,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    minimum width=22mm, minimum height=10mm\n",
        "  },\n",
        " Text/.style={%\n",
        "    inner sep=2pt,\n",
        "    draw=none,\n",
        "    line width=0.75pt,\n",
        "    fill=TextColor,\n",
        "    text=black,\n",
        "    font=\\small\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=7mm, minimum height=5mm\n",
        "  },\n",
        "}\n",
        "%\n",
        "\\node[Box,fill=RedL,draw=RedLine](B1){Raw Data};\n",
        "\\node[Box,node distance=1.3,right=of B1](B2){Format};\n",
        "\\node[Box,right=of B2](B3){Process};\n",
        "\\node[Box,right=of B3](B4){Batch};\n",
        "\\node[Box,node distance=2.2,right=of B4,fill=GreenL,draw=GreenLine](B6){GPU 2};\n",
        "\\node[Box,above=of B6,fill=GreenL,draw=GreenLine](B5){GPU 1};\n",
        "\\node[Box,below=of B6,fill=GreenL,draw=GreenLine](B7){GPU 3};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=11,inner ysep=43,yshift=0mm,\n",
        "           fill=BackColor,fit=(B1),line width=0.75pt](BB1){};\n",
        "\\node[below=3pt of  BB1.north,anchor=north]{Storage Zone};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=11,inner ysep=43,yshift=0mm,\n",
        "           fill=BackColor,fit=(B2)(B3)(B4),line width=0.75pt](BB1){};\n",
        "\\node[below=3pt of  BB1.north,anchor=north]{CPU Preprocessing Zone};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=11,inner ysep=20,yshift=2mm,\n",
        "           fill=BackColor,fit=(B5)(B6)(B7),line width=0.75pt](BB1){};\n",
        "\\node[below=3pt of  BB1.north,anchor=north]{GPU Training Zone};\n",
        "\n",
        "\\foreach \\x in{1,2,3}\n",
        "\\pgfmathtruncatemacro{\\newX}{\\x + 1}\n",
        "\\draw[-latex,Line](B\\x)--(B\\newX);\n",
        "%\n",
        "\\draw[-latex,Line](B4)|-node[Text,pos=0.84]{Data}(B5);\n",
        "\\draw[-latex,Line](B4)|-node[Text,pos=0.84]{Data}(B7);\n",
        "\\draw[-latex,Line](B4)--node[Text,pos=0.5]{Data}(B6);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Data Pipeline Architecture**: Modern machine learning systems utilize pipelines to efficiently move data from storage to gpus for parallel processing, enabling faster model training and inference. This diagram presents a typical pipeline with stages for formatting, preprocessing, batching, and distributing data across multiple GPU workers.\n",
        ":::\n",
        "\n",
        "The data pipeline running on the CPU serves as a bridge between raw data storage and GPU computation. As shown in @fig-data-pipeline, the pipeline consists of three main zones: storage, CPU preprocessing, and GPU training. Each zone plays a distinct role in preparing and delivering data for model training.\n",
        "\n",
        "In the storage zone, raw data resides on disk, typically in formats like image files for computer vision tasks or text files for natural language processing. The CPU preprocessing zone handles the transformation of this raw data through multiple stages. For example, in an image recognition model, these stages include:\n",
        "\n",
        "1. Format conversion: Reading image files and converting them to standardized formats\n",
        "2. Processing: Applying operations like resizing, normalization, and data augmentation\n",
        "3. Batching: Organizing processed examples into batches for efficient GPU computation\n",
        "\n",
        "The final zone shows multiple GPUs receiving preprocessed batches for training. This organization ensures that each GPU maintains a steady supply of data, maximizing computational efficiency and minimizing idle time. The effectiveness of this pipeline directly impacts training performance, as any bottleneck in data preparation can leave expensive GPU resources underutilized.\n",
        "\n",
        "#### Core Components {#sec-ai-training-core-components-0f14}\n",
        "\n",
        "The performance of machine learning systems is fundamentally constrained by storage access speed, which determines the rate at which training data can be retrieved. This access speed is governed by two primary hardware constraints: disk bandwidth and network bandwidth. The maximum theoretical throughput is determined by the following relationship:\n",
        "$$T_{\\text{storage}} =\\min(B_{\\text{disk}}, B_{\\text{network}})$$\n",
        "where $B_{\\text{disk}}$ is the physical disk bandwidth (the rate at which data can be read from storage devices) and $B_{\\text{network}}$ represents the network bandwidth (the rate of data transfer across distributed storage systems). Both quantities are measured in bytes per second.\n",
        "\n",
        "However, the actual throughput achieved during training operations typically falls below this theoretical maximum due to non-sequential data access patterns. The effective throughput can be expressed as:\n",
        "$$T_{\\text{effective}} = T_{\\text{storage}} \\times F_{\\text{access}}$$\n",
        "where $F_{\\text{access}}$ represents the access pattern factor. In typical training scenarios, $F_{\\text{access}}$ approximates 0.1, indicating that effective throughput achieves only 10% of the theoretical maximum. This significant reduction occurs because storage systems are optimized for sequential access patterns rather than the random access patterns common in training procedures.\n",
        "\n",
        "This relationship between theoretical and effective throughput has important implications for system design and training optimization. Understanding these constraints allows practitioners to make informed decisions about data pipeline architecture and training methodology.\n",
        "\n",
        "#### Preprocessing {#sec-ai-training-preprocessing-59e1}\n",
        "\n",
        "As the data becomes available, data preprocessing transforms raw input data into a format suitable for model training. This process, traditionally implemented through Extract-Transform-Load (ETL) or Extract-Load-Transform (ELT) pipelines, is a critical determinant of training system performance. The throughput of preprocessing operations can be expressed mathematically as:\n",
        "$$T_{\\text{preprocessing}} = \\frac{N_{\\text{workers}}}{t_{\\text{transform}}}$$\n",
        "\n",
        "This equation captures two key factors:\n",
        "\n",
        "* $N_{\\text{workers}}$ represents the number of parallel processing threads\n",
        "* $t_{\\text{transform}}$ represents the time required for each transformation operation\n",
        "\n",
        "Modern training architectures employ multiple processing threads to ensure preprocessing keeps pace with the consumption rates. This parallel processing approach is essential for maintaining efficient high processor utilization.\n",
        "\n",
        "The final stage of preprocessing involves transferring the processed data to computational devices (typically GPUs). The overall training throughput is constrained by three factors, expressed as:\n",
        "$$T_{\\text{training}} =\\min(T_{\\text{preprocessing}}, B_{\\text{GPU\\_transfer}}, B_{\\text{GPU\\_compute}})$$\n",
        "where:\n",
        "\n",
        "* $B_{\\text{GPU\\_transfer}}$ represents GPU memory bandwidth\n",
        "* $B_{\\text{GPU\\_compute}}$ represents GPU computational throughput\n",
        "\n",
        "This relationship illustrates a fundamental principle in training system design: the system's overall performance is limited by its slowest component. Whether preprocessing speed, data transfer rates, or computational capacity, the bottleneck stage determines the effective training throughput of the entire system. Understanding these relationships enables system architects to design balanced training pipelines where preprocessing capacity aligns with computational resources, ensuring optimal resource utilization.\n",
        "\n",
        "#### System Implications {#sec-ai-training-system-implications-1486}\n",
        "\n",
        "The relationship between data pipeline architecture and computational resources fundamentally determines the performance of machine learning training systems. This relationship can be simply expressed through a basic throughput equation:\n",
        "$$T_{\\text{system}} =\\min(T_{\\text{pipeline}}, T_{\\text{compute}})$$\n",
        "where $T_{\\text{system}}$ represents the overall system throughput, constrained by both pipeline throughput ($T_{\\text{pipeline}}$) and computational speed ($T_{\\text{compute}}$).\n",
        "\n",
        "To illustrate these constraints, consider image classification systems. The performance dynamics can be analyzed through two critical metrics. The GPU Processing Rate ($R_{\\text{GPU}}$) represents the maximum number of images a GPU can process per second, determined by model architecture complexity and GPU hardware capabilities. The Pipeline Delivery Rate ($R_{\\text{pipeline}}$) is the rate at which the data pipeline can deliver preprocessed images to the GPU.\n",
        "\n",
        "In this case, at a high level, the system's effective training speed is governed by the lower of these two rates. When $R_{\\text{pipeline}}$ is less than $R_{\\text{GPU}}$, the system experiences underutilization of GPU resources. The degree of GPU utilization can be expressed as:\n",
        "$$\\text{GPU Utilization} = \\frac{R_{\\text{pipeline}}}{R_{\\text{GPU}}} \\times 100\\%$$\n",
        "\n",
        "Let us consider an example. A ResNet-50 model implemented on modern GPU hardware might achieve a processing rate of 1000 images per second. However, if the data pipeline can only deliver 200 images per second, the GPU utilization would be merely 20%, meaning the GPU remains idle 80% of the time. This results in significantly reduced training efficiency. Importantly, this inefficiency persists even with more powerful GPU hardware, as the pipeline throughput becomes the limiting factor in system performance. This demonstrates why balanced system design, where pipeline and computational capabilities are well-matched, is crucial for optimal training performance.\n",
        "\n",
        "#### Data Flows {#sec-ai-training-data-flows-d5ea}\n",
        "\n",
        "Machine learning systems manage complex data flows through multiple memory tiers while coordinating pipeline operations. The interplay between memory bandwidth constraints and pipeline execution directly impacts training performance. The maximum data transfer rate through the memory hierarchy is bounded by:\n",
        "$$T_{\\text{memory}} =\\min(B_{\\text{storage}}, B_{\\text{system}}, B_{\\text{accelerator}})$$\n",
        "Where bandwidth varies significantly across tiers:\n",
        "\n",
        "* Storage ($B_{\\text{storage}}$): NVMe storage devices provide 1-2 GB/s\n",
        "* System ($B_{\\text{system}}$): Main memory transfers data at 50-100 GB/s\n",
        "* Accelerator ($B_{\\text{accelerator}}$): GPU memory achieves 900 GB/s or higher\n",
        "\n",
        "These order-of-magnitude differences create distinct performance characteristics that must be carefully managed. The total time required for each training iteration comprises multiple pipelined operations:\n",
        "$$t_{\\text{iteration}} =\\max(t_{\\text{fetch}}, t_{\\text{process}}, t_{\\text{transfer}})$$\n",
        "\n",
        "This equation captures three components: storage read time ($t_{\\text{fetch?}}$), preprocessing time ($t_{\\text{process}}$), and accelerator transfer time ($t_{\\text{transfer}}$).\n",
        "\n",
        "Modern training architectures optimize performance by overlapping these operations. When one batch undergoes preprocessing, the system simultaneously fetches the next batch from storage while transferring the previously processed batch to accelerator memory.\n",
        "\n",
        "This coordinated movement requires precise management of system resources, particularly memory buffers and processing units. The memory hierarchy must account for bandwidth disparities while maintaining continuous data flow. Effective pipelining minimizes idle time and maximizes resource utilization through careful buffer sizing and memory allocation strategies. The successful orchestration of these components enables efficient training across the memory hierarchy while managing the inherent bandwidth constraints of each tier.\n",
        "\n",
        "#### Practical Architectures {#sec-ai-training-practical-architectures-281b}\n",
        "\n",
        "The ImageNet dataset serves as a canonical example for understanding data pipeline requirements in modern machine learning systems. This analysis examines system performance characteristics when training vision models on large-scale image datasets.\n",
        "\n",
        "Storage performance in practical systems follows a defined relationship between theoretical and practical throughput:\n",
        "$$T_{\\text{practical}} = 0.5 \\times B_{\\text{theoretical}}$$\n",
        "\n",
        "To illustrate this relationship, consider an NVMe storage device with 3GB/s theoretical bandwidth. Such a device achieves approximately 1.5GB/s sustained read performance. However, the random access patterns required for training data shuffling further reduce this effective bandwidth by 90%. System designers must account for this reduction through careful memory buffer design.\n",
        "\n",
        "The total memory requirements for the system scale with batch size according to the following relationship:\n",
        "$$M_{\\text{required}} = (B_{\\text{prefetch}} + B_{\\text{processing}} + B_{\\text{transfer}}) \\times S_{\\text{batch}}$$\n",
        "\n",
        "In this equation, $B_{\\text{prefetch}}$ represents memory allocated for data prefetching, $B_{\\text{processing}}$ represents memory required for active preprocessing operations, $B_{\\text{transfer}}$ represents memory allocated for accelerator transfers, and $S_{\\text{batch}}$ represents the training batch size.\n",
        "\n",
        "Preprocessing operations introduce additional computational requirements. Common operations such as image resizing, augmentation, and normalization consume CPU resources. These preprocessing operations must satisfy a fundamental time constraint:\n",
        "$$t_{\\text{preprocessing}} < t_{\\text{GPU\\_compute}}$$\n",
        "\n",
        "This inequality plays a crucial role in determining system efficiency. When preprocessing time exceeds GPU computation time, accelerator utilization decreases proportionally. The relationship between preprocessing and computation time thus establishes fundamental efficiency limits in training system design.\n",
        "\n",
        "### Forward Pass {#sec-ai-training-forward-pass-afc3}\n",
        "\n",
        "The forward pass is the phase where input data propagates through the model, layer by layer, to generate predictions. Each layer performs mathematical operations such as matrix multiplications and activations, progressively transforming the data into meaningful outputs. While the conceptual flow of the forward pass is straightforward, it poses several system-level challenges that are critical for efficient execution.\n",
        "\n",
        "#### Compute Operations {#sec-ai-training-compute-operations-b199}\n",
        "\n",
        "The forward pass in deep neural networks orchestrates a diverse set of computational patterns, each optimized for specific neural network operations. Understanding these patterns and their efficient implementation is fundamental to machine learning system design.\n",
        "\n",
        "At their core, neural networks rely heavily on matrix multiplications, particularly in fully connected layers. The basic transformation follows the form:\n",
        "$$\n",
        "z^{(l)} = W^{(l)}a^{(l-1)} + b^{(l)}\n",
        "$$\n",
        "\n",
        "Here, $W^{(l)}$ represents the weight matrix, $a^{(l-1)}$ contains activations from the previous layer, and $b^{(l)}$ is the bias vector. For a layer with $N$ neurons in the current layer and $M$ neurons in the previous layer, processing a batch of $B$ samples requires $N \\times M \\times B$ floating-point operations. A typical layer with dimensions of $512\\times1024$ processing a batch of 64 samples executes over 33 million operations.\n",
        "\n",
        "Modern neural architectures extend beyond these basic matrix operations to include specialized computational patterns. Convolutional networks, for instance, perform systematic kernel operations across input tensors. Consider a typical input tensor of dimensions $64 \\times 224 \\times 224 \\times 3$ (batch size $\\times$ height $\\times$ width $\\times$ channels) processed by $7 \\times 7$ kernels. Each position requires 147 multiply-accumulate operations, and with 64 filters operating across $218 \\times 218$ spatial dimensions, the computational demands become substantial.\n",
        "\n",
        "Transformer architectures introduce attention mechanisms, which compute similarity scores between sequences. These operations combine matrix multiplications with softmax normalization, requiring efficient broadcasting and reduction operations across varying sequence lengths. The computational pattern here differs significantly from convolutions, demanding flexible execution strategies from hardware accelerators.\n",
        "\n",
        "Throughout these networks, element-wise operations play a crucial supporting role. Activation functions like ReLU and sigmoid transform values independently. While conceptually simple, these operations can become bottlenecked by memory bandwidth rather than computational capacity, as they perform relatively few calculations per memory access. Batch normalization presents similar challenges, computing statistics and normalizing values across batch dimensions while creating synchronization points in the computation pipeline.\n",
        "\n",
        "Modern hardware accelerators, particularly GPUs, optimize these diverse computations through massive parallelization. However, achieving peak performance requires careful attention to hardware architecture. GPUs process data in fixed-size blocks of threads called warps (in NVIDIA architectures) or wavefronts (in AMD architectures). Peak efficiency occurs when matrix dimensions align with these hardware-specific sizes. For instance, NVIDIA GPUs typically achieve optimal performance when processing matrices aligned to $32\\times32$ dimensions.\n",
        "\n",
        "Libraries like [cuDNN](https://developer.nvidia.com/cudnn) address these challenges by providing optimized implementations for each operation type. These systems dynamically select algorithms based on input dimensions, hardware capabilities, and memory constraints. The selection process balances computational efficiency with memory usage, often requiring empirical measurement to determine optimal configurations for specific hardware setups.\n",
        "\n",
        "The relationship between batch size and hardware utilization illuminates these trade-offs. When batch size decreases from 32 to 16, GPU utilization often drops due to incomplete warp occupation. While larger batch sizes improve hardware utilization, memory constraints in modern architectures may necessitate smaller batches, creating a fundamental tension between computational efficiency and memory usage. This balance exemplifies a central challenge in machine learning systems: maximizing computational throughput within hardware resource constraints.\n",
        "\n",
        "#### Memory Management {#sec-ai-training-memory-management-89f1}\n",
        "\n",
        "Memory management is a critical challenge in general, but it is particularly crucial during the forward pass when intermediate activations must be stored for subsequent backward propagation. The total memory footprint grows with both network depth and batch size, following a basic relationship.\n",
        "$$\n",
        "\\text{Total Memory} \\sim B \\times \\sum_{l=1}^{L} A_l\n",
        "$$\n",
        "where $B$ represents the batch size, $L$ is the number of layers, and $A_l$ represents the activation size at layer $l$. This simple equation masks considerable complexity in practice.\n",
        "\n",
        "Consider ResNet-50 processing images at $224\\times224$ resolution with a batch size of 32. The initial convolutional layer produces activation maps of dimension $112\\times112\\times64$. Using single-precision floating-point format (4 bytes per value), this single layer's activation storage requires approximately 98 MB. As the network progresses through its 50 layers, the dimensions of these activation maps change, typically decreasing in spatial dimensions while increasing in channel depth, creating a cumulative memory demand that can reach several gigabytes.\n",
        "\n",
        "Modern GPUs typically provide between 16 and 24 GB of memory, which must accommodate not just these activations but also model parameters, gradients, and optimization states. This constraint has motivated several memory management strategies:\n",
        "\n",
        "Activation checkpointing trades computational cost for memory efficiency by strategically discarding and recomputing activations during the backward pass. Rather than storing all intermediate values, the system maintains checkpoints at selected layers. During backpropagation, it regenerates necessary activations from these checkpoints. While this approach can reduce memory usage by 50% or more, it typically increases computation time by 20-30%.\n",
        "\n",
        "Mixed precision training offers another approach to memory efficiency. By storing activations in half-precision (FP16) format instead of single-precision (FP32), memory requirements are immediately halved. Modern hardware architectures provide specialized support for these reduced-precision operations, often maintaining computational throughput while saving memory.\n",
        "\n",
        "The relationship between batch size and memory usage creates practical trade-offs in training regimes. While larger batch sizes can improve computational efficiency, they proportionally increase memory demands. A machine learning practitioner might start with large batch sizes during initial development on smaller networks, then adjust downward when scaling to deeper architectures or when working with memory-constrained hardware.\n",
        "\n",
        "This memory management challenge becomes particularly acute in state-of-the-art models. Recent transformer architectures can require tens of gigabytes just for activations, necessitating sophisticated memory management strategies or distributed training approaches. Understanding these memory constraints and management strategies proves essential for designing and deploying machine learning systems effectively.\n",
        "\n",
        "### Backward Pass {#sec-ai-training-backward-pass-28bc}\n",
        "\n",
        "#### Compute Operations {#sec-ai-training-compute-operations-a994}\n",
        "\n",
        "The backward pass involves processing parameter gradients in reverse order through the network's layers. Computing these gradients requires matrix operations that demand significant memory and processing power.\n",
        "\n",
        "Neural networks store activation values from each layer during the forward pass. Computing gradients combines these stored activations with gradient signals to generate weight updates. This design requires twice the memory compared to forward computation. Consider the gradient computation for a layer's weights:\n",
        "$$\n",
        "\\frac{\\partial L}{\\partial W^{(l)}} = \\delta^{(l)} \\cdot \\left(a^{(l-1)}\\right)^T\n",
        "$$\n",
        "\n",
        "The gradient signals $\\delta^{(l)}$ at layer $l$ multiply with transposed activations $a^{(l-1)}$ from layer $l-1$. This matrix multiplication forms the primary computational load. For example, in a layer with 1000 input features and 100 output features, computing gradients requires multiplying matrices of size 100 $\\times$ batch_size and batch_size $\\times$ 1000, resulting in millions of floating-point operations.\n",
        "\n",
        "#### Memory Operations {#sec-ai-training-memory-operations-bad1}\n",
        "\n",
        "The backward pass moves large amounts of data between memory and compute units. Each time a layer computes gradients, it orchestrates a sequence of memory operations. The GPU first loads stored activations from memory, then reads incoming gradient signals, and finally writes the computed gradients back to memory.\n",
        "\n",
        "To understand the scale of these memory transfers, consider a convolutional layer processing a batch of 64 images. Each image measures $224\\times 224$ pixels with 3 color channels. The activation maps alone occupy 0.38 GB of memory, storing 64 copies of the input images. The gradient signals expand this memory usage significantly - they require 8.1 GB to hold gradients for each of the layer's 64 filters. Even the weight gradients, which only store updates for the convolutional kernels, need 0.037 GB[^fn-calc-mem].\n",
        "\n",
        "[^fn-calc-mem]: Memory calculations:\n",
        " <ul>\n",
        "    <li>â Activation maps:</li>\n",
        "    <li>64 Ã 224 Ã 224 Ã 3 Ã 4 bytes = 0.38&nbsp;GB</li>\n",
        "    <li>â Gradient signals:</li>\n",
        "    <li>64 Ã 224 Ã 224 Ã 64 Ã 4 bytes = 8.1&nbsp;GB</li>\n",
        "    <li>â Weight gradients:</li>\n",
        "    <li>7 Ã 7 Ã 3 Ã 64 Ã 4 bytes = 0.037 GB</li>\n",
        "  </ul>\n",
        "\n",
        "Moreover, the backward pass in neural networks require coordinated data movement through a hierarchical memory system. During backpropagation, each computation requires specific activation values from the forward pass, creating a pattern of data movement between memory levels. This movement pattern shapes the performance characteristics of neural network training.\n",
        "\n",
        "These backward pass computations operate across a memory hierarchy that balances speed and capacity requirements. When computing gradients, the processor must retrieve activation values stored in high-bandwidth memory (HBM) or system memory, transfer them to fast static RAM (SRAM) for computation, and write results back to larger storage. Each gradient calculation triggers this sequence of memory transfers, making memory access patterns a key factor in backward pass performance. The frequent transitions between memory levels introduce latency that accumulates across the backward pass computation chain.\n",
        "\n",
        "#### Real-World Considerations {#sec-ai-training-realworld-considerations-3b2d}\n",
        "\n",
        "Consider training a ResNet-50 model on the ImageNet dataset with a batch of 64 images. The first convolutional layer applies 64 filters of size $7 \\times 7$ to RGB images sized $224\\times 224$. During the backward pass, this single layer's computation requires:\n",
        "$$\n",
        "\\text{Memory per image} = 224 \\times 224 \\times 64 \\times 4 \\text{ bytes}\n",
        "$$\n",
        "\n",
        "The total memory requirement multiplies by the batch size of 64, reaching approximately 3.2 GB just for storing gradients. When we add memory for activations, weight updates, and intermediate computations, a single layer approaches the memory limits of many GPUs.\n",
        "\n",
        "Deeper in the network, layers with more filters demand even greater resources. A mid-network convolutional layer might use 256 filters, quadrupling the memory and computation requirements. The backward pass must manage these resources while maintaining efficient computation. Each layer's computation can only begin after receiving gradient signals from the subsequent layer, creating a strict sequential dependency in memory usage and computation patterns.\n",
        "\n",
        "This dependency means the GPU must maintain a large working set of memory throughout the backward pass. As gradients flow backward through the network, each layer temporarily requires peak memory usage during its computation phase. The system cannot release this memory until the layer completes its gradient calculations and passes the results to the previous layer.\n",
        "\n",
        "### Parameter Updates and Optimizers {#sec-ai-training-parameter-updates-optimizers-b87f}\n",
        "\n",
        "The process of updating model parameters is a fundamental operation in machine learning systems. During training, after gradients are computed in the backward pass, the system must allocate and manage memory for both the parameters and their gradients, then perform the update computations. The choice of optimizer determines not only the mathematical update rule, but also the system resources required for training.\n",
        "\n",
        "@lst-param_update shows the parameter update process in a machine learning framework.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-param_update .callout-important title=\"**Parameter Update**: Computes gradients and applies optimization to adjust model parameters based on loss function. Training requires computing gradients through backpropagation and then updating weights using an optimizer to minimize loss, ensuring model performance improves over epochs.\"}\n",
        "```{.python}\n",
        "loss.backward()  # Compute gradients\n",
        "optimizer.step() # Update parameters\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "bdf0c3ca"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-param_update\n",
        "#| lst-cap: \"**Parameter Update**: Computes gradients and applies optimization to adjust model parameters based on loss function. Training requires computing gradients through backpropagation and then updating weights using an optimizer to minimize loss, ensuring model performance improves over epochs.\"\n",
        "#| eval: false\n",
        "loss.backward()  # Compute gradients\n",
        "optimizer.step() # Update parameters"
      ],
      "id": "bd8f54ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "These operations initiate a sequence of memory accesses and computations. The system must load parameters from memory, compute updates using the stored gradients, and write the modified parameters back to memory. Different optimizers vary in their memory requirements and computational patterns, directly affecting system performance and resource utilization.\n",
        "\n",
        "#### Memory Requirements {#sec-ai-training-memory-requirements-6c2c}\n",
        "\n",
        "Gradient descent, the most basic optimization algorithm that we discussed earlier, illustrates the fundamental memory and computation patterns in parameter updates. From a systems perspective, each parameter update must:\n",
        "\n",
        "1. Read the current parameter value from memory\n",
        "2. Access the computed gradient from memory\n",
        "3. Perform the multiplication and subtraction operations\n",
        "4. Write the new parameter value back to memory\n",
        "\n",
        "Because gradient descent only requires memory for storing parameters and gradients, it has relatively low memory overhead compared to more complex optimizers. However, more advanced optimizers introduce additional memory requirements and computational complexity. For example, as we discussed previously, Adam maintains two extra vectors for each parameter: one for the first moment (the moving average of gradients) and one for the second moment (the moving average of squared gradients). This triples the memory usage but can lead to faster convergence. Consider the situation where there are 100,000 parameters, and each gradient requires 4 bytes (32 bits):\n",
        "\n",
        "* Gradient Descent: 100,000 $\\times$ 4 bytes = 400,000 bytes = 0.4 MB\n",
        "* Adam: 3 $\\times$ 100,000 $\\times$ 4 bytes = 1,200,000 bytes = 1.2 MB\n",
        "\n",
        "This problem becomes especially apparent for billion parameter models, as model sizes (without counting optimizer states and gradients) alone can already take up significant portions of GPU memory. As one way of solving this problem, the authors of GaLoRE tackle this by compressing optimizer state and gradients and computing updates in this compressed space [@zhao2024galorememoryefficientllmtraining], greatly reducing memory footprint as shown below in  @fig-galore-llm-memory-breakdown.\n",
        "\n",
        "::: {#fig-galore-llm-memory-breakdown fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\definecolor{other}{HTML}{D7191C}\n",
        "\\definecolor{WeightGradient}{HTML}{FDAE61}\n",
        "\\definecolor{Optimization}{HTML}{ABDDA4}\n",
        "\\definecolor{Activation}{HTML}{2B83BA}\n",
        "\\begin{axis}[\n",
        "    xbar stacked,\n",
        "    legend style={\n",
        "    legend columns=1,\n",
        "       at={(axis cs:61.95,2.2)},\n",
        "        anchor=north west,\n",
        "        cells={anchor=west},\n",
        "        draw=none\n",
        "    },\n",
        "    xmajorgrids=true,\n",
        "    grid style=dashed,\n",
        "    ytick=data,\n",
        "    axis y line*=none,\n",
        "    axis x line*=bottom,\n",
        "    tick label style={font=\\footnotesize\\usefont{T1}{phv}{m}{n}},\n",
        "    legend style={font=\\fontsize{7pt}{7}\\selectfont\\usefont{T1}{phv}{m}{n}},\n",
        "    label style={font=\\footnotesize\\usefont{T1}{phv}{m}{n}},\n",
        "    xtick={0,20,40,60,80},\n",
        "    tick label style={/pgf/number format/assume math mode=true},\n",
        "    width=1\\textwidth,\n",
        "    bar width=7mm,\n",
        "    xlabel={Memory Cost (BG)},\n",
        "    yticklabels={8-bit GaLore, 8-bit Adam, Adafactor, BF16},\n",
        "    xmin=0,\n",
        "    xmax=82,\n",
        "    ymax=3,\n",
        "    area legend,\n",
        "    y=13mm,\n",
        "    enlarge y limits={abs=0.5},\n",
        "]\n",
        "\\addplot[other,fill=other] coordinates\n",
        "{(1,0) (2,1) (3,2) (5,3)};\n",
        "\\addplot[WeightGradient,fill=WeightGradient] coordinates\n",
        "{(4,0) (6,1) (8,2) (10,3)};\n",
        "\\addplot[Optimization,fill=Optimization] coordinates\n",
        "{(6,0) (8,1) (10,2) (15,3)};\n",
        "\\addplot[Activation,fill=Activation] coordinates\n",
        "{(12,0) (15,1) (20,2) (25,3)};\n",
        "\\addplot[violet!70,fill=violet!70] coordinates\n",
        "{(8,0) (10,1) (15,2) (20,3)};\n",
        "\n",
        "\\legend{Others, WeightGradient, Optimization, Activation, Weight}\n",
        "\\coordinate (A) at (axis cs:30,-0.5) ;\n",
        "\\coordinate (B) at  (axis cs:30,3.5);\n",
        "\\end{axis}\n",
        "\\draw[dashed,red,thick](A)--node[right=7pt,\n",
        "font=\\fontsize{8pt}{8}\\selectfont\\usefont{T1}{phv}{m}{n},red,pos=0.22]{RTX 4090 Memory Limit}(B);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Memory Footprint Breakdown**: Large language models require substantial memory, with optimizer states and gradients often exceeding the size of model weights themselves. This figure quantifies the memory usage of the llama-7B model, revealing how techniques like compression can significantly reduce the overall footprint by minimizing the storage requirements for optimizer data.\n",
        ":::\n",
        "\n",
        "#### Computational Load {#sec-ai-training-computational-load-f368}\n",
        "\n",
        "The computational cost of parameter updates also depends on the optimizer's complexity. For gradient descent, each update involves simple gradient calculation and application. More sophisticated optimizers like Adam require additional calculations, such as computing running averages of gradients and their squares. This increases the computational load per parameter update.\n",
        "\n",
        "The efficiency of these computations on modern hardware like GPUs and TPUs depends on how well the optimizer's operations can be parallelized. While matrix operations in Adam may be efficiently handled by these accelerators, some operations in complex optimizers might not parallelize well, potentially leading to hardware underutilization.\n",
        "\n",
        "In summary, the choice of optimizer directly impacts both system memory requirements and computational load. More sophisticated optimizers often trade increased memory usage and computational complexity for potentially faster convergence, presenting important considerations for system design and resource allocation in ML systems.\n",
        "\n",
        "#### Batch Size and Parameter Updates {#sec-ai-training-batch-size-parameter-updates-3f3b}\n",
        "\n",
        "Batch size, a critical hyperparameter in machine learning systems, significantly influences the parameter update process, memory usage, and hardware efficiency. It determines the number of training examples processed in a single iteration before the model parameters are updated.\n",
        "\n",
        "Larger batch sizes generally provide more accurate gradient estimates, potentially leading to faster convergence and more stable parameter updates. However, they also increase memory demands proportionally:\n",
        "$$\n",
        "\\text{Memory for Batch} = \\text{Batch Size} \\times \\text{Size of One Training Example}\n",
        "$$\n",
        "\n",
        "This increase in memory usage directly affects the parameter update process, as it determines how much data is available for computing gradients in each iteration.\n",
        "\n",
        "Larger batches tend to improve hardware utilization, particularly on GPUs and TPUs optimized for parallel processing. This can lead to more efficient parameter updates and faster training times, provided sufficient memory is available.\n",
        "\n",
        "However, there's a trade-off to consider. While larger batches can improve computational efficiency by allowing more parallel computations during gradient calculation and parameter updates, they also require more memory. On systems with limited memory, this might necessitate reducing the batch size, potentially slowing down training or leading to less stable parameter updates.\n",
        "\n",
        "The choice of batch size interacts with various aspects of the optimization process. For instance, it affects the frequency of parameter updates: larger batches result in less frequent but potentially more impactful updates. Additionally, batch size influences the behavior of adaptive optimization algorithms, which may need to be tuned differently depending on the batch size. In distributed training, which we discuss later, batch size often determines the degree of data parallelism, impacting how gradient computations and parameter updates are distributed across devices.\n",
        "\n",
        "Determining the optimal batch size involves balancing these factors within hardware constraints. It often requires experimentation to find the sweet spot that maximizes both learning efficiency and hardware utilization while ensuring effective parameter updates.\n",
        "\n",
        "## Pipeline Optimizations {#sec-ai-training-pipeline-optimizations-d6f8}\n",
        "\n",
        "Efficient training of machine learning models is constrained by bottlenecks in data transfer, computation, and memory usage. These limitations manifest in specific ways: data transfer delays occur when loading training batches from disk to GPU memory, computational bottlenecks arise during matrix operations in forward and backward passes, and memory constraints emerge when storing large intermediate values like activation maps.\n",
        "\n",
        "These bottlenecks often lead to underutilized hardware, prolonged training times, and restricted model scalability. For machine learning practitioners, understanding and implementing pipeline optimizations enables training of larger models, faster experimentation cycles, and more efficient use of available computing resources.\n",
        "\n",
        "Here, we explore three widely adopted optimization strategies that address key performance bottlenecks in training pipelines:\n",
        "\n",
        "1. **Prefetching and Overlapping**: Techniques to minimize data transfer delays and maximize GPU utilization.\n",
        "2. **Mixed-Precision Training**: A method to reduce memory demands and computational load using lower precision formats.\n",
        "3. **Gradient Accumulation and Checkpointing**: Strategies to overcome memory limitations during backpropagation and parameter updates.\n",
        "\n",
        "Each technique is discussed in detail, covering its mechanics, advantages, and practical considerations.\n",
        "\n",
        "### Prefetching and Overlapping {#sec-ai-training-prefetching-overlapping-a61e}\n",
        "\n",
        "Training machine learning models involves significant data movement between storage, memory, and computational units. The data pipeline consists of sequential transfers: from disk storage to CPU memory, CPU memory to GPU memory, and through the GPU processing units. In standard implementations, each transfer must complete before the next begins, as shown in @fig-fetching-naive, resulting in computational inefficiencies.\n",
        "\n",
        "::: {#fig-fetching-naive fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\sf,node distance=0pt]\n",
        "\\tikzset{\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    draw=black!80, line width=0.75pt,\n",
        "    fill=black!10,\n",
        "    anchor=south,\n",
        " rounded corners=2pt,\n",
        "    font=\\sf\\fontsize{7pt}{7pt}\\selectfont,\n",
        "    %text width=27mm,\n",
        "    align=center,\n",
        "    minimum width=9.5mm,\n",
        "    minimum height=5mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\definecolor{col1}{RGB}{240,240,255}\n",
        "\\definecolor{col2}{RGB}{255, 255, 205}\n",
        "\n",
        "\\def\\du{205mm}\n",
        "\\def\\vi{8mm}\n",
        "\n",
        "\\node[fill=green!10,draw=none,minimum width=\\du,\n",
        "name path=G4,\n",
        "anchor=south west, minimum height=\\vi](B1)at(-19.0mm,3mm){};\n",
        "\n",
        "\\node[right=2mm of B1.west,anchor=west,align=left]{Epoch};\n",
        "\n",
        "\\node[fill=col2,draw=none,minimum width=\\du,\n",
        "name path=G3,\n",
        "anchor=south west, minimum height=\\vi](Z)at(B1.north west){};\n",
        "\\node[right=2mm of Z.west,anchor=west,align=left]{Train};\n",
        "\n",
        "\\node[fill=red!10,draw=none,minimum width=\\du,\n",
        "name path=G2,\n",
        "anchor=south west, minimum height=\\vi](B2)at (Z.north west){};\n",
        "\\node[right=2mm of B2.west,anchor=west,align=left]{Read};\n",
        "\n",
        "\\node[fill=col1,draw=none,minimum width=\\du,\n",
        "name path=G1,\n",
        "anchor=south west, minimum height=\\vi](V)at(B2.north west){};\n",
        "\\node[right= 2mmof V.west,anchor=west,align=left]{Open};\n",
        "\n",
        "\\def\\hi{3.95}\n",
        "\n",
        "\\draw[thick,name path=V0](0,0)node[below]{00:00}--++(90:\\hi);\n",
        "\\draw[thick,name path=V1](3,0)node[below]{00:15}--++(90:\\hi);\n",
        "\\draw[thick,name path=V2](6,0)node[below]{00:30}--++(90:\\hi);\n",
        "\\draw[thick,name path=V3](9,0)node[below]{00:45}--++(90:\\hi);\n",
        "\\draw[thick,name path=V4](12,0)node[below]{01:00}--++(90:\\hi);\n",
        "\\draw[thick,name path=V5](15,0)node[below]{01:15}--++(90:\\hi);\n",
        "\\draw[thick,name path=V6](18,0)node[below]{01:30}--++(90:\\hi);\n",
        "%%%%%%%%%%%\n",
        "\\path [name intersections={of=V0 and G1,by={A1,B1}}];\n",
        "\\node[Box, anchor=west]at($(B1)!0.5!(A1)$){Open 1};\n",
        "\\path [name intersections={of=V0 and G2,by={A2,B2}}];\n",
        "\\node[Box, anchor=west,fill=cyan!20]at([xshift=30]$(B2)!0.5!(A2)$){Read 1};\n",
        "\\path [name intersections={of=V0 and G4,by={A3,B3}}];\n",
        "\\node[Box, anchor=west,fill=orange!30, minimum width=80mm, ]at($(B3)!0.5!(A3)$){Epoch 1};\n",
        "\n",
        "%%\n",
        "\\path [name intersections={of=V1 and G2,by={C1,D1}}];\n",
        "\\node[Box, anchor=west,fill=cyan!20]at([xshift=0]$(C1)!0.5!(D1)$){Read 2};\n",
        "\\path [name intersections={of=V1 and G3,by={C2,D2}}];\n",
        "\\node[Box, anchor=east,fill=magenta!20]at([xshift=0]$(C2)!0.5!(D2)$){Train 1};\n",
        "\\node[Box, anchor=west,fill=magenta!20]at([xshift=30]$(C2)!0.5!(D2)$){Train 2};\n",
        "%%\n",
        "\\path [name intersections={of=V2 and G2,by={E1,F1}}];\n",
        "\\node[Box, anchor=east,fill=cyan!20]at([xshift=0]$(E1)!0.5!(F1)$){Read 3};\n",
        "\\path [name intersections={of=V2 and G3,by={C3,D3}}];\n",
        "\\node[Box, anchor=west,fill=magenta!20]at([xshift=0]$(C3)!0.5!(D3)$){Train 3};\n",
        "%\n",
        "\\path [name intersections={of=V4 and G1,by={G1,H1}}];\n",
        "\\node[Box, anchor=east]at([xshift=-30]$(G1)!0.5!(H1)$){Open 2};\n",
        "\\path [name intersections={of=V4 and G2,by={G2,H2}}];\n",
        "\\node[Box, anchor=east,fill=cyan!20]at([xshift=0]$(G2)!0.5!(H2)$){Read 4};\n",
        "\\node[Box, anchor=east,fill=cyan!20]at([xshift=56]$(G2)!0.5!(H2)$){Read 5};\n",
        "\\path [name intersections={of=V4 and G3,by={G3,H3}}];\n",
        "\\node[Box, anchor=west,fill=magenta!20]at([xshift=0]$(G3)!0.5!(H3)$){Train 4};\n",
        "\\path [name intersections={of=V4 and G4,by={G4,H4}}];\n",
        "\\node[Box, anchor=west,fill=orange!30, minimum width=80.5mm]\n",
        "at([xshift=-59]$(G4)!0.5!(H4)$){Epoch 2};\n",
        "%\n",
        "\\path [name intersections={of=V5 and G2,by={I1,J1}}];\n",
        "\\node[Box, anchor=west,fill=cyan!20]at([xshift=0]$(I1)!0.5!(J1)$){Read 6};\n",
        "\\path [name intersections={of=V5 and G3,by={I2,J2}}];\n",
        "\\node[Box, anchor=east,fill=magenta!20]at([xshift=0]$(I2)!0.5!(J2)$){Train 5};\n",
        "\\node[Box, anchor=east,fill=magenta!20]at([xshift=59]$(I2)!0.5!(J2)$){Train 6};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Sequential Data Transfer**: Standard data fetching pipelines execute transfersâfrom disk to CPU, CPU to GPU, and through GPU processingâone at a time, creating bottlenecks and limiting computational throughput during model training. This serial approach prevents overlapping computation and data movement, hindering efficient resource utilization.\n",
        ":::\n",
        "\n",
        "Prefetching addresses these inefficiencies by loading data into memory before its scheduled computation time. During the processing of the current batch, the system loads and prepares subsequent batches, maintaining a consistent supply of ready data [@tensorflow_data_2015].\n",
        "\n",
        "Overlapping builds upon prefetching by coordinating multiple pipeline stages to execute concurrently. The system processes the current batch while simultaneously preparing future batches through data loading and preprocessing operations. This coordination establishes a continuous data flow through the training pipeline, as illustrated in @fig-fetching-optimized.\n",
        "\n",
        "::: {#fig-fetching-optimized fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\sf,node distance=0pt]\n",
        "\\tikzset{\n",
        "  Box/.style={inner xsep=0pt,\n",
        "    draw=black!80, line width=0.75pt,\n",
        "    fill=black!10,\n",
        "    anchor=south,\n",
        " rounded corners=2pt,\n",
        "    font=\\sf\\fontsize{5pt}{5pt}\\selectfont,\n",
        "    %text width=27mm,\n",
        "    align=center,\n",
        "    minimum width=20mm,\n",
        "    minimum height=4mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\definecolor{col1}{RGB}{240,240,255}\n",
        "\\definecolor{col2}{RGB}{255, 255, 205}\n",
        "\n",
        "\\def\\du{205mm}\n",
        "\\def\\vi{7mm}\n",
        "\n",
        "\\node[fill=green!10,draw=none,minimum width=\\du,\n",
        "name path=G4,\n",
        "anchor=south west, minimum height=\\vi](B1)at(-19.0mm,3mm){};\n",
        "\n",
        "\\node[right=2mm of B1.west,anchor=west,align=left]{Epoch};\n",
        "\n",
        "\\node[fill=col2,draw=none,minimum width=\\du,\n",
        "name path=G3,\n",
        "anchor=south west, minimum height=\\vi](Z)at(B1.north west){};\n",
        "\\node[right=2mm of Z.west,anchor=west,align=left]{Train};\n",
        "\n",
        "\\node[fill=red!10,draw=none,minimum width=\\du,\n",
        "name path=G2,\n",
        "anchor=south west, minimum height=\\vi](B2)at (Z.north west){};\n",
        "\\node[right=2mm of B2.west,anchor=west,align=left]{Read};\n",
        "\n",
        "\\node[fill=col1,draw=none,minimum width=\\du,\n",
        "name path=G1,\n",
        "anchor=south west, minimum height=\\vi](V)at(B2.north west){};\n",
        "\\node[right= 2mmof V.west,anchor=west,align=left]{Open};\n",
        "\n",
        "\\def\\hi{3.45}\n",
        "\n",
        "\\draw[thick,name path=V0](0,0)node[below]{00:00}--++(90:\\hi);\n",
        "\\draw[thick,name path=V1](1,0)node[below]{00:05}--++(90:\\hi);\n",
        "\\draw[thick,name path=V2](2,0)node[below]{00:10}--++(90:\\hi);\n",
        "%\n",
        "\\draw[thick,name path=V3](3,0)node[below]{00:15}--++(90:\\hi);\n",
        "\\draw[thick,name path=V4](4,0)node[below]{00:20}--++(90:\\hi);\n",
        "\\draw[thick,name path=V5](5,0)node[below]{00:25}--++(90:\\hi);\n",
        "%\n",
        "\\draw[thick,name path=V6](6,0)node[below]{00:30}--++(90:\\hi);\n",
        "\\draw[thick,name path=V7](7,0)node[below]{00:35}--++(90:\\hi);\n",
        "\\draw[thick,name path=V8](8,0)node[below]{00:40}--++(90:\\hi);\n",
        "\\draw[thick,name path=V9](9,0)node[below]{00:45}--++(90:\\hi);\n",
        "\\draw[thick,name path=V10](10,0)node[below]{00:50}--++(90:\\hi);\n",
        "\\draw[thick,name path=V11](11,0)node[below]{00:55}--++(90:\\hi);\n",
        "\\draw[thick,name path=V12](12,0)node[below]{01:00}--++(90:\\hi);\n",
        "\\draw[thick,name path=V13](13,0)node[below]{01:05}--++(90:\\hi);\n",
        "\\draw[thick,name path=V14](14,0)node[below]{01:10}--++(90:\\hi);\n",
        "\\draw[thick,name path=V15](15,0)node[below]{01:15}--++(90:\\hi);\n",
        "\\draw[thick,name path=V16](16,0)node[below]{01:20}--++(90:\\hi);\n",
        "\\draw[thick,name path=V17](17,0)node[below]{01:25}--++(90:\\hi);\n",
        "\\draw[thick,name path=V18](18,0)node[below]{01:30}--++(90:\\hi);\n",
        "%\n",
        "\\path [name intersections={of=V0 and G1,by={A1,B1}}];\n",
        "\\node[Box, anchor=west,\n",
        "    minimum width=11.2](O1)at($(B1)!0.5!(A1)$){};\n",
        " \\draw[](O1)--++(60:0.5)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Open 1};\n",
        " %\n",
        "\\path [name intersections={of=V0 and G2,by={C1,D1}}];\n",
        "\\node[Box, anchor=west, minimum width=16.8,\n",
        "fill=cyan!20](R1)at([xshift=11.2]$(C1)!0.5!(D1)$){Read 1};\n",
        "%\n",
        "\\path [name intersections={of=V1 and G2,by={E1,F1}}];\n",
        "\\node[Box, anchor=west, minimum width=11.2,\n",
        "fill=cyan!20]at([xshift=0]$(E1)!0.5!(F1)$)(R2){};\n",
        " \\draw[](R2)--++(70:0.6)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Read 2};\n",
        "\\node[Box, anchor=west, minimum width=16.8,\n",
        "right=-0.5pt of R2,fill=cyan!20]{Read 3};\n",
        "%\n",
        "\\path [name intersections={of=V1 and G3,by={G1,H1}}];\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "minimum width=11.2]at([xshift=0]$(G1)!0.5!(H1)$)(T1){};\n",
        " \\draw[](T1)--++(170:0.45)node[left,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Train 1};\n",
        "%\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "right=-0.5ptof T1,minimum width=16.8](T2){Train 2};\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "right=-0.5ptof T2,minimum width=11.2](T3){};\n",
        " \\draw[](T3)--++(40:0.45)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Train 3};\n",
        " %\n",
        "  \\path [name intersections={of=V0 and G4,by={A3,B3}}];\n",
        "\\node[Box, anchor=west,fill=orange!30,\n",
        "minimum width=85](E1)at($(B3)!0.5!(A3)$){Epoch 1};\n",
        "%%%%%%\n",
        "\\path [name intersections={of=V5 and G1,by={I1,J1}}];\n",
        "\\node[Box, anchor=west,\n",
        "    minimum width=11.2](O2)at($(I1)!0.5!(J1)$){};\n",
        "\\draw[](O2)--++(60:0.5)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Open 2};\n",
        " %%%\n",
        " \\path [name intersections={of=V5 and G2,by={K1,L1}}];\n",
        "\\node[Box, anchor=west, minimum width=16.8,\n",
        "fill=cyan!20]at([xshift=11.2]$(K1)!0.5!(L1)$){Read 4};\n",
        "%\n",
        "\\path [name intersections={of=V6 and G2,by={M1,N1}}];\n",
        "\\node[Box, anchor=west, minimum width=11.2,\n",
        "fill=cyan!20]at([xshift=0]$(M1)!0.5!(N1)$)(R5){};\n",
        " \\draw[](R5)--++(70:0.6)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Read 5};\n",
        "\\node[Box, anchor=west, minimum width=16.8,\n",
        "right=-0.5pt of R5,fill=cyan!20]{Read 6};\n",
        "%%%%\n",
        "\\path [name intersections={of=V6 and G3,by={O1,P1}}];\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "minimum width=11.2]at([xshift=0]$(O1)!0.5!(P1)$)(T4){};\n",
        " \\draw[](T4)--++(170:0.45)node[left,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Train 4};\n",
        "\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "right=-0.5pt of T4,minimum width=16.8](T5){Train 5};\n",
        "\\node[Box, anchor=west,fill=magenta!20,\n",
        "right=-0.5pt of T5,minimum width=11.2](T6){};\n",
        " \\draw[](T6)--++(40:0.45)node[above,inner sep=1pt,\n",
        " font=\\sf\\fontsize{6pt}{6pt}\\selectfont]{Train 6};\n",
        " %\n",
        " \\path [name intersections={of=V5 and G4,by={R3,S3}}];\n",
        "\\node[Box, anchor=west,fill=orange!30,\n",
        "minimum width=85]at($(R3)!0.5!(S3)$){Epoch 2};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Pipeline Parallelism**: Overlapping computation and data fetching reduces overall job completion time by concurrently processing data and preparing subsequent batches. This optimization achieves a 40% speedupâfinishing in 00:40 seconds compared to 01:30 seconds with naive sequential fetching.\n",
        ":::\n",
        "\n",
        "These optimization techniques demonstrate particular value in scenarios involving large-scale datasets, preprocessing-intensive data, multi-GPU training configurations, or high-latency storage systems. The following section examines the specific mechanics of implementing these techniques in modern training systems.\n",
        "\n",
        "#### Mechanics {#sec-ai-training-mechanics-0d89}\n",
        "\n",
        "Prefetching and overlapping optimize the training pipeline by enabling different stages of data processing and computation to operate concurrently rather than sequentially. These techniques maximize resource utilization by addressing bottlenecks in data transfer and preprocessing.\n",
        "\n",
        "As you recall, training data undergoes three main stages: retrieval from storage, transformation into a suitable format, and utilization in model training. An unoptimized pipeline executes these stages sequentially. The GPU remains idle during data fetching and preprocessing, waiting for data preparation to complete. This sequential execution creates significant inefficiencies in the training process.\n",
        "\n",
        "Prefetching eliminates waiting time by loading data asynchronously during model computation. Data loaders operate as separate threads or processes, preparing the next batch while the current batch trains. This ensures immediate data availability for the GPU when the current batch completes.\n",
        "\n",
        "Overlapping extends this efficiency by coordinating all three pipeline stages simultaneously. As the GPU processes one batch, preprocessing begins on the next batch, while data fetching starts for the subsequent batch. This coordination maintains constant activity across all pipeline stages.\n",
        "\n",
        "Modern machine learning frameworks implement these techniques through built-in utilities. PyTorch's `DataLoader` class demonstrates this implementation. An example of this usage is shown in @lst-dataloader_usage.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-dataloader_usage .callout-important title=\"**Pipeline Optimization**: Machine learning workflows benefit from efficient data handling through batching and prefetching to maintain constant GPU utilization.\"}\n",
        "```{.python}\n",
        "loader = DataLoader(dataset,\n",
        "                    batch_size=32,\n",
        "                    num_workers=4,\n",
        "                    prefetch_factor=2)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "f86bfa55"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-dataloader_usage\n",
        "#| lst-cap: \"**Pipeline Optimization**: Machine learning workflows benefit from efficient data handling through batching and prefetching to maintain constant GPU utilization.\"\n",
        "#| eval: false\n",
        "\n",
        "loader = DataLoader(dataset,\n",
        "                    batch_size=32,\n",
        "                    num_workers=4,\n",
        "                    prefetch_factor=2)"
      ],
      "id": "79cf6e82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The parameters `num_workers` and `prefetch_factor` control parallel processing and data buffering. Multiple worker processes handle data loading and preprocessing concurrently, while prefetch_factor determines the number of batches prepared in advance.\n",
        "\n",
        "Buffer management plays a key role in pipeline efficiency. The prefetch buffer size requires careful tuning to balance resource utilization. A buffer that is too small causes the GPU to wait for data preparation, reintroducing the idle time these techniques aim to eliminate. Conversely, allocating an overly large buffer consumes memory that could otherwise store model parameters or larger batch sizes.\n",
        "\n",
        "The implementation relies on effective CPU-GPU coordination. The CPU manages data preparation tasks while the GPU handles computation. This division of labor, combined with storage I/O operations, creates an efficient pipeline that minimizes idle time across hardware resources.\n",
        "\n",
        "These optimization techniques yield particular benefits in scenarios involving slow storage access, complex data preprocessing, or large datasets. The next section examines the specific advantages these techniques offer in different training contexts.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-61ee}\n",
        "\n",
        "Prefetching and overlapping are powerful techniques that significantly enhance the efficiency of training pipelines by addressing key bottlenecks in data handling and computation. To illustrate the impact of these benefits, @tbl-prefetching presents the following comparison:\n",
        "\n",
        "+-----------------+-------------------------------------+-------------------------------------+\n",
        "| Aspect          | Traditional Pipeline                | With Prefetching & Overlapping      |\n",
        "+:================+:====================================+:====================================+\n",
        "| GPU Utilization | Frequent idle periods               | Near-constant utilization           |\n",
        "+-----------------+-------------------------------------+-------------------------------------+\n",
        "| Training Time   | Longer due to sequential operations | Reduced through parallelism         |\n",
        "+-----------------+-------------------------------------+-------------------------------------+\n",
        "| Resource Usage  | Often suboptimal                    | Maximized across available hardware |\n",
        "+-----------------+-------------------------------------+-------------------------------------+\n",
        "| Scalability     | Limited by slowest component        | Adaptable to various bottlenecks    |\n",
        "+-----------------+-------------------------------------+-------------------------------------+\n",
        "\n",
        ": **Pipeline Optimization**: Prefetching and overlapping maximize hardware utilization and reduce training time by enabling parallel data loading and computation, overcoming bottlenecks inherent in sequential pipelines. Increased resource usage and adaptability to varying bottlenecks demonstrate the scalability advantages of these techniques. {#tbl-prefetching .striped .hover}\n",
        "\n",
        "One of the most critical advantages of these methods is the improvement in GPU utilization. In traditional, unoptimized pipelines, the GPU often remains idle while waiting for data to be fetched and preprocessed. This idle time creates inefficiencies, especially in workflows where data augmentation or preprocessing involves complex transformations. By introducing asynchronous data loading and overlapping, these techniques ensure that the GPU consistently has data ready to process, eliminating unnecessary delays.\n",
        "\n",
        "Another important benefit is the reduction in overall training time. Prefetching and overlapping allow the computational pipeline to operate continuously, with multiple stages working simultaneously rather than sequentially. For example, while the GPU processes the current batch, the data loader fetches and preprocesses the next batch, ensuring a steady flow of data through the system. This parallelism minimizes latency between training iterations, allowing for faster completion of training cycles, particularly in scenarios involving large-scale datasets.\n",
        "\n",
        "Additionally, these techniques are highly scalable and adaptable to various hardware configurations. Prefetching buffers and overlapping mechanisms can be tuned to match the specific requirements of a system, whether the bottleneck lies in slow storage, limited network bandwidth, or computational constraints. By aligning the data pipeline with the capabilities of the underlying hardware, prefetching and overlapping maximize resource utilization, making them invaluable for large-scale machine learning workflows.\n",
        "\n",
        "Overall, prefetching and overlapping directly address some of the most common inefficiencies in training pipelines. By optimizing data flow and computation, these methods not only improve hardware efficiency but also enable the training of more complex models within shorter timeframes.\n",
        "\n",
        "#### Use Cases {#sec-ai-training-use-cases-cc4e}\n",
        "\n",
        "Prefetching and overlapping are highly versatile techniques that can be applied across various machine learning domains and tasks to enhance pipeline efficiency. Their benefits are most evident in scenarios where data handling and preprocessing are computationally expensive or where large-scale datasets create potential bottlenecks in data transfer and loading.\n",
        "\n",
        "One of the primary use cases is in computer vision, where datasets often consist of high-resolution images requiring extensive preprocessing. Tasks such as image classification, object detection, or semantic segmentation typically involve operations like resizing, normalization, and data augmentation, all of which can significantly increase preprocessing time. By employing prefetching and overlapping, these operations can be carried out concurrently with computation, ensuring that the GPU remains busy during the training process.\n",
        "\n",
        "For example, a typical image classification pipeline might include random cropping (10 ms), color jittering (15 ms), and normalization (5 ms). Without prefetching, these 30ms of preprocessing would delay each training step. Prefetching allows these operations to occur during the previous batch's computation.\n",
        "\n",
        "Natural language processing (NLP) workflows also benefit from these techniques, particularly when working with large corpora of text data. For instance, preprocessing text data involves tokenization (converting words to numbers), padding sequences to equal length, and potentially subword tokenization. In a BERT model training pipeline, these steps might process thousands of sentences per batch. Prefetching allows this text processing to happen concurrently with model training. Prefetching ensures that these transformations occur in parallel with training, while overlapping optimizes data transfer and computation. This is especially useful in transformer-based models like BERT or GPT, which require consistent throughput to maintain efficiency given their high computational demand.\n",
        "\n",
        "Distributed training systems, which we will discuss next, involve multiple GPUs or nodes, present another critical application for prefetching and overlapping. In distributed setups, network latency and data transfer rates often become the primary bottleneck. Prefetching mitigates these issues by ensuring that data is ready and available before it is required by any specific GPU. Overlapping further optimizes distributed training pipelines by coordinating the data preprocessing on individual nodes while the central computation continues, thus reducing overall synchronization delays.\n",
        "\n",
        "Beyond these domains, prefetching and overlapping are particularly valuable in workflows involving large-scale datasets stored on remote or cloud-based systems. When training on cloud platforms, the data may need to be fetched over a network or from distributed storage, which introduces additional latency. Using prefetching and overlapping in such cases helps minimize the impact of these delays, ensuring that training proceeds smoothly despite slower data access speeds.\n",
        "\n",
        "These use cases illustrate how prefetching and overlapping address inefficiencies in various machine learning pipelines. By optimizing the flow of data and computation, these techniques enable faster, more reliable training workflows across a wide range of applications.\n",
        "\n",
        "#### Challenges and Trade-offs {#sec-ai-training-challenges-tradeoffs-c773}\n",
        "\n",
        "While prefetching and overlapping are powerful techniques for optimizing training pipelines, their implementation comes with certain challenges and trade-offs. Understanding these limitations is crucial for effectively applying these methods in real-world machine learning workflows.\n",
        "\n",
        "One of the primary challenges is the increased memory usage that accompanies prefetching and overlapping. By design, these techniques rely on maintaining a buffer of prefetched data batches, which requires additional memory resources. For large datasets or high-resolution inputs, this memory demand can become significant, especially when training on GPUs with limited memory capacity. If the buffer size is not carefully tuned, it may lead to out-of-memory errors, forcing practitioners to reduce batch sizes or adjust other parameters, which can impact overall efficiency.\n",
        "\n",
        "For example, with a prefetch factor of 2 and batch size of 256 high-resolution images ($1024\\times1024$ pixels), the buffer might require an additional 2 GB of GPU memory. This becomes particularly challenging when training vision models that already require significant memory for their parameters and activations.\n",
        "\n",
        "Another difficulty lies in tuning the parameters that control prefetching and overlapping. Settings such as `num_workers` and `prefetch_factor` in PyTorch, or buffer sizes in other frameworks, need to be optimized for the specific hardware and workload. For instance, increasing the number of worker threads can improve throughput up to a point, but beyond that, it may lead to contention for CPU resources or even degrade performance due to excessive context switching. Determining the optimal configuration often requires empirical testing, which can be time-consuming. A common starting point is to set `num_workers` to the number of CPU cores available. However, on a 16-core system processing large images, using all cores for data loading might leave insufficient CPU resources for other essential operations, potentially slowing down the entire pipeline.\n",
        "\n",
        "Debugging also becomes more complex in pipelines that employ prefetching and overlapping. Asynchronous data loading and multithreading or multiprocessing introduce potential race conditions, deadlocks, or synchronization issues. Diagnosing errors in such systems can be challenging because the execution flow is no longer straightforward. Developers may need to invest additional effort into monitoring, logging, and debugging tools to ensure that the pipeline operates reliably.\n",
        "\n",
        "Moreover, there are scenarios where prefetching and overlapping may offer minimal benefits. For instance, in systems where storage access or network bandwidth is significantly faster than the computation itself, these techniques might not noticeably improve throughput. In such cases, the additional complexity and memory overhead introduced by prefetching may not justify its use.\n",
        "\n",
        "Finally, prefetching and overlapping require careful coordination across different components of the training pipeline, such as storage, CPUs, and GPUs. Poorly designed pipelines can lead to imbalances where one stage becomes a bottleneck, negating the advantages of these techniques. For example, if the data loading process is too slow to keep up with the GPU's processing speed, the benefits of overlapping will be limited.\n",
        "\n",
        "Despite these challenges, prefetching and overlapping remain essential tools for optimizing training pipelines when used appropriately. By understanding and addressing their trade-offs, practitioners can implement these techniques effectively, ensuring smoother and more efficient machine learning workflows.\n",
        "\n",
        "### Mixed-Precision Training {#sec-ai-training-mixedprecision-training-1215}\n",
        "\n",
        "Mixed-precision training combines different numerical precisions during model training to optimize computational efficiency. This approach uses combinations of 32-bit floating-point (FP32), 16-bit floating-point (FP16), and brain floating-point (bfloat16) formats to reduce memory usage and speed up computation while preserving model accuracy [@nvidia_mixed_precision_2018; @wang_bfloat16_2019].\n",
        "\n",
        "A neural network trained in FP32 requires 4 bytes per parameter, while both FP16 and bfloat16 use 2 bytes. For a model with $10^9$ parameters, this reduction cuts memory usage from 4 GB to 2 GB. This memory reduction enables larger batch sizes and deeper architectures on the same hardware.\n",
        "\n",
        "The numerical precision differences between these formats shape their use cases. FP32 represents numbers from approximately $\\pm1.18 \\times 10^{-38}$ to $\\pm3.4 \\times 10^{38}$ with 7 decimal digits of precision. FP16 ranges from $\\pm6.10 \\times 10^{-5}$ to $\\pm65,504$ with 3-4 decimal digits of precision. Bfloat16, developed by Google Brain, maintains the same dynamic range as FP32 ($\\pm1.18 \\times 10^{-38}$ to $\\pm3.4 \\times 10^{38}$) but with reduced precision (3-4 decimal digits). This range preservation makes bfloat16 particularly suited for deep learning training, as it handles large and small gradients more effectively than FP16.\n",
        "\n",
        "The hybrid approach proceeds in three main phases, as illustrated in @fig-mixed-precision. During the forward pass, input data converts to reduced precision (FP16 or bfloat16), and matrix multiplications execute in this format, including activation function computations. In the gradient computation phase, the backward pass calculates gradients in reduced precision, but results are stored in FP32 master weights. Finally, during weight updates, the optimizer updates the main weights in FP32, and these updated weights convert back to reduced precision for the next forward pass.\n",
        "\n",
        "::: {#fig-mixed-precision fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line join=round,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{%\n",
        "LineD/.style={line width=1.0pt,black!50,text=black,align=center},\n",
        "Line/.style={red!30,line width=3pt,-{Triangle[width=1.8*6pt,length=0.8*6pt]},text=black,align=center},\n",
        "Box/.style={inner xsep=2pt,\n",
        "    node distance=2.7,\n",
        "    draw=GreenLine,\n",
        "    fill=GreenL,\n",
        "    line width=0.75pt,\n",
        "    align=flush center,\n",
        "    text width=22mm,\n",
        "    minimum width=22mm, minimum height=9.5mm\n",
        "  },\n",
        "Box2/.style={Box,fill=BlueL, draw=BlueLine},\n",
        "Box3/.style={Box,fill=BrownL, draw=BrownLine},\n",
        "}\n",
        "\n",
        "\\node[Box](B1){FP 32 Master Weights};\n",
        "\\node[Box,right=of B1](B2){FP 32 Gradients};\n",
        "\\node[Box2,right=of B2](B3){Scaled FP 32 Gradients};\n",
        "\\node[Box2,below right=0.5 and 1.1 of B3](B4){Scaled FP 16 Gradients};\n",
        "\\node[Box3,below=2of B1](B11){FP 16\\\\ Weights};\n",
        "\\node[Box3,below=2of B2](B22){FP 16 Loss};\n",
        "\\node[Box2,below=2of B3](B33){Scaled FP 32 Loss};\n",
        "%\n",
        "\\draw[Line,-latex](B4)|-node[above,pos=0.75]{4. Copy}(B3);\n",
        "\\draw[Line,-latex](B3)--node[above]{5. Remove scale, \\\\(+clip, etc.)}(B2);\n",
        "\\draw[Line,-latex](B2)--node[above]{6. Apply}(B1);\n",
        "\\draw[Line,-latex](B1)--node[right]{7. Copy}(B11);\n",
        "\\draw[Line,-latex](B11)--node[above]{1. Forward\\\\ Pass}(B22);\n",
        "\\draw[Line,-latex](B22)--node[above]{2. Loss\\\\ Scaling}(B33);\n",
        "\\draw[Line,-latex](B33)-|node[above,pos=0.25]{3. Backprop}(B4);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Mixed Precision Training**: Reduced precision formats (FP16, bfloat16) accelerate deep learning by decreasing memory bandwidth and computational requirements during both forward and backward passes. Master weights stored in FP32 precision accumulate updates from reduced precision gradients, preserving accuracy while leveraging performance gains from lower precision arithmetic.\n",
        ":::\n",
        "\n",
        "Modern hardware architectures are specifically designed to accelerate reduced precision computations. GPUs from NVIDIA include Tensor Cores[^fn-tensorcores] optimized for FP16 and bfloat16 operations [@nvidia_tensors_fp16_2017]. Google's TPUs natively support bfloat16, as this format was specifically designed for machine learning workloads. These architectural optimizations typically enable an order of magnitude higher computational throughput for reduced precision operations compared to FP32, making mixed-precision training particularly efficient on modern hardware.\n",
        "\n",
        "[^fn-tensorcores]: **Tensor Cores**: NVIDIA GPU units that accelerate matrix operations with reduced precision formats like FP16 and bfloat16, boosting deep learning performance by enabling parallel computations.\n",
        "\n",
        "#### FP16 Computation {#sec-ai-training-fp16-computation-2c1f}\n",
        "\n",
        "The majority of operations in mixed-precision training, such as matrix multiplications and activation functions, are performed in FP16. The reduced precision allows these calculations to be executed faster and with less memory consumption compared to FP32. FP16 operations are particularly effective on modern GPUs equipped with Tensor Cores, which are designed to accelerate computations involving half-precision values. These cores perform FP16 operations natively, resulting in significant speedups.\n",
        "\n",
        "#### FP32 Accumulation {#sec-ai-training-fp32-accumulation-7a9c}\n",
        "\n",
        "While FP16 is efficient, its limited precision can lead to numerical instability, especially in critical operations like gradient updates. To mitigate this, mixed-precision training retains FP32 precision for certain steps, such as weight updates and gradient accumulation. By maintaining higher precision for these calculations, the system avoids the risk of gradient underflow or overflow, ensuring the model converges correctly during training.\n",
        "\n",
        "#### Loss Scaling {#sec-ai-training-loss-scaling-d897}\n",
        "\n",
        "One of the key challenges with FP16 is its reduced dynamic range, which increases the likelihood of gradient values becoming too small to be represented accurately. Loss scaling addresses this issue by temporarily amplifying gradient values during backpropagation. Specifically, the loss value is scaled by a large factor (e.g., $2^{10}$) before gradients are computed, ensuring they remain within the representable range of FP16. Once the gradients are computed, the scaling factor is reversed during the weight update step to restore the original gradient magnitude. This process allows FP16 to be used effectively without sacrificing numerical stability.\n",
        "\n",
        "Modern machine learning frameworks, such as PyTorch and TensorFlow, provide built-in support for mixed-precision training. These frameworks abstract the complexities of managing different precisions, enabling practitioners to implement mixed-precision workflows with minimal effort. For instance, PyTorch's `torch.cuda.amp` (Automatic Mixed Precision) library automates the process of selecting which operations to perform in FP16 or FP32, as well as applying loss scaling when necessary.\n",
        "\n",
        "Combining FP16 computation, FP32 accumulation, and loss scaling allows us to achieve mixed-precision training, resulting in a significant reduction in memory usage and computational overhead without compromising the accuracy or stability of the training process. The following sections will explore the practical advantages of this approach and its impact on modern machine learning workflows.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-5e70}\n",
        "\n",
        "Mixed-precision training offers several significant advantages that make it an essential optimization technique for modern machine learning workflows. By reducing memory usage and computational load, it enables practitioners to train larger models, process bigger batches, and achieve faster results, all while maintaining model accuracy and convergence.\n",
        "\n",
        "One of the most prominent benefits of mixed-precision training is its substantial reduction in memory consumption. FP16 computations require only half the memory of FP32 computations, which directly reduces the storage required for activations, weights, and gradients during training. For instance, a transformer model with 1 billion parameters requires 4 GB of memory for weights in FP32, but only 2 GB in FP16. This memory efficiency allows for larger batch sizes, which can lead to more stable gradient estimates and faster convergence. Additionally, with less memory consumed per operation, practitioners can train deeper and more complex models on the same hardware, unlocking capabilities that were previously limited by memory constraints.[^fn-recap]\n",
        "\n",
        "[^fn-recap]: Transformers are neural networks that use attention mechanisms to dynamically capture relationships between elements in sequential data. Unlike traditional architectures, transformers can process all sequence elements in parallel through multi-head attention, where each head learns different relationship patterns. This parallelization enables efficient processing of long sequences, making transformers particularly effective for tasks like language modeling and sequence translation.\n",
        "\n",
        "Another key advantage is the acceleration of computations. Modern GPUs, such as those equipped with Tensor Cores, are specifically optimized for FP16 operations. These cores enable hardware to process more operations per cycle compared to FP32, resulting in faster training times. For matrix multiplication operations, which constitute 80-90% of training computation time in large models, FP16 can achieve 2-3$\\times$ speedup compared to FP32. This computational speedup becomes particularly noticeable in large-scale models, such as transformers and convolutional neural networks, where matrix multiplications dominate the workload.\n",
        "\n",
        "Mixed-precision training also improves hardware utilization by better matching the capabilities of modern accelerators. In traditional FP32 workflows, the computational throughput of GPUs is often underutilized due to their design for parallel processing. FP16 operations, being less demanding, allow more computations to be performed simultaneously, ensuring that the hardware operates closer to its full capacity.\n",
        "\n",
        "Finally, mixed-precision training aligns well with the requirements of distributed and cloud-based systems. In distributed training, where large-scale models are trained across multiple GPUs or nodes, memory and bandwidth become critical constraints. By reducing the size of tensors exchanged between devices, mixed precision not only speeds up inter-device communication but also decreases overall resource demands. This makes it particularly effective in environments where scalability and cost-efficiency are priorities.\n",
        "\n",
        "Overall, the benefits of mixed-precision training extend beyond performance improvements. By optimizing memory usage and computation, this technique empowers machine learning practitioners to train cutting-edge models more efficiently, making it a cornerstone of modern machine learning.\n",
        "\n",
        "#### Use Cases {#sec-ai-training-use-cases-7e1b}\n",
        "\n",
        "Mixed-precision training has become a essential in machine learning workflows, particularly in domains and scenarios where computational efficiency and memory optimization are critical. Its ability to enable faster training and larger model capacities makes it highly applicable across a variety of machine learning tasks and architectures.\n",
        "\n",
        "One of the most prominent use cases is in training large-scale machine learning models. In natural language processing, models such as BERT (345M parameters), GPT-3 (175B parameters), and Transformer-based architectures involve extensive matrix multiplications and large parameter sets. Mixed-precision training allows these models to operate with larger batch sizes or deeper configurations, facilitating faster convergence and improved accuracy on massive datasets.\n",
        "\n",
        "In computer vision, tasks such as image classification, object detection, and segmentation often require handling high-resolution images and applying computationally intensive convolutional operations. By leveraging mixed-precision training, these workloads can be executed more efficiently, enabling the training of advanced architectures like ResNet, EfficientNet, and vision transformers within practical resource limits.\n",
        "\n",
        "Mixed-precision training is also particularly valuable in reinforcement learning (RL), where models interact with environments to optimize decision-making policies. RL often involves high-dimensional state spaces and requires substantial computational resources for both model training and simulation. Mixed precision reduces the overhead of these processes, allowing researchers to focus on larger environments and more complex policy networks.\n",
        "\n",
        "Another critical application is in distributed training systems. When training models across multiple GPUs or nodes, memory and bandwidth become limiting factors for scalability. Mixed precision addresses these issues by reducing the size of activations, weights, and gradients exchanged between devices. For example, in a distributed training setup with 8 GPUs, reducing tensor sizes from FP32 to FP16 can halve the communication bandwidth requirements from 320 GB/s to 160 GB/s. This optimization is especially beneficial in cloud-based environments, where resource allocation and cost efficiency are paramount.\n",
        "\n",
        "Additionally, mixed-precision training is increasingly used in areas such as speech processing, generative modeling, and scientific simulations. Models in these fields often have large data and parameter requirements that can push the limits of traditional FP32 workflows. By optimizing memory usage and leveraging the speedups provided by Tensor Cores, practitioners can train state-of-the-art models faster and more cost-effectively.\n",
        "\n",
        "The adaptability of mixed-precision training to diverse tasks and domains underscores its importance in modern machine learning. Whether applied to large-scale natural language models, computationally intensive vision architectures, or distributed training environments, this technique empowers researchers and engineers to push the boundaries of what is computationally feasible.\n",
        "\n",
        "#### Challenges and Trade-offs {#sec-ai-training-challenges-tradeoffs-39dd}\n",
        "\n",
        "While mixed-precision training offers significant advantages in terms of memory efficiency and computational speed, it also introduces several challenges and trade-offs that must be carefully managed to ensure successful implementation.\n",
        "\n",
        "One of the primary challenges lies in the reduced precision of FP16. While FP16 computations are faster and require less memory, their limited dynamic range $(\\pm65,504)$ can lead to numerical instability, particularly during gradient computations. Small gradient values below $6 \\times 10^{-5}$ become too small to be represented accurately in FP16, resulting in underflow. While loss scaling addresses this by multiplying gradients by factors like $2^{8}$ to $2^{14}$, implementing and tuning this scaling factor adds complexity to the training process.\n",
        "\n",
        "Another trade-off involves the increased risk of convergence issues. While many modern machine learning tasks perform well with mixed-precision training, certain models or datasets may require higher precision to achieve stable and reliable results. For example, recurrent neural networks with long sequences often accumulate numerical errors in FP16, requiring careful gradient clipping and precision management. In such cases, practitioners may need to experiment with selectively enabling or disabling FP16 computations for specific operations, which can complicate the training workflow.\n",
        "\n",
        "Debugging and monitoring mixed-precision training also require additional attention. Numerical issues such as NaN (Not a Number) values in gradients or activations are more common in FP16 workflows and may be difficult to trace without proper tools and logging. For instance, gradient explosions in deep networks might manifest differently in mixed precision, appearing as infinities in FP16 before they would in FP32. Frameworks like PyTorch and TensorFlow provide utilities for debugging mixed-precision training, but these tools may not catch every edge case, especially in custom implementations.\n",
        "\n",
        "Another challenge is the dependency on specialized hardware. Mixed-precision training relies heavily on GPU architectures optimized for FP16 operations, such as Tensor Cores in NVIDIA's GPUs. While these GPUs are becoming increasingly common, not all hardware supports mixed-precision operations, limiting the applicability of this technique in some environments.\n",
        "\n",
        "Finally, there are scenarios where mixed-precision training may not provide significant benefits. Models with relatively low computational demand (less than 10M parameters) or small parameter sizes may not fully utilize the speedups offered by FP16 operations. In such cases, the additional complexity of mixed-precision workflows may outweigh their potential advantages.\n",
        "\n",
        "Despite these challenges, mixed-precision training remains a highly effective optimization technique for most large-scale machine learning tasks. By understanding and addressing its trade-offs, practitioners can harness its benefits while minimizing potential drawbacks, ensuring efficient and reliable training workflows.\n",
        "\n",
        "### Gradient Accumulation and Checkpointing {#sec-ai-training-gradient-accumulation-checkpointing-b6b4}\n",
        "\n",
        "Training large machine learning models often requires significant memory resources, particularly for storing three key components: activations (intermediate layer outputs), gradients (parameter updates), and model parameters (weights and biases) during forward and backward passes. However, memory constraints on GPUs can limit the batch size or the complexity of models that can be trained on a given device.\n",
        "\n",
        "Gradient accumulation and activation checkpointing are two techniques designed to address these limitations by optimizing how memory is utilized during training. Both techniques enable researchers and practitioners to train larger and more complex models, making them indispensable tools for modern deep learning workflows. In the following sections, we will go deeper into the mechanics of gradient accumulation and activation checkpointing, exploring their benefits, use cases, and practical implementation.\n",
        "\n",
        "#### Mechanics {#sec-ai-training-mechanics-2025}\n",
        "\n",
        "Gradient accumulation and activation checkpointing operate on distinct principles, but both aim to optimize memory usage during training by modifying how forward and backward computations are handled.\n",
        "\n",
        "##### Gradient Accumulation {#sec-ai-training-gradient-accumulation-8162}\n",
        "\n",
        "Gradient accumulation simulates larger batch sizes by splitting a single effective batch into smaller \"micro-batches.\" As illustrated in @fig-grad-accumulation, during each forward and backward pass, the gradients for a micro-batch are computed and added to an accumulated gradient buffer. Instead of immediately applying the gradients to update the model parameters, this process repeats for several micro-batches. Once the gradients from all micro-batches in the effective batch are accumulated, the parameters are updated using the combined gradients.\n",
        "\n",
        "::: {#fig-grad-accumulation fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50,text=black\n",
        "},\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    draw=VioletLine2,\n",
        "    line width=0.75pt,\n",
        "    node distance=0.6,\n",
        "    fill=VioletL2,\n",
        "    align=flush center,\n",
        "    text width=15mm,\n",
        "    minimum width=19mm,\n",
        "    minimum height=8mm\n",
        "  },\n",
        "}\n",
        "\\node[Box,fill=RedL,draw=RedLine](B2){Batch 2};\n",
        "\\node[Box,right=of B2,fill=RedL,draw=RedLine](L2){$L_2$};\n",
        "\\node[Box,node distance=2.5,right=of L2](D2){$\\delta_2$};\n",
        "\\node[Box,node distance=1.6,right=of D2,\n",
        "           fill=OrangeL,draw=OrangeLine](Z){$\\delta_1+\\delta_2+\\delta_3$};\n",
        "%\n",
        "\\node[Box,above=of B2,fill=GreenL,draw=GreenLine](B1){Batch 1};\n",
        "\\node[Box,above=of L2,fill=GreenL,draw=GreenLine](L1){$L_1$};\n",
        "\\node[Box,below=of B2,fill=BlueL,draw=BlueLine](B3){Batch 3};\n",
        "\\node[Box,below=of L2,fill=BlueL,draw=BlueLine](L3){$L_3$};\n",
        "%\n",
        "\\node[Box,above=of D2](D1){$\\delta_1$};\n",
        "\\node[Box,below=of D2](D3){$\\delta_3$};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,\n",
        "line width=0.75pt,\n",
        "inner ysep=6mm,\n",
        "fill=BackColor,yshift=2mm,\n",
        "fit=(B1)(L3)](BB1){};\n",
        "\\node[below=1pt of BB1.north,anchor=north]{Losses};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,\n",
        "line width=0.75pt,\n",
        "inner ysep=6mm,\n",
        "fill=BackColor,yshift=2mm,\n",
        "fit=(D1)(D3)](BB2){};\n",
        "\\node[below=1pt of BB2.north,anchor=north]{Gradients};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[dashed,draw=red,inner xsep=4mm,\n",
        "line width=0.75pt,\n",
        "inner ysep=6mm,\n",
        "fill=white,yshift=2mm,\n",
        "fit=(Z)](BB3){};\n",
        "\\node[below=1pt of BB3.north,anchor=north]{Sum};\n",
        "%\n",
        "\\foreach \\x in {1,2,3} {\n",
        "\\draw[-latex,Line] (B\\x) -- (L\\x);\n",
        "\\draw[-latex,Line] (L\\x)--node[above]{$\\frac{\\partial L_\\x}{\\partial x}$} (D\\x);\n",
        "}\n",
        "\\draw[-latex,Line] (D2)--(Z);\n",
        "\\draw[-latex,Line] (D1)-|(Z.135);\n",
        "\\draw[-latex,Line] (D3)-|(Z.225);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Gradient Accumulation**: Effective batch size increases without increasing per-step memory requirements by accumulating gradients from multiple micro-batches before updating model parameters, simulating training with a larger batch. This technique enables training with large models or datasets when memory is limited, improving training stability and potentially generalization performance.\n",
        ":::\n",
        "\n",
        "This process allows models to achieve the benefits of training with larger batch sizes, such as improved gradient estimates and convergence stability, without requiring the memory to store an entire batch at once. For instance, in PyTorch, this can be implemented by adjusting the learning rate proportionally to the number of accumulated micro-batches and calling `optimizer.step()` only after processing the entire effective batch.\n",
        "\n",
        "The key steps in gradient accumulation are:\n",
        "\n",
        "1. Perform the forward pass for a micro-batch.\n",
        "2. Compute the gradients during the backward pass.\n",
        "3. Accumulate the gradients into a buffer without updating the model parameters.\n",
        "4. Repeat steps 1-3 for all micro-batches in the effective batch.\n",
        "5. Update the model parameters using the accumulated gradients after all micro-batches are processed.\n",
        "\n",
        "##### Activation Checkpointing {#sec-ai-training-activation-checkpointing-141a}\n",
        "\n",
        "Activation checkpointing reduces memory usage during the backward pass by discarding and selectively recomputing activations. In standard training, activations from the forward pass are stored in memory for use in gradient computations during backpropagation. However, these activations can consume significant memory, particularly in deep networks.\n",
        "\n",
        "With checkpointing, only a subset of the activations is retained during the forward pass. When gradients need to be computed during the backward pass, the discarded activations are recomputed on demand by re-executing parts of the forward pass, as illustrated in @fig-activation-checkpointing. This approach trades computational efficiency for memory savings, as the recomputation increases training time but allows deeper models to be trained within limited memory constraints. The figure shows how memory is saved by avoiding storage of unnecessarily large intermediate tensors from the forward pass, and simply recomputing them on demand in the backwards pass.\n",
        "\n",
        "The implementation involves:\n",
        "\n",
        "1. Splitting the model into segments.\n",
        "2. Retaining activations only at the boundaries of these segments during the forward pass.\n",
        "3. Recomputing activations for intermediate layers during the backward pass when needed.\n",
        "\n",
        "::: {#fig-activation-checkpointing fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line cap=round,line join=round,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{%\n",
        "Line/.style={line width=1.0pt,black!50,text=black,align=center},\n",
        "Box/.style={inner xsep=2pt,\n",
        "    node distance=3.2,\n",
        "    draw=GreenLine,\n",
        "    line width=0.75pt,\n",
        "    fill=GreenL,\n",
        "    align=flush center,\n",
        "    minimum width=22mm, minimum height=9.5mm\n",
        "  }\n",
        "}\n",
        "\n",
        "\\tikzset{pics/graph/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\node[circle, draw=\\drawchannelcolor, fill=\\channelcolor!90, minimum width=8mm,\n",
        "line width=\\Linewidth,\\ifbox@dashed dashed\\fi](\\picname){};\n",
        "     }\n",
        "  }\n",
        "}\n",
        "\\newif\\ifbox@dashed\n",
        "\\box@dashedfalse % default: not dashed\n",
        "\\pgfkeys{\n",
        "  /channel/.cd,\n",
        "  channelcolor/.store in=\\channelcolor,\n",
        "  drawchannelcolor/.store in=\\drawchannelcolor,\n",
        "  scalefac/.store in=\\scalefac,\n",
        "  Linewidth/.store in=\\Linewidth,\n",
        "  picname/.store in=\\picname,\n",
        "  channelcolor=BrownLine,\n",
        "  drawchannelcolor=BrownLine,\n",
        "  scalefac=1,\n",
        "  Linewidth=1.0pt,\n",
        "  dashed/.is if=box@dashed,\n",
        "  dashed/.default=true,\n",
        "  picname=C\n",
        "}\n",
        "\n",
        "\\begin{scope}[local bounding box=CIRCLES1,shift={($(0,0)+(0,0)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\foreach \\i/\\cl/\\da in{1/GreenL/,2/white/,3/BlueL/dashed,4/white/,5/GreenL/}{\n",
        "\\pic[shift={(0,0)}] at  (1.75*\\i,0){graph={picname=1C\\i,Linewidth=1.0pt,\n",
        "    channelcolor=\\cl,\\da,drawchannelcolor=BrownLine}};\n",
        "    }\n",
        "\\foreach \\j in{1,2,3,4}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\j + 1} %\n",
        "\\draw[Line,-latex](1C\\j)--(1C\\newX);\n",
        "}\n",
        "\\foreach \\i/\\cl/\\da in{1/white/,2/white/,3/white/,4/BrownLine!40!/,5/GreenL/}{\n",
        "\\pic[shift={(1.75,0)}] at  (1.75*\\i,-1.5){graph={picname=2C\\i,Linewidth=1.0pt,\n",
        "    channelcolor=\\cl,\\da,drawchannelcolor=BrownLine}};\n",
        "    }\n",
        "\\foreach \\j in{1,2,3,4}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\j + 1} %\n",
        "\\draw[Line,latex-](2C\\j)--(2C\\newX);\n",
        "\\draw[Line,-latex](1C\\newX)--(2C\\j);\n",
        "}\n",
        "\\node[above= 4pt of 1C3]{\\textbf{Forward pass}};\n",
        "\\node[below= 4pt of 2C3]{\\textbf{Backward pass}};\n",
        "\\draw[](1C3.center)--++(198:3.4)node[below]{Checkpoint};\n",
        "\\draw[](2C4.center)--++(44:2.4)node[right,align=flush left,text width=47mm]{%\n",
        "Green nodes are the ones\n",
        "kept in memory to compute the gradient update for this node};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box=CIRCLES1,shift={($(0,0)+(0,-4.3)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\foreach \\i/\\cl/\\da in{1/GreenL/,2/white/,3/BlueL/dashed,4/GreenL/,5/VioletL/}{\n",
        "\\pic[shift={(0,0)}] at  (1.75*\\i,0){graph={picname=1C\\i,Linewidth=1.0pt,\n",
        "    channelcolor=\\cl,\\da,drawchannelcolor=BrownLine}};\n",
        "    }\n",
        "\\foreach \\j in{1,2,3,4}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\j + 1} %\n",
        "\\draw[Line,-latex](1C\\j)--(1C\\newX);\n",
        "}\n",
        "\\foreach \\i/\\cl/\\da in{1/white/,2/white/,3/BrownLine!40!/,4/GreenL/,5/white/}{\n",
        "\\pic[shift={(1.75,0)}] at  (1.75*\\i,-1.5){graph={picname=2C\\i,Linewidth=1.0pt,\n",
        "    channelcolor=\\cl,\\da,drawchannelcolor=BrownLine}};\n",
        "    }\n",
        "\\foreach \\j in{1,2,3,4}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\j + 1} %\n",
        "\\draw[Line,latex-](2C\\j)--(2C\\newX);\n",
        "\\draw[Line,-latex](1C\\newX)--(2C\\j);\n",
        "}\n",
        "\\draw[](1C5.center)--++(0,1)--++(-2.4,0)node[left,align=left]{This node is being recomputed\\\\\n",
        "   and kept in memory temporarily};\n",
        "\\draw[](1C3.center)--++(198:3.4)node[below]{Checkpoint};\n",
        "\\draw[](2C3.center)--++(24:3.8)node[right,align=flush left,text width=47mm]{Green nodes are the ones\n",
        "  kept in memory to compute the gradient update for this node};\n",
        "\\end{scope}\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Activation Checkpointing**: Trading memory usage for recomputation during backpropagation enables training deeper neural networks. By storing only a subset of activations from the forward pass and recomputing others on demand, this technique reduces peak memory requirements at the cost of increased training time.\n",
        ":::\n",
        "\n",
        "Frameworks like PyTorch provide tools such as `torch.utils.checkpoint` to simplify this process. Checkpointing is particularly effective for very deep architectures, such as transformers or large convolutional networks, where the memory required for storing activations can exceed the GPU's capacity.\n",
        "\n",
        "The synergy between gradient accumulation and checkpointing enables training of larger, more complex models. Gradient accumulation manages memory constraints related to batch size, while checkpointing optimizes memory usage for intermediate activations. Together, these techniques expand the range of models that can be trained on available hardware.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-c9df}\n",
        "\n",
        "Gradient accumulation and activation checkpointing provide solutions to the memory limitations often encountered in training large-scale machine learning models. By optimizing how memory is used during training, these techniques enable the development and deployment of complex architectures, even on hardware with constrained resources.\n",
        "\n",
        "One of the primary benefits of gradient accumulation is its ability to simulate larger batch sizes without increasing the memory requirements for storing the full batch. Larger batch sizes are known to improve gradient estimates, leading to more stable convergence and faster training. With gradient accumulation, practitioners can achieve these benefits while working with smaller micro-batches that fit within the GPU's memory. This flexibility is useful when training models on high-resolution data, such as large images or 3D volumetric data, where even a single batch may exceed available memory.\n",
        "\n",
        "Activation checkpointing, on the other hand, significantly reduces the memory footprint of intermediate activations during the forward pass. This allows for the training of deeper models, which would otherwise be infeasible due to memory constraints. By discarding and recomputing activations as needed, checkpointing frees up memory that can be used for larger models, additional layers, or higher resolution data. This is especially important in state-of-the-art architectures, such as transformers or dense convolutional networks, which require substantial memory to store intermediate computations.\n",
        "\n",
        "Both techniques enhance the scalability of machine learning workflows. In resource-constrained environments, such as cloud-based platforms or edge devices, these methods provide a means to train models efficiently without requiring expensive hardware upgrades. Furthermore, they enable researchers to experiment with larger and more complex architectures, pushing the boundaries of what is computationally feasible.\n",
        "\n",
        "Beyond memory optimization, these techniques also contribute to cost efficiency. By reducing the hardware requirements for training, gradient accumulation and checkpointing lower the overall cost of development, making them valuable for organizations working within tight budgets. This is particularly relevant for startups, academic institutions, or projects running on shared computing resources.\n",
        "\n",
        "Gradient accumulation and activation checkpointing provide both technical and practical advantages. These techniques create a more flexible, scalable, and cost-effective approach to training large-scale models, empowering practitioners to tackle increasingly complex machine learning challenges.\n",
        "\n",
        "#### Use Cases {#sec-ai-training-use-cases-ac66}\n",
        "\n",
        "Gradient accumulation and activation checkpointing are particularly valuable in scenarios where hardware memory limitations present significant challenges during training. These techniques are widely used in training large-scale models, working with high-resolution data, and optimizing workflows in resource-constrained environments.\n",
        "\n",
        "A common use case for gradient accumulation is in training models that require large batch sizes to achieve stable convergence. For example, models like GPT, BERT, and other transformer architectures often benefit from larger batch sizes due to their improved gradient estimates. However, these batch sizes can quickly exceed the memory capacity of GPUs, especially when working with high-dimensional inputs or multiple GPUs. By accumulating gradients over multiple smaller micro-batches, gradient accumulation enables the use of effective large batch sizes without exceeding memory limits. This is particularly beneficial for tasks like language modeling, sequence-to-sequence learning, and image classification, where batch size significantly impacts training dynamics.\n",
        "\n",
        "Activation checkpointing enables training of deep neural networks with numerous layers or complex computations. In computer vision, architectures like ResNet-152, EfficientNet, and DenseNet require substantial memory to store intermediate activations during training. Checkpointing reduces this memory requirement through strategic recomputation of activations, making it possible to train these deeper architectures within GPU memory constraints.\n",
        "\n",
        "In the domain of natural language processing, models like GPT-3 or T5, with hundreds of layers and billions of parameters, rely heavily on checkpointing to manage memory usage. These models often exceed the memory capacity of a single GPU, making checkpointing a necessity for efficient training. Similarly, in generative adversarial networks (GANs), which involve both generator and discriminator models, checkpointing helps manage the combined memory requirements of both networks during training.\n",
        "\n",
        "Another critical application is in resource-constrained environments, such as edge devices or cloud-based platforms. In these scenarios, memory is often a limiting factor, and upgrading hardware may not always be a viable option. Gradient accumulation and checkpointing provide a cost-effective solution for training models on existing hardware, enabling efficient workflows without requiring additional investment in resources.\n",
        "\n",
        "These techniques are also indispensable in research and experimentation. They allow practitioners to prototype and test larger and more complex models, exploring novel architectures that would otherwise be infeasible due to memory constraints. This is particularly valuable for academic researchers and startups operating within limited budgets.\n",
        "\n",
        "Gradient accumulation and activation checkpointing solve fundamental challenges in training large-scale models within memory-constrained environments. These techniques have become essential tools for practitioners in natural language processing, computer vision, generative modeling, and edge computing, enabling broader adoption of advanced machine learning architectures.\n",
        "\n",
        "#### Challenges and Trade-offs {#sec-ai-training-challenges-tradeoffs-0a4c}\n",
        "\n",
        "While gradient accumulation and activation checkpointing are powerful tools for optimizing memory usage during training, their implementation introduces several challenges and trade-offs that must be carefully managed to ensure efficient and reliable workflows.\n",
        "\n",
        "One of the primary trade-offs of activation checkpointing is the additional computational overhead it introduces. By design, checkpointing saves memory by discarding and recomputing intermediate activations during the backward pass. This recomputation increases the training time, as portions of the forward pass must be executed multiple times. For example, in a transformer model with 12 layers, if checkpoints are placed every 4 layers, each intermediate activation would need to be recomputed up to three times during the backward pass. The extent of this overhead depends on how the model is segmented for checkpointing and the computational cost of each segment. Practitioners must strike a balance between memory savings and the additional time spent on recomputation, which may affect overall training efficiency.\n",
        "\n",
        "Gradient accumulation, while effective at simulating larger batch sizes, can lead to slower parameter updates. Since gradients are accumulated over multiple micro-batches, the model parameters are updated less frequently compared to training with full batches. This delay in updates can impact the speed of convergence, particularly in models sensitive to batch size dynamics. Additionally, gradient accumulation requires careful tuning of the learning rate. For instance, if accumulating gradients over 4 micro-batches to simulate a batch size of 128, the learning rate typically needs to be scaled up by a factor of 4 to maintain the same effective learning rate as training with full batches. The effective batch size increases with accumulation, necessitating proportional adjustments to the learning rate to maintain stable training.\n",
        "\n",
        "Debugging and monitoring are also more complex when using these techniques. In activation checkpointing, errors may arise during recomputation, making it more difficult to trace issues back to their source. Similarly, gradient accumulation requires ensuring that gradients are correctly accumulated and reset after each effective batch, which can introduce bugs if not handled properly.\n",
        "\n",
        "Another challenge is the increased complexity in implementation. While modern frameworks like PyTorch provide utilities to simplify gradient accumulation and checkpointing, effective use still requires understanding the underlying principles. For instance, activation checkpointing demands segmenting the model appropriately to minimize recomputation overhead while achieving meaningful memory savings. Improper segmentation can lead to suboptimal performance or excessive computational cost.\n",
        "\n",
        "These techniques may also have limited benefits in certain scenarios. For example, if the computational cost of recomputation in activation checkpointing is too high relative to the memory savings, it may negate the advantages of the technique. Similarly, for models or datasets that do not require large batch sizes, the complexity introduced by gradient accumulation may not justify its use.\n",
        "\n",
        "Despite these challenges, gradient accumulation and activation checkpointing remain indispensable for training large-scale models under memory constraints. By carefully managing their trade-offs and tailoring their application to specific workloads, practitioners can maximize the efficiency and effectiveness of these techniques.\n",
        "\n",
        "### Comparison {#sec-ai-training-comparison-d1e2}\n",
        "\n",
        "As summarized in @tbl-optimization, these techniques vary in their implementation complexity, hardware requirements, and impact on computation speed and memory usage. The selection of an appropriate optimization strategy depends on factors such as the specific use case, available hardware resources, and the nature of performance bottlenecks in the training process.\n",
        "\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Aspect                    | Prefetching and Overlapping                                | Mixed-Precision Training                                  | Gradient Accumulation and Checkpointing                                  |\n",
        "+:==========================+:===========================================================+:==========================================================+:=========================================================================+\n",
        "| Primary Goal              | Minimize data transfer delays and maximize GPU utilization | Reduce memory consumption and computational overhead      | Overcome memory limitations during backpropagation and parameter updates |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Key Mechanism             | Asynchronous data loading and parallel processing          | Combining FP16 and FP32 computations                      | Simulating larger batch sizes and selective activation storage           |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Memory Impact             | Increases memory usage for prefetch buffer                 | Reduces memory usage by using FP16                        | Reduces memory usage for activations and gradients                       |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Computation Speed         | Improves by reducing idle time                             | Accelerates computations using FP16                       | May slow down due to recomputations in checkpointing                     |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Scalability               | Highly scalable, especially for large datasets             | Enables training of larger models                         | Allows training deeper models on limited hardware                        |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Hardware Requirements     | Benefits from fast storage and multi-core CPUs             | Requires GPUs with FP16 support (e.g., Tensor Cores)      | Works on standard hardware                                               |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Implementation Complexity | Moderate (requires tuning of prefetch parameters)          | Low to moderate (with framework support)                  | Moderate (requires careful segmentation and accumulation)                |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Main Benefits             | Reduces training time, improves hardware utilization       | Faster training, larger models, reduced memory usage      | Enables larger batch sizes and deeper models                             |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Primary Challenges        | Tuning buffer sizes, increased memory usage                | Potential numerical instability, loss scaling needed      | Increased computational overhead, slower parameter updates               |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "| Ideal Use Cases           | Large datasets, complex preprocessing                      | Large-scale models, especially in NLP and computer vision | Very deep networks, memory-constrained environments                      |\n",
        "+---------------------------+------------------------------------------------------------+-----------------------------------------------------------+--------------------------------------------------------------------------+\n",
        "\n",
        ": **Optimization Strategies**: Prefetching, mixed-precision training, and gradient accumulation address distinct bottlenecks in AI training pipelinesâdata transfer, memory consumption, and backpropagationâto improve computational efficiency and enable larger models. Selecting an appropriate strategy balances implementation complexity against gains in speed and resource utilization, depending on hardware and workload characteristics. {#tbl-optimization .striped .hover}\n",
        "\n",
        "While these three techniques represent core optimization strategies in machine learning, they are part of a larger optimization landscape. Other notable techniques include pipeline parallelism for multi-GPU training, dynamic batching for variable-length inputs, and quantization for inference optimization. Practitioners should evaluate their specific requirements, including model architecture, dataset characteristics, and hardware constraints, to select the most appropriate combination of optimization techniques for their use case.\n",
        "\n",
        "## Distributed Systems {#sec-ai-training-distributed-systems-2db3}\n",
        "\n",
        "Thus far, we have focused on ML training pipelines from a single-system perspective. However, training machine learning models often requires scaling beyond a single machine due to increasing model complexity and dataset sizes. The demand for computational power, memory, and storage can exceed the capacity of individual devices, especially in domains like natural language processing, computer vision, and scientific computing. Distributed training addresses this challenge by spreading the workload across multiple machines, which coordinate to train a single model efficiently.\n",
        "\n",
        "Distributed training addresses this challenge by spreading the workload across multiple machines, which coordinate to train a single model efficiently. This process typically involves splitting the dataset into non-overlapping subsets, assigning each subset to a different GPU, and performing forward and backward passes independently on each device. Once gradients are computed on each GPU, they are synchronized and aggregated before updating the model parameters, ensuring that all devices learn in a consistent manner. @fig-distributed-training illustrates this process, showing how input data is divided, assigned to multiple GPUs for computation, and later synchronized to update the model collectively.\n",
        "\n",
        "::: {#fig-distributed-training fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\tikzset{%\n",
        "  mycylinder/.style={cylinder, shape border rotate=90, aspect=1.3, draw, fill=white,\n",
        "minimum width=20mm,minimum height=9mm,line width=1pt},\n",
        "  mycycle/.style={circle, draw=none, fill=red, minimum width=5mm},\n",
        "  myline/.style={line width=1.15pt,draw=cyan},\n",
        "%\n",
        "  Box/.style={align= flush center,\n",
        "    inner xsep=2pt,\n",
        "    draw=RedLine,\n",
        "    line width=0.75pt,\n",
        "    fill=RedL!20,\n",
        "    text width=22mm,\n",
        "    minimum width=22mm, minimum height=8mm\n",
        "  },\n",
        "%\n",
        "Line/.style={line width=1.0pt,black!50}\n",
        "}\n",
        "\n",
        "\\begin{scope}[node distance=-1.7,local bounding box = SC1]]\n",
        "\\node[mycylinder,fill=red!30] (A) {};\n",
        "\\scoped[on background layer]\n",
        "\\node[mycylinder, above=of A,fill=red!50] (C) {};\n",
        "\\node[mycylinder, below=of A,fill=red!10] (B) {};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(3.5,5))},local bounding box = SC2]\n",
        "\\node[mycycle] (C1) {};\n",
        "\\node[mycycle,below=of C1] (C2) {};\n",
        "\\node[mycycle,below=of C2] (C3) {};\n",
        "\\node[mycycle,below=of C3] (C4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C1)!0.5!(C2)$] (CL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C2)!0.5!(C3)$] (CL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(C3)!0.5!(C4)$] (CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(C1)!0.4!(C3)$] (CD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(C2)!0.6!(C4)$] (CD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {CL1, CL2, CL3, CD1, CD2} {\n",
        "    \\draw[myline] (\\y) -- (C\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,below=0.8 of C4](B1){GPU 1};\n",
        "\\draw[myline,dashed](C4)--(B1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(11.5,5))},local bounding box = SC3]\n",
        "\\node[mycycle] (3C1) {};\n",
        "\\node[mycycle,below=of 3C1] (3C2) {};\n",
        "\\node[mycycle,below=of 3C2] (3C3) {};\n",
        "\\node[mycycle,below=of 3C3] (3C4) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C1)!0.5!(3C2)$] (3CL1) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C2)!0.5!(3C3)$] (3CL2) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(3C3)!0.5!(3C4)$] (3CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,left=0.6 of $(3C1)!0.4!(3C3)$] (3CD1) {};\n",
        "\\node[mycycle,fill=green,left=0.6 of $(3C2)!0.6!(3C4)$] (3CD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {3CL1, 3CL2, 3CL3, 3CD1, 3CD2} {\n",
        "    \\draw[myline] (\\y) -- (3C\\x);\n",
        "  }\n",
        "}\n",
        "\n",
        "\\node[Box,below=0.8 of 3C4](3B1){GPU 1};\n",
        "\\draw[myline,dashed](3C4)--(3B1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(20.0,5))},local bounding box = SC4]\n",
        "\\node[mycycle] (4C1) {};\n",
        "\\node[mycycle,below=of 4C1] (4C2) {};\n",
        "\\node[mycycle,below=of 4C2] (4C3) {};\n",
        "\\node[mycycle,below=of 4C3] (4C4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C1)!0.5!(4C2)$] (4CL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C2)!0.5!(4C3)$] (4CL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(4C3)!0.5!(4C4)$] (4CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(4C1)!0.4!(4C3)$] (4CD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(4C2)!0.6!(4C4)$] (4CD2) {};\n",
        "%\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {4CL1, 4CL2, 4CL3, 4CD1, 4CD2} {\n",
        "    \\draw[myline] (\\y) -- (4C\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,below=0.8 of 4C4](4B1){GPU 1};\n",
        "\\draw[myline,dashed](4C4)--(4B1);\n",
        "\\end{scope}\n",
        "\\coordinate(X)at($(CD1)!0.5!(CD2)$);\n",
        "\\coordinate(Y)at($(3CD1)!0.5!(3CD2)$);\n",
        "\n",
        "\\node[fill=white,minimum height=45](ER)at($(X)!0.3!(Y)$){Error};\n",
        "\\node[fill=white,align=center,minimum height=45](CO)at($(X)!0.7!(Y)$){Compute\\\\ loss\\\\ function};\n",
        "\\draw[myline,-latex,shorten <=3mm](X)--(ER.west);\n",
        "\\draw[myline,-latex](ER.east)--(CO.west);\n",
        "\\draw[myline,-latex,shorten >=3mm](CO.east)--(Y);\n",
        "\\draw[myline,dashed](CO.south)--++(270:1)-|node[fill=white,align=center,\n",
        "pos=0.25](COM){Compare\\\\ predicted\\\\ label with\\\\ annotation}\n",
        "(ER.south);\n",
        "\n",
        "\\node[fill=white,align=center,minimum height=45](OP)at($(3CL2)!0.7!(4CL2)$){Avg\\\\ global\\\\ gradient};\n",
        "\\draw[myline,latex-,shorten <=1mm](4CL2)--(OP.east);\n",
        "%\n",
        "\\draw[myline,latex-,shorten <=3mm,shorten >=3mm](CL2)--(SC1.east|-CL2);\n",
        "%\n",
        "\\draw[myline,latex-,shorten <=3mm,shorten >=3mm](CL2)-|\n",
        "node[fill=white,pos=0.75]{Chunk}(SC1.north);\n",
        "%\n",
        "\\path[myline,draw=none,dashed](OP.north west)--++(90:1.7)coordinate(OP1);\n",
        "\\draw[myline,dashed]($(ER.north east)!0.5!(CO.north west)$)--++(90:1.7)coordinate(ER1);\n",
        "\\coordinate (C) at ($(OP1) + (0,5mm)$);\n",
        "\\coordinate (B) at ($(ER1) + (0,5mm)$);\n",
        "\\path[red](C)-|coordinate(D1)(4CD1);\n",
        "\\path[red](B)-|coordinate(A1)(SC1);\n",
        "\\coordinate (D) at ($(D1) + (15mm,0)$);\n",
        "\\coordinate (A) at ($(A1) + (-15mm,0)$);\n",
        "\\draw[myline,dashed,shorten >=3mm,shorten <=3mm](B)--\n",
        "node[fill=white]{Step 2 -- Compute gradients}(C);\n",
        "\\draw[myline,dashed,shorten >=3mm,pos=0.46](C)--\n",
        "node[fill=white]{Step 3 -- Update Parameters}(D);\n",
        "\\draw[myline,dashed,shorten >=3mm,pos=0.46](B)--\n",
        "node[fill=white]{Step 1 -- Predict a label}(A);\n",
        "\n",
        "\\node[above=0.3 of SC2]{Forward pass};\n",
        "\\node[above=0.3 of SC3]{Backward pass};\n",
        "%%%%%%%%%%%%%%%%%%%%%%%\n",
        "%down\n",
        "%%%%%%%%%%%%%%%%%%%%%%%\n",
        "\\begin{scope}[node distance=0.2,shift={(3.5,-3))},local bounding box = DSC2]\n",
        "\\node[mycycle] (DC1) {};\n",
        "\\node[mycycle,below=of DC1] (DC2) {};\n",
        "\\node[mycycle,below=of DC2] (DC3) {};\n",
        "\\node[mycycle,below=of DC3] (DC4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(DC1)!0.5!(DC2)$] (DCL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(DC2)!0.5!(DC3)$] (DCL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(DC3)!0.5!(DC4)$] (DCL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(DC1)!0.4!(DC3)$] (DCD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(DC2)!0.6!(DC4)$] (DCD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {DCL1, DCL2, DCL3, DCD1, DCD2} {\n",
        "    \\draw[myline] (\\y) -- (DC\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,above=0.8 of DC1](DB1){GPU 2};\n",
        "\\draw[myline,dashed](DC1)--(DB1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(11.5,-3))},local bounding box = DSC3]\n",
        "\\node[mycycle] (D3C1) {};\n",
        "\\node[mycycle,below=of D3C1] (D3C2) {};\n",
        "\\node[mycycle,below=of D3C2] (D3C3) {};\n",
        "\\node[mycycle,below=of D3C3] (D3C4) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(D3C1)!0.5!(D3C2)$] (D3CL1) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(D3C2)!0.5!(D3C3)$] (D3CL2) {};\n",
        "\\node[mycycle,fill=violet,right=0.6 of $(D3C3)!0.5!(D3C4)$] (D3CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,left=0.6 of $(D3C1)!0.4!(D3C3)$] (D3CD1) {};\n",
        "\\node[mycycle,fill=green,left=0.6 of $(D3C2)!0.6!(D3C4)$] (D3CD2) {};\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {D3CL1, D3CL2, D3CL3, D3CD1, D3CD2} {\n",
        "    \\draw[myline] (\\y) -- (D3C\\x);\n",
        "  }\n",
        "}\n",
        "\n",
        "\\node[Box,above=0.8 of D3C1](D3B1){GPU 2};\n",
        "\\draw[myline,dashed](D3C1)--(D3B1);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[node distance=0.2,shift={(20.0,-3))},local bounding box = DSC4]\n",
        "\\node[mycycle] (D4C1) {};\n",
        "\\node[mycycle,below=of D4C1] (D4C2) {};\n",
        "\\node[mycycle,below=of D4C2] (D4C3) {};\n",
        "\\node[mycycle,below=of D4C3] (D4C4) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(D4C1)!0.5!(D4C2)$] (D4CL1) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(D4C2)!0.5!(D4C3)$] (D4CL2) {};\n",
        "\\node[mycycle,fill=violet,left=0.6 of $(D4C3)!0.5!(D4C4)$] (D4CL3) {};\n",
        "%\n",
        "\\node[mycycle,fill=green,right=0.6 of $(D4C1)!0.4!(D4C3)$] (D4CD1) {};\n",
        "\\node[mycycle,fill=green,right=0.6 of $(D4C2)!0.6!(D4C4)$] (D4CD2) {};\n",
        "%\n",
        "%\n",
        "\\foreach \\x in {1,2,3,4} {\n",
        "  \\foreach \\y in {D4CL1, D4CL2, D4CL3, D4CD1, D4CD2} {\n",
        "    \\draw[myline] (\\y) -- (D4C\\x);\n",
        "  }\n",
        "}\n",
        "\\node[Box,above=0.8 of D4C1](D4B1){GPU 2};\n",
        "\\draw[myline,dashed](D4C1)--(D4B1);\n",
        "\\end{scope}\n",
        "%%%%%\n",
        "\\coordinate(DX)at($(DCD1)!0.5!(DCD2)$);\n",
        "\\coordinate(DY)at($(D3CD1)!0.5!(D3CD2)$);\n",
        "\n",
        "\\node[fill=white,minimum height=45](DER)at($(DX)!0.3!(DY)$){Error};\n",
        "\\node[fill=white,align=center,minimum height=45](DCO)at($(DX)!0.7!(DY)$){Compute\\\\ loss\\\\ function};\n",
        "\\draw[myline,-latex,shorten <=3mm](DX)--(DER.west);\n",
        "\\draw[myline,-latex](DER.east)--(DCO.west);\n",
        "\\draw[myline,-latex,shorten >=3mm](DCO.east)--(DY);\n",
        "\\draw[myline,dashed](DCO.north)--++(90:1)-|node[fill=white,align=center,\n",
        "pos=0.25](DCOM){Compare\\\\ predicted\\\\ label with\\\\ annotation}\n",
        "(DER.north);\n",
        "\n",
        "\\node[fill=white,align=center,minimum height=45](DOP)at($(D3CL2)!0.7!(D4CL2)$){Avg\\\\ global\\\\ gradient};\n",
        "\\draw[myline,latex-,shorten <=1mm](D4CL2)--(DOP.east);\n",
        "%\n",
        "\\draw[myline,latex-,shorten <=3mm,shorten >=3mm](DCL2)-|\n",
        "node[fill=white,pos=0.75]{Chunk}(SC1.south);\n",
        "%\n",
        "\\node[below=0.3 of DSC2]{Forward pass};\n",
        "\\node[below=0.3 of DSC3]{Backward pass};\n",
        "%%%\n",
        "\\coordinate(S1)at($(3B1)!0.5!(4B1)$);\n",
        "\\coordinate(S2)at($(D3B1)!0.5!(D4B1)$);\n",
        "\\coordinate(S)at($(S1)!0.5!(S2)$);\n",
        "\n",
        "\\node[draw=none,fill=green!50!black!90,text=white,inner xsep=10pt,\n",
        "             inner ysep=9pt, outer sep=5pt](CGG)at(S){\\textbf{Calculate Global Gradients}};\n",
        "%\n",
        "\\draw[myline,shorten <=1mm](OP.west)-|(CGG.80);\n",
        "\\draw[myline,-latex,shorten <=2mm](3CL2)-|(CGG.130);\n",
        "%\n",
        "\\draw[myline,shorten <=1mm](DOP.west)-|(CGG.280);\n",
        "\\draw[myline,-latex,shorten <=2mm](D3CL2)-|(CGG.230);\n",
        " \\end{tikzpicture}\n",
        "\n",
        "```\n",
        "**Data-Parallel Training**: Distributed machine learning scales model training by partitioning datasets across multiple gpus, enabling concurrent computation of gradients, and then aggregating these gradients to update shared model parameters. This approach accelerates training by leveraging parallel processing while maintaining a consistent model across all devices.\n",
        ":::\n",
        "\n",
        "This coordination introduces several fundamental challenges that distributed training systems must address. A distributed training system must orchestrate multi-machine computation by splitting up the work, managing communication between machines, and maintaining synchronization throughout the training process. Understanding these basic requirements provides the foundation for examining the main approaches to distributed training: data parallelism, which divides the training data across machines; model parallelism, which splits the model itself; and hybrid approaches that combine both strategies.\n",
        "\n",
        "### Data Parallelism {#sec-ai-training-data-parallelism-02b7}\n",
        "\n",
        "Data parallelism is a method for distributing the training process across multiple devices by splitting the dataset into smaller subsets. Each device trains a complete copy of the model using its assigned subset of the data. For example, when training an image classification model on 1 million images using 4 GPUs, each GPU would process 250,000 images while maintaining an identical copy of the model architecture.\n",
        "\n",
        "It is particularly effective when the dataset size is large but the model size is manageable, as each device must store a full copy of the model in memory. This method is widely used in scenarios such as image classification and natural language processing, where the dataset can be processed in parallel without dependencies between data samples. For instance, when training a ResNet model on ImageNet, each GPU can independently process its portion of images since the classification of one image doesn't depend on the results of another.\n",
        "\n",
        "Data parallelism builds on a key insight from stochastic gradient descent. Gradients computed on different minibatches can be averaged. This property enables parallel computation across devices. Let's examine why this works mathematically.\n",
        "\n",
        "Consider a model with parameters $Î¸$ training on a dataset $D$. The loss function for a single data point $x_i$ is $L(Î¸, x_i)$. In standard SGD with batch size $B$, the gradient update for a minibatch is:\n",
        "$$\n",
        "g = \\frac{1}{B} \\sum_{i=1}^B \\nabla_Î¸ L(Î¸, x_i)\n",
        "$$\n",
        "\n",
        "In data parallelism with $N$ devices, each device $k$ computes gradients on its own minibatch $B_k$:\n",
        "$$\n",
        "g_k = \\frac{1}{|B_k|} \\sum_{x_i \\in B_k} \\nabla_Î¸ L(Î¸, x_i)\n",
        "$$\n",
        "\n",
        "The global update averages these local gradients:\n",
        "$$\n",
        "g_{\\text{global}} = \\frac{1}{N} \\sum_{k=1}^N g_k\n",
        "$$\n",
        "\n",
        "This averaging is mathematically equivalent to computing the gradient on the combined batch $B_{\\text{total}} = \\bigcup_{k=1}^N B_k$:\n",
        "$$\n",
        "g_{\\text{global}} = \\frac{1}{|B_{\\text{total}}|} \\sum_{x_i \\in B_{\\text{total}}} \\nabla_Î¸ L(Î¸, x_i)\n",
        "$$\n",
        "\n",
        "This equivalence shows why data parallelism maintains the statistical properties of SGD training. The approach distributes distinct data subsets across devices, computes local gradients independently, and averages these gradients to approximate the full-batch gradient.\n",
        "\n",
        "The method parallels gradient accumulation, where a single device accumulates gradients over multiple forward passes before updating parameters. Both techniques leverage the additive properties of gradients to process large batches efficiently.\n",
        "\n",
        "#### Mechanics {#sec-ai-training-mechanics-bfb3}\n",
        "\n",
        "The process of data parallelism can be broken into a series of distinct steps, each with its role in ensuring the system operates efficiently. These steps are illustrated in @fig-data-parallelism.\n",
        "\n",
        "::: {#fig-data-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50,text=black\n",
        "},\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    line width=0.75pt,\n",
        "    node distance=2.0,\n",
        "    fill=VioletL2,\n",
        "    draw=VioletLine2,\n",
        "    text width=27mm,\n",
        "    align=flush center,\n",
        "    minimum width=27mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "  Box2/.style={Box,\n",
        "    draw=BlueLine,\n",
        "    fill=BlueL,\n",
        "    text width=21mm,\n",
        "    minimum width=22mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "  Text/.style={inner xsep=4pt,\n",
        "    draw=none, line width=0.75pt,\n",
        "    fill=TextColor!80,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=22mm, minimum height=7mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\node[Box,node distance=1](B1){GPU 1\\\\Forward \\& Backward Pass};\n",
        "\\node[Box,node distance=1,right=of B1](B2){GPU 2\\\\Forward \\& Backward Pass};\n",
        "\\node[Box,node distance=1,right=of B2](B3){GPU 3\\\\Forward \\& Backward Pass};\n",
        "\\node[Box,node distance=1,right=of B3](B4){GPU 4\\\\Forward \\& Backward Pass};\n",
        "%\n",
        "\\node[Box2,above=1.6 of B1](GB1){Batch 1};\n",
        "\\node[Box2,above=1.6 of B2](GB2){Batch 2};\n",
        "\\node[Box2,above=1.6 of B3](GB3){Batch 3};\n",
        "\\node[Box2,above=1.6 of B4](GB4){Batch 4};\n",
        "%\n",
        "\\node[Box2,above=of $(GB2)!0.5!(GB3)$,fill=RedL,draw=RedLine](GGB1){Input Data};\n",
        "%\n",
        "\\node[Box,below=of $(B2)!0.5!(B3)$,fill=GreenL,draw=GreenLine](DB1){Gradients GPU N};\n",
        "\\node[Box,below=1.5 of DB1,fill=GreenL,draw=GreenLine](DB2){Gradient Aggregation};\n",
        "\\node[Box,below=1.5 of DB2,fill=GreenL,draw=GreenLine](DB3){Model Update};\n",
        "%\n",
        "\\draw[Line,-latex](GGB1)\n",
        "-|node[Text,pos=0.8]{Split into\\\\Non-Overlapping Subsets}(GB1);\n",
        "\\draw[Line,-latex](GGB1)\n",
        "-|node[Text,pos=0.8]{Split into\\\\Non-Overlapping Subsets}(GB2);\n",
        "\\draw[Line,-latex](GGB1)\n",
        "-|node[Text,pos=0.8]{Split into\\\\Non-Overlapping Subsets}(GB3);\n",
        "\\draw[Line,-latex](GGB1)\n",
        "-|node[Text,pos=0.8]{Split into\\\\Non-Overlapping Subsets}(GB4);\n",
        "%%\n",
        "\\draw[Line,-latex](GB1)--node[Text,pos=0.5]{Assigned \\\\to GPU 1}(B1);\n",
        "\\draw[Line,-latex](GB2)--node[Text,pos=0.5]{Assigned \\\\to GPU 2}(B2);\n",
        "\\draw[Line,-latex](GB3)--node[Text,pos=0.5]{Assigned \\\\to GPU 3}(B3);\n",
        "\\draw[Line,-latex](GB4)--node[Text,pos=0.5]{Assigned \\\\to GPU 4}(B4);\n",
        "%\n",
        "\\draw[Line,-latex](B1)\n",
        "|-node[Text,pos=0.2,text=black]{Compute\\\\ Gradients}(DB1);\n",
        "\\draw[Line,-latex](B2)\n",
        "|-node[Text,pos=0.2,text=black]{Compute\\\\ Gradients}(DB1);\n",
        "\\draw[Line,-latex](B3)\n",
        "|-node[Text,pos=0.2,text=black]{Compute\\\\ Gradients}(DB1);\n",
        "\\draw[Line,-latex](B4)\n",
        "|-node[Text,pos=0.2,text=black]{Compute\\\\ Gradients}(DB1);\n",
        "%\n",
        "\\draw[Line,-latex](DB1)--node[Text,pos=0.5]{Synchronize Gradients}(DB2);\n",
        "\\draw[Line,-latex](DB2)--node[Text,pos=0.5]{Aggregate Gradients\\\\ and Update Parameters}(DB3);\n",
        "%\n",
        "\\draw[Line,-latex](GGB1.east)--++(0:6.6)\n",
        "|-node[Text,pos=0.8,text=black]{Next Mini-Batch}(DB3.east);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Data Parallelism**: Distributed training replicates the model across multiple devices, each processing a subset of the data before aggregating gradients to update model parameters, thereby accelerating the training process. This approach contrasts with model parallelism, where the model itself is partitioned across devices.\n",
        ":::\n",
        "\n",
        "##### Dataset Splitting {#sec-ai-training-dataset-splitting-68f8}\n",
        "\n",
        "The first step in data parallelism involves dividing the dataset into smaller, non-overlapping subsets. This ensures that each device processes a unique portion of the data, avoiding redundancy and enabling efficient utilization of available hardware. For instance, with a dataset of 100,000 training examples and 4 GPUs, each GPU would be assigned 25,000 examples. Modern frameworks like PyTorch's DistributedSampler handle this distribution automatically, implementing prefetching and caching mechanisms to ensure data is readily available for processing.\n",
        "\n",
        "##### Device Forward Pass {#sec-ai-training-device-forward-pass-2221}\n",
        "\n",
        "Once the data subsets are distributed, each device performs the forward pass independently. During this stage, the model processes its assigned batch of data, generating predictions and calculating the loss. For example, in a ResNet-50 model, each GPU would independently compute the convolutions, activations, and final loss for its batch. The forward pass is computationally intensive and benefits from hardware accelerators like NVIDIA V100 GPUs or Google TPUs, which are optimized for matrix operations.\n",
        "\n",
        "##### Backward Pass and Calculation {#sec-ai-training-backward-pass-calculation-d587}\n",
        "\n",
        "Following the forward pass, each device computes the gradients of the loss with respect to the model's parameters during the backward pass. Modern frameworks like PyTorch and TensorFlow handle this automatically through their autograd systems. For instance, if a model has 50 million parameters, each device calculates gradients for all parameters but based only on its local data subset.\n",
        "\n",
        "##### Gradient Synchronization {#sec-ai-training-gradient-synchronization-c987}\n",
        "\n",
        "To maintain consistency across the distributed system, the gradients computed by each device must be synchronized. This step typically uses the ring all-reduce algorithm, where each GPU communicates only with its neighbors, reducing communication overhead. For example, with 8 GPUs, each sharing gradients for a 100MB model, ring all-reduce requires only 7 communication steps instead of the 56 steps needed for naive peer-to-peer synchronization.\n",
        "\n",
        "##### Parameter Updating {#sec-ai-training-parameter-updating-86f7}\n",
        "\n",
        "After gradient aggregation[^fn-grad-avg], each device independently updates model parameters using the chosen optimization algorithm, such as SGD with momentum or Adam. This decentralized update strategy, implemented in frameworks like PyTorch's DistributedDataParallel (DDP), enables efficient parameter updates without requiring a central coordination server. Since all devices have identical gradient values after synchronization, they perform mathematically equivalent updates to maintain model consistency across the distributed system.\n",
        "\n",
        "[^fn-grad-avg]: The choice between summing or averaging gradients impacts model training dynamics. Gradient summation requires scaling the learning rate by the number of workers to maintain consistent update magnitudes. While gradient averaging provides more stable updates with reduced variance, it requires a central coordination node that can become a bottleneck as the number of workers increases. The decision depends on the specific distributed training setup and optimization goals.\n",
        "\n",
        "For example, in a system with 8 GPUs training a ResNet model, each GPU computes local gradients based on its data subset. After gradient averaging via ring all-reduce, every GPU has the same global gradient values. Each device then independently applies these gradients using the optimizer's update rule. If using SGD with learning rate 0.1, the update would be `weights = weights - 0.1 * gradients`. This process maintains mathematical equivalence to single-device training while enabling distributed computation.\n",
        "\n",
        "This process, which involves splitting data, performing computations, synchronizing results, and updating parameters, repeats for each batch of data. Modern frameworks automate this cycle, allowing developers to focus on model architecture and hyperparameter tuning rather than distributed computing logistics.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-c4bd}\n",
        "\n",
        "Data parallelism offers several key benefits that make it the predominant approach for distributed training. By splitting the dataset across multiple devices and allowing each device to train an identical copy of the model, this approach effectively addresses the core challenges in modern AI training systems.\n",
        "\n",
        "The primary advantage of data parallelism is its linear scaling capability with large datasets. As datasets grow into the terabyte range, processing them on a single machine becomes prohibitively time-consuming. For example, training a vision transformer on ImageNet (1.2 million images) might take weeks on a single GPU, but only days when distributed across 8 GPUs. This scalability is particularly valuable in domains like language modeling, where datasets can exceed billions of tokens.\n",
        "\n",
        "Hardware utilization efficiency represents another crucial benefit. Data parallelism maintains high GPU utilization rates, typically, above 85%, by ensuring each device actively processes its data portion. Modern implementations achieve this through asynchronous data loading and gradient computation overlapping with communication. For instance, while one batch computes gradients, the next batch's data is already being loaded and preprocessed.\n",
        "\n",
        "Implementation simplicity sets data parallelism apart from other distribution strategies. Modern frameworks have reduced complex distributed training to just a few lines of code. For example, converting a PyTorch model to use data parallelism often requires only wrapping it in `DistributedDataParallel` and initializing a distributed environment. This accessibility has contributed significantly to its widespread adoption in both research and industry.\n",
        "\n",
        "The approach also offers remarkable flexibility across model architectures. Whether training a ResNet (vision), BERT (language), or Graph Neural Network (graph data), the same data parallelism principles apply without modification. This universality makes it particularly valuable as a default choice for distributed training.\n",
        "\n",
        "Training time reduction is perhaps the most immediate benefit. Given proper implementation, data parallelism can achieve near-linear speedup with additional devices. Training that takes 100 hours on a single GPU might complete in roughly 13 hours on 8 GPUs, assuming efficient gradient synchronization and minimal communication overhead.\n",
        "\n",
        "While these benefits make data parallelism compelling, it's important to note that achieving these advantages requires careful system design. The next section examines the challenges that must be addressed to fully realize these benefits.\n",
        "\n",
        "#### Challenges {#sec-ai-training-challenges-adb9}\n",
        "\n",
        "While data parallelism is a powerful approach for distributed training, it introduces several challenges that must be addressed to achieve efficient and scalable training systems. These challenges stem from the inherent trade-offs between computation and communication, as well as the limitations imposed by hardware and network infrastructures.\n",
        "\n",
        "Communication overhead represents the most significant bottleneck in data parallelism. During gradient synchronization, each device must exchange gradient updatesâoften hundreds of megabytes per step for large models. With 8 GPUs training a 1-billion-parameter model, each synchronization step might require transferring several gigabytes of data across the network. While high-speed interconnects like NVLink (300 GB/s) or InfiniBand (200 Gb/s) help, the overhead remains substantial. NCCL's ring-allreduce[^fn-ring-allreduce] algorithm reduces this burden by organizing devices in a ring topology, but communication costs still grow with model size and device count.\n",
        "\n",
        "[^fn-ring-allreduce]: A communication strategy that minimizes data transfer overhead by organizing devices in a ring topology, first introduced for distributed machine learning in [Horovod](https://github.com/horovod/horovod).\n",
        "\n",
        "Scalability limitations become apparent as device count increases. While 8 GPUs might achieve $7\\times$ speedup (87.5% scaling efficiency), scaling to 64 GPUs typically yields only 45-50$\\times$ speedup (70-78% efficiency) due to growing synchronization costs. This non-linear scaling means that doubling the number of devices rarely halves the training time, particularly in configurations exceeding 16-32 devices.\n",
        "\n",
        "Memory constraints present a hard limit for data parallelism. Consider a transformer model with 175 billion parametersâit requires approximately 350 GB just to store model parameters in FP32. When accounting for optimizer states and activation memories, the total requirement often exceeds 1 TB per device. Since even high-end GPUs typically offer 80 GB or less, such models cannot use pure data parallelism.\n",
        "\n",
        "Workload imbalance affects heterogeneous systems significantly. In a cluster mixing A100 and V100 GPUs, the A100s might process batches $1.7\\times$ faster, forcing them to wait for the V100s to catch up. This idle time can reduce cluster utilization by 20-30% without proper load balancing mechanisms.\n",
        "\n",
        "Finally, there are challenges related to implementation complexity in distributed systems. While modern frameworks abstract much of the complexity, implementing data parallelism at scale still requires significant engineering effort. Ensuring fault tolerance, debugging synchronization issues, and optimizing data pipelines are non-trivial tasks that demand expertise in both machine learning and distributed systems.\n",
        "\n",
        "Despite these challenges, data parallelism remains an important technique for distributed training, with many strategies available to address its limitations. In the next section, we will explore model parallelism, another strategy for scaling training that is particularly well-suited for handling extremely large models that cannot fit on a single device.\n",
        "\n",
        "### Model Parallelism {#sec-ai-training-model-parallelism-39eb}\n",
        "\n",
        "Model parallelism splits neural networks across multiple computing devices when the model's parameters exceed single-device memory limits. Unlike data parallelism, where each device contains a complete model copy, model parallelism assigns different model components to different devices [@shazeer_mixture_of_experts_2017].\n",
        "\n",
        "Several implementations of model parallelism exist. In layer-based splitting, devices process distinct groups of layers sequentially. For instance, the first device might compute layers 1-4 while the second handles layers 5-8. Channel-based splitting divides the channels within each layer across devices, such as the first device processing 512 channels while the second manages the remaining ones. For transformer architectures, attention head splitting distributes different attention heads to separate devices.\n",
        "\n",
        "This distribution method enables training of large-scale models. GPT-3, with 175 billion parameters, relies on model parallelism for training. Vision transformers processing high-resolution 16k $\\times$ 16k pixel images use model parallelism to manage memory constraints. Mixture-of-Expert architectures leverage this approach to distribute their conditional computation paths across hardware.\n",
        "\n",
        "Device coordination follows a specific pattern during training. In the forward pass, data flows sequentially through model segments on different devices. The backward pass propagates gradients in reverse order through these segments. During parameter updates, each device modifies only its assigned portion of the model. This coordination ensures mathematical equivalence to training on a single device while enabling the handling of models that exceed individual device memory capacities.\n",
        "\n",
        "#### Mechanics {#sec-ai-training-mechanics-7843}\n",
        "\n",
        "Model parallelism divides neural networks across multiple computing devices, with each device computing a distinct portion of the model's operations. This division allows training of models whose parameter counts exceed single-device memory capacity. The technique encompasses device coordination, data flow management, and gradient computation across distributed model segments. The mechanics of model parallelism are illustrated in @fig-model-parallelism. These steps are described next:\n",
        "\n",
        "::: {#fig-model-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50,text=black\n",
        "},\n",
        "    Box/.style={inner xsep=2pt,\n",
        "    draw=GreenLine,\n",
        "    node distance=1.5,\n",
        "    line width=0.75pt,\n",
        "    fill=GreenL,\n",
        "    anchor=west,\n",
        "    text width=23mm,\n",
        "    align=flush center,\n",
        "    minimum width=23mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "  Text/.style={inner xsep=4pt,\n",
        "    draw=none, line width=0.75pt,\n",
        "    fill=TextColor!80,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=22mm, minimum height=6mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\node[Box](B1){Input Data};\n",
        "\\node[Box,right=of B1](B2){Model Part 1\\\\ on Device 1};\n",
        "\\node[Box,right=of B2](B3){Model Part 2\\ on Device 2};\n",
        "\\node[Box,right=of B3](B4){Model Part 3\\\\ on Device 3};\n",
        "\\node[Box,right=of B4](B5){Predictions};\n",
        "%\n",
        "\\draw[Line,-latex](B1)--++(90:12mm)\n",
        "-|node[Text,pos=0.25]{Forward Pass}(B2.120);\n",
        "\\draw[Line,latex-](B1)--++(270:12mm)\n",
        "-|node[Text,pos=0.25]{Gradient Updates}(B2.240);\n",
        "%\n",
        "\\draw[Line,-latex](B2)--++(90:12mm)\n",
        "-|node[Text,pos=0.25]{Intermediate Data}(B3.120);\n",
        "\\draw[Line,latex-](B2)--++(270:12mm)\n",
        "-|node[Text,pos=0.25]{Gradient Updates}(B3.240);\n",
        "%\n",
        "\\draw[Line,-latex](B3)--++(90:12mm)\n",
        "-|node[Text,pos=0.25]{Intermediate Data}(B4.120);\n",
        "\\draw[Line,latex-](B3)--++(270:12mm)\n",
        "-|node[Text,pos=0.25]{Gradient Updates}(B4.240);\n",
        "%\n",
        "\\draw[Line,-latex](B4)--++(90:12mm)\n",
        "-|node[Text,pos=0.25]{Output}(B5.120);\n",
        "\\draw[Line,latex-](B4)--++(270:12mm)\n",
        "-|node[Text,pos=0.25]{Backward Pass}(B5.240);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Model Partitioning**: Distributing a neural network across multiple devices enables training models larger than the memory capacity of a single device. This approach requires careful coordination of data flow and gradient computation between devices to maintain training efficiency.\n",
        ":::\n",
        "\n",
        "##### Model Partitioning {#sec-ai-training-model-partitioning-0cf8}\n",
        "\n",
        "The first step in model parallelism is dividing the model into smaller segments. For instance, in a deep neural network, layers are often divided among devices. In a system with two GPUs, the first half of the layers might reside on GPU 1, while the second half resides on GPU 2. Another approach is to split computations within a single layer, such as dividing matrix multiplications in transformer models across devices.\n",
        "\n",
        "##### Model Forward Pass {#sec-ai-training-model-forward-pass-eeb4}\n",
        "\n",
        "During the forward pass, data flows sequentially through the partitions. For example, data processed by the first set of layers on GPU 1 is sent to GPU 2 for processing by the next set of layers. This sequential flow ensures that the entire model is used, even though it is distributed across multiple devices. Efficient inter-device communication is crucial to minimize delays during this step [@deepspeed_training_system_2021].\n",
        "\n",
        "##### Backward Pass and Calculation {#sec-ai-training-backward-pass-calculation-7bf1}\n",
        "\n",
        "The backward pass computes gradients through the distributed model segments in reverse order. Each device calculates local gradients for its parameters and propagates necessary gradient information to previous devices. In transformer models, this means backpropagating through attention computations and feed-forward networks across device boundaries.\n",
        "\n",
        "For example, in a two-device setup with attention mechanisms split between devices, the backward computation works as follows: The second device computes gradients for the final feed-forward layers and attention heads. It then sends the gradient tensors for the attention output to the first device. The first device uses these received gradients to compute updates for its attention parameters and earlier layer weights.\n",
        "\n",
        "##### Parameter Updates {#sec-ai-training-parameter-updates-9dd0}\n",
        "\n",
        "Parameter updates occur independently on each device using the computed gradients and an optimization algorithm. A device holding attention layer parameters applies updates using only the gradients computed for those specific parameters. This localized update approach differs from data parallelism, which requires gradient averaging across devices.\n",
        "\n",
        "The optimization step proceeds as follows: Each device applies its chosen optimizer (such as Adam or AdaFactor) to update its portion of the model parameters. A device holding the first six transformer layers updates only those layers' weights and biases. This local parameter update eliminates the need for cross-device synchronization during the optimization step, reducing communication overhead.\n",
        "\n",
        "##### Iterative Process {#sec-ai-training-iterative-process-ff8b}\n",
        "\n",
        "Like other training strategies, model parallelism repeats these steps for every batch of data. As the dataset is processed over multiple iterations, the distributed model converges toward optimal performance.\n",
        "\n",
        "##### Parallelism Variations {#sec-ai-training-parallelism-variations-d45c}\n",
        "\n",
        "Model parallelism can be implemented through different strategies for dividing the model across devices. The three primary approaches are layer-wise partitioning, operator-level partitioning, and pipeline parallelism, each suited to different model structures and computational needs.\n",
        "\n",
        "###### Layer-wise Partitioning {#sec-ai-training-layerwise-partitioning-3d17}\n",
        "\n",
        "Layer-wise partitioning assigns distinct model layers to separate computing devices. In transformer architectures, this translates to specific devices managing defined sets of attention and feed-forward blocks. As illustrated in @fig-layers-blocks, a 24-layer transformer model distributed across four devices assigns six consecutive transformer blocks to each device. Device 1 processes blocks 1-6, device 2 handles blocks 7-12, and so forth.\n",
        "\n",
        "::: {#fig-layers-blocks fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    draw=VioletLine2,\n",
        "    line width=0.75pt,\n",
        "    node distance=1.4,\n",
        "    fill=VioletL2,\n",
        "    align=flush center,\n",
        "    text width=19mm,\n",
        "    minimum width=19mm,\n",
        "    minimum height=8mm\n",
        "  },\n",
        "}\n",
        "\\node[Box,fill=RedL,draw=RedLine](B1){Blocks 1-6};\n",
        "\\node[Box,right=of B1,fill=OrangeL,draw=OrangeLine](B2){Blocks 7-12};\n",
        "\\node[Box,right=of B2,fill=GreenL,draw=GreenLine](B3){Blocks 13-18};\n",
        "\\node[Box,right=of B3,fill=BlueL,draw=BlueLine](B4){Blocks 19-24};\n",
        "%\n",
        "\\node[Box,below=of B1,fill=VioletL2,draw=VioletLine2](G1){GPU 1};\n",
        "\\node[Box,below=of B2,fill=VioletL2,draw=VioletLine2](G2){GPU 2};\n",
        "\\node[Box,below=of B3,fill=VioletL2,draw=VioletLine2](G3){GPU 3};\n",
        "\\node[Box,below=of B4,fill=VioletL2,draw=VioletLine2](G4){GPU 4};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=13,\n",
        "line width=0.75pt,\n",
        "inner ysep=18,\n",
        "fill=BackColor,yshift=6,\n",
        "fit=(B1)(G1)](BB1){};\n",
        "\\node[below=1pt of BB1.north,anchor=north]{Device 1};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=13,\n",
        "line width=0.75pt,\n",
        "inner ysep=18,\n",
        "fill=BackColor,yshift=6,\n",
        "fit=(B2)(G2)](BB2){};\n",
        "\\node[below=1pt of BB2.north,anchor=north]{Device 2};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=13,\n",
        "line width=0.75pt,\n",
        "inner ysep=18,\n",
        "fill=BackColor,yshift=6,\n",
        "fit=(B3)(G3)](BB3){};\n",
        "\\node[below=1pt of BB3.north,anchor=north]{Device 3};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=13,\n",
        "line width=0.75pt,\n",
        "inner ysep=18,\n",
        "fill=BackColor,yshift=6,\n",
        "fit=(B4)(G4)](BB4){};\n",
        "\\node[below=1pt of BB4.north,anchor=north]{Device 4};\n",
        "\n",
        "\\foreach \\x in {1,2,3} {\n",
        "    \\pgfmathtruncatemacro{\\newX}{\\x + 1}\n",
        "    \\draw[-latex,Line] (B\\x) -- (B\\newX);\n",
        "}\n",
        "\\foreach \\x in {4,3,2} {\n",
        "    \\pgfmathtruncatemacro{\\newX}{\\x - 1}\n",
        "\\draw[red,-latex,Line](B\\x.230)to[out=230,in=300](B\\newX.300);\n",
        "}\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Layer-Wise Model Parallelism**: Distributing a transformer model across multiple gpus assigns consecutive layers to each device, enabling parallel processing of input data and accelerating training. This partitioning strategy allows each GPU to operate on a subset of the modelâs layers, reducing the memory footprint and computational load per device.\n",
        ":::\n",
        "\n",
        "This sequential processing introduces device idle time, as each device must wait for the previous device to complete its computation before beginning work. For example, while device 1 processes the initial blocks, devices 2, 3, and 4 remain inactive. Similarly, when device 2 begins its computation, device 1 sits idle. This pattern of waiting and idle time reduces hardware utilization efficiency compared to other parallelization strategies.\n",
        "\n",
        "Layer-wise partitioning assigns distinct model layers to separate computing devices. In transformer architectures, this translates to specific devices managing defined sets of attention and feed-forward blocks. A 24-layer transformer model distributed across four devices assigns six consecutive transformer blocks to each device. Device 1 processes blocks 1-6, device 2 handles blocks 7-12, and so forth.\n",
        "\n",
        "###### Pipeline Parallelism {#sec-ai-training-pipeline-parallelism-8f83}\n",
        "\n",
        "Pipeline parallelism extends layer-wise partitioning by introducing microbatching to minimize device idle time, as illustrated in @fig-pipline-parallelism. Instead of waiting for an entire batch to sequentially pass through all devices, the computation is divided into smaller segments called microbatches [harlap2018pipedream]. Each device, as represented by the rows in the drawing, processes its assigned model layers for different microbatches simultaneously. For example, the forward pass involves devices passing activations to the next stage (e.g., $F_{0,0}$ to $F_{1,0}$). The backward pass transfers gradients back through the pipeline (e.g., $B_{3,3}$ to $B_{2,3}$). This overlapping computation reduces idle time and increases throughput while maintaining the logical sequence of operations across devices.\n",
        "\n",
        "::: {#fig-pipline-parallelism}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[\n",
        "    every node/.style={font=\\sffamily, draw, minimum width=1cm, minimum height=0.7cm, align=center, outer sep=0},\n",
        "    fill0/.style={fill=red!20}, % Complementary to lightgray\n",
        "    fill1/.style={fill=blue!20}, % Complementary to orange\n",
        "    fill2/.style={fill=orange!20}, % Complementary to blue\n",
        "    fill3/.style={fill=yellow!20}, % Complementary to purple\n",
        "    back3/.style={fill=yellow!20} % Same as fill3\n",
        "]\n",
        "\n",
        "% Row 0\n",
        "\\node[fill0] (F0_0) {$F_{0,0}$};\n",
        "\\node[fill0, right=0cm of F0_0] (F0_1) {$F_{0,1}$};\n",
        "\\node[fill0, right=0cm of F0_1] (F0_2) {$F_{0,2}$};\n",
        "\\node[fill0, right=0cm of F0_2] (F0_3) {$F_{0,3}$};\n",
        "\n",
        "% Row 1\n",
        "\\node[fill1, above right=0cm and 0cm of F0_0] (F1_0) {$F_{1,0}$};\n",
        "\\node[fill1, right=0cm of F1_0] (F1_1) {$F_{1,1}$};\n",
        "\\node[fill1, right=0cm of F1_1] (F1_2) {$F_{1,2}$};\n",
        "\\node[fill1, right=0cm of F1_2] (F1_3) {$F_{1,3}$};\n",
        "\n",
        "% Row 2 (stacked above F1)\n",
        "\\node[fill2, above right=0cm and 0cm of F1_0] (F2_0) {$F_{2,0}$};\n",
        "\\node[fill2, right=0cm of F2_0] (F2_1) {$F_{2,1}$};\n",
        "\\node[fill2, right=0cm of F2_1] (F2_2) {$F_{2,2}$};\n",
        "\\node[fill2, right=0cm of F2_2] (F2_3) {$F_{2,3}$};\n",
        "\n",
        "% Row 3 (stacked above F2)\n",
        "\\node[fill3, above right=0cm and 0cm of F2_0] (F3_0) {$F_{3,0}$};\n",
        "\\node[fill3, right=0cm of F3_0] (F3_1) {$F_{3,1}$};\n",
        "\\node[fill3, right=0cm of F3_1] (F3_2) {$F_{3,2}$};\n",
        "\\node[fill3, right=0cm of F3_2] (F3_3) {$F_{3,3}$};\n",
        "\n",
        "% Row 3 (backward pass)\n",
        "\\node[back3, right=0cm of F3_3] (B3_3) {$B_{3,3}$};\n",
        "\\node[back3, right=0cm of B3_3] (B3_2) {$B_{3,2}$};\n",
        "\\node[back3, right=0cm of B3_2] (B3_1) {$B_{3,1}$};\n",
        "\\node[back3, right=0cm of B3_1] (B3_0) {$B_{3,0}$};\n",
        "\n",
        "% Row 2 (backward pass)\n",
        "\\node[fill2, below=0cm and 0cm of B3_2] (B2_3) {$B_{2,3}$};\n",
        "\\node[fill2, right=0cm of B2_3] (B2_2) {$B_{2,2}$};\n",
        "\\node[fill2, right=0cm of B2_2] (B2_1) {$B_{2,1}$};\n",
        "\\node[fill2, right=0cm of B2_1] (B2_0) {$B_{2,0}$};\n",
        "\n",
        "% Row 1 (backward pass)\n",
        "\\node[fill1, below=0cm of B2_2] (B1_3) {$B_{1,3}$};\n",
        "\\node[fill1, right=0cm of B1_3] (B1_2) {$B_{1,2}$};\n",
        "\\node[fill1, right=0cm of B1_2] (B1_1) {$B_{1,1}$};\n",
        "\\node[fill1, right=0cm of B1_1] (B1_0) {$B_{1,0}$};\n",
        "\n",
        "% Row 0 (backward pass)\n",
        "\\node[fill0, below=0cm of B1_2] (B0_3) {$B_{0,3}$};\n",
        "\\node[fill0, right=0cm of B0_3] (B0_2) {$B_{0,2}$};\n",
        "\\node[fill0, right=0cm of B0_2] (B0_1) {$B_{0,1}$};\n",
        "\\node[fill0, right=0cm of B0_1] (B0_0) {$B_{0,0}$};\n",
        "\n",
        "% Update nodes\n",
        "\\node[fill0, right=0cm of B0_0] (U0_0) {Update};\n",
        "\\node[fill1, above=0cm of U0_0] (U0_1) {Update};\n",
        "\\node[fill2, above=0cm of U0_1] (U0_2) {Update};\n",
        "\\node[fill3, above=0cm of U0_2] (U0_3) {Update};\n",
        "\n",
        "%\\node[draw=none, minimum width=4cm, minimum height=1cm, align=center, right=1cm of F0_3] (Bubble) {Bubble};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Pipeline Parallelism**: Microbatching distributes model layers across devices, enabling concurrent computation and minimizing idle time during both forward and backward passes to accelerate training. Activations flow sequentially between devices during the forward pass, while gradients propagate in reverse during backpropagation, effectively creating a pipeline for efficient resource utilization.\n",
        ":::\n",
        "\n",
        "In a transformer model distributed across four devices, device 1 would process blocks 1-6 for microbatch $N+1$ while device 2 computes blocks 7-12 for microbatch $N$. Simultaneously, device 3 executes blocks 13-18 for microbatch $N-1$, and device 4 processes blocks 19-24 for microbatch $N-2$. Each device maintains its assigned transformer blocks but operates on a different microbatch, creating a continuous flow of computation.\n",
        "\n",
        "The transfer of hidden states between devices occurs continuously rather than in distinct phases. When device 1 completes processing a microbatch, it immediately transfers the output tensor of shape [microbatch_size, sequence_length, hidden_dimension] to device 2 and begins processing the next microbatch. This overlapping computation pattern maintains full hardware utilization while preserving the model's mathematical properties.\n",
        "\n",
        "###### Operator-level Parallelism {#sec-ai-training-operatorlevel-parallelism-bc77}\n",
        "\n",
        "Operator-level parallelism divides individual neural network operations across devices. In transformer models, this often means splitting attention computations. Consider a transformer with 64 attention heads and a hidden dimension of 4096. Two devices might split this computation as follows: Device 1 processes attention heads 1-32, computing queries, keys, and values for its assigned heads. Device 2 simultaneously processes heads 33-64. Each device handles attention computations for [batch_size, sequence_length, 2048] dimensional tensors.\n",
        "\n",
        "Matrix multiplication operations in feed-forward networks also benefit from operator-level splitting. A feed-forward layer with input dimension 4096 and intermediate dimension 16384 can split across devices along the intermediate dimension. Device 1 computes the first 8192 intermediate features, while device 2 computes the remaining 8192 features. This division reduces peak memory usage while maintaining mathematical equivalence to the original computation.\n",
        "\n",
        "###### Summary {#sec-ai-training-summary-89be}\n",
        "\n",
        "Each of these partitioning methods addresses specific challenges in training large models, and their applicability depends on the model architecture and the resources available. By selecting the appropriate strategy, practitioners can train models that exceed the limits of individual devices, enabling the development of cutting-edge machine learning systems.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-fdf5}\n",
        "\n",
        "Model parallelism offers several significant benefits, making it an essential strategy for training large-scale models that exceed the capacity of individual devices. These advantages stem from its ability to partition the workload across multiple devices, enabling the training of more complex and resource-intensive architectures.\n",
        "\n",
        "Memory scaling represents the primary advantage of model parallelism. Current transformer architectures contain up to hundreds of billions of parameters. A 175 billion parameter model with 32-bit floating point precision requires 700 GB of memory just to store its parameters. When accounting for activations, optimizer states, and gradients during training, the memory requirement multiplies several fold. Model parallelism makes training such architectures feasible by distributing these memory requirements across devices.\n",
        "\n",
        "Another key advantage is the efficient utilization of device memory and compute power. Since each device only needs to store and process a portion of the model, memory usage is distributed across the system. This allows practitioners to work with larger batch sizes or more complex layers without exceeding memory limits, which can also improve training stability and convergence.\n",
        "\n",
        "Model parallelism also provides flexibility for different model architectures. Whether the model is sequential, as in many natural language processing tasks, or composed of computationally intensive operations, as in attention-based models or convolutional networks, there is a partitioning strategy that fits the architecture. This adaptability makes model parallelism applicable to a wide variety of tasks and domains.\n",
        "\n",
        "Finally, model parallelism is a natural complement to other distributed training strategies, such as data parallelism and pipeline parallelism. By combining these approaches, it becomes possible to train models that are both large in size and require extensive data. This hybrid flexibility is especially valuable in cutting-edge research and production environments, where scaling models and datasets simultaneously is critical for achieving state-of-the-art performance.\n",
        "\n",
        "While model parallelism introduces these benefits, its effectiveness depends on the careful design and implementation of the partitioning strategy. In the next section, we will discuss the challenges associated with model parallelism and the trade-offs involved in its use.\n",
        "\n",
        "#### Challenges {#sec-ai-training-challenges-7e5d}\n",
        "\n",
        "While model parallelism provides a powerful approach for training large-scale models, it also introduces unique challenges. These challenges arise from the complexity of partitioning the model and the dependencies between partitions during training. Addressing these issues requires careful system design and optimization.\n",
        "\n",
        "One major challenge in model parallelism is balancing the workload across devices. Not all parts of a model require the same amount of computation. For instance, in layer-wise partitioning, some layers may perform significantly more operations than others, leading to an uneven distribution of work. Devices responsible for the heavier computations may become bottlenecks, leaving others underutilized. This imbalance reduces overall efficiency and slows down training. Identifying optimal partitioning strategies is critical to ensuring all devices contribute evenly.\n",
        "\n",
        "Another challenge is data dependency between devices. During the forward pass, activation tensors of shape [batch_size, sequence_length, hidden_dimension] must transfer between devices. For a typical transformer model with batch size 32, sequence length 2048, and hidden dimension 2048, each transfer moves approximately 512 MB of data at float32 precision. With gradient transfers in the backward pass, a single training step can require several gigabytes of inter-device communication. On systems using PCIe interconnects with 64 GB/s theoretical bandwidth, these transfers introduce significant latency.\n",
        "\n",
        "Model parallelism also increases the complexity of implementation and debugging. Partitioning the model, ensuring proper data flow, and synchronizing gradients across devices require detailed coordination. Errors in any of these steps can lead to incorrect gradient updates or even model divergence. Debugging such errors is often more difficult in distributed systems, as issues may arise only under specific conditions or workloads.\n",
        "\n",
        "A further challenge is pipeline bubbles in pipeline parallelism. With m pipeline stages, the first $m-1$ steps operate at reduced efficiency as the pipeline fills. For example, in an 8-device pipeline, the first device begins processing immediately, but the eighth device remains idle for 7 steps. This warmup period reduces hardware utilization by approximately $(m-1)/b$ percent, where $b$ is the number of batches in the training step.\n",
        "\n",
        "Finally, model parallelism may be less effective for certain architectures, such as models with highly interdependent operations. In these cases, splitting the model may lead to excessive communication overhead, outweighing the benefits of parallel computation. For such models, alternative strategies like data parallelism or hybrid approaches might be more suitable.\n",
        "\n",
        "Despite these challenges, model parallelism remains an indispensable tool for training large models. With careful optimization and the use of modern frameworks, many of these issues can be mitigated, enabling efficient distributed training at scale.\n",
        "\n",
        "### Hybrid Parallelism {#sec-ai-training-hybrid-parallelism-991e}\n",
        "\n",
        "Hybrid parallelism combines model parallelism and data parallelism when training neural networks [@narayanan_pipeline_parallelism_2021]. A model might be too large to store on one GPU (requiring model parallelism) while simultaneously needing to process large batches of data efficiently (requiring data parallelism).\n",
        "\n",
        "Training a 175-billion parameter language model on a dataset of 300 billion tokens demonstrates hybrid parallelism in practice. The neural network layers distribute across multiple GPUs through model parallelism, while data parallelism enables different GPU groups to process separate batches. The hybrid approach coordinates these two forms of parallelization.\n",
        "\n",
        "This strategy addresses two fundamental constraints. First, memory constraints arise when model parameters exceed single-device memory capacity. Second, computational demands increase when dataset size necessitates distributed processing.\n",
        "\n",
        "#### Mechanics {#sec-ai-training-mechanics-ad88}\n",
        "\n",
        "Hybrid parallelism operates by combining the processes of model partitioning and dataset splitting, ensuring efficient utilization of both memory and computation across devices. This integration allows large-scale machine learning systems to overcome the constraints imposed by individual parallelism strategies.\n",
        "\n",
        "##### Model and Data Partitioning {#sec-ai-training-model-data-partitioning-e3a9}\n",
        "\n",
        "Hybrid parallelism divides both model architecture and training data across devices. The model divides through layer-wise or operator-level partitioning, where GPUs process distinct neural network segments. Simultaneously, the dataset splits into subsets, allowing each device group to train on different batches. A transformer model might distribute its attention layers across four GPUs, while each GPU group processes a unique 1,000-example batch. This dual partitioning distributes memory requirements and computational workload.\n",
        "\n",
        "##### Forward Pass {#sec-ai-training-forward-pass-cab5}\n",
        "\n",
        "During the forward pass, input data flows through the distributed model. Each device processes its assigned portion of the model using the data subset it holds. For example, in a hybrid system with four devices, two devices might handle different layers of the model (model parallelism) while simultaneously processing distinct data batches (data parallelism). Communication between devices ensures that intermediate outputs from model partitions are passed seamlessly to subsequent partitions.\n",
        "\n",
        "##### Backward Pass and Gradient Calculation {#sec-ai-training-backward-pass-gradient-calculation-6f25}\n",
        "\n",
        "During the backward pass, gradients are calculated for the model partitions stored on each device. Data-parallel devices that process the same subset of the model but different data batches aggregate their gradients, ensuring that updates reflect contributions from the entire dataset. For model-parallel devices, gradients are computed locally and passed to the next layer in reverse order. In a two-device model-parallel configuration, for example, the first device computes gradients for layers 1-3, then transmits these to the second device for layers 4-6. This combination of gradient synchronization and inter-device communication ensures consistency across the distributed system.\n",
        "\n",
        "##### Parameter Updates {#sec-ai-training-parameter-updates-8514}\n",
        "\n",
        "After gradient synchronization, model parameters are updated using the chosen optimization algorithm. Devices working in data parallelism update their shared model partitions consistently, while model-parallel devices apply updates to their local segments. Efficient communication is critical in this step to minimize delays and ensure that updates are correctly propagated across all devices.\n",
        "\n",
        "##### Iterative Process {#sec-ai-training-iterative-process-f149}\n",
        "\n",
        "Hybrid parallelism follows an iterative process similar to other training strategies. The combination of model and data distribution allows the system to process large datasets and complex models efficiently over multiple training epochs. By balancing the computational workload and memory requirements, hybrid parallelism enables the training of advanced machine learning models that would otherwise be infeasible.\n",
        "\n",
        "##### Parallelism Variations {#sec-ai-training-parallelism-variations-06fe}\n",
        "\n",
        "Hybrid parallelism can be implemented in different configurations, depending on the model architecture, dataset characteristics, and available hardware. These variations allow for tailored solutions that optimize performance and scalability for specific training requirements.\n",
        "\n",
        "###### Hierarchical Parallelism {#sec-ai-training-hierarchical-parallelism-6807}\n",
        "\n",
        "Hierarchical hybrid parallelism applies model parallelism to divide the model across devices first and then layers data parallelism on top to handle the dataset distribution. For example, in a system with eight devices, four devices may hold different partitions of the model, while each partition is replicated across the other four devices for data parallel processing. This approach is well-suited for large models with billions of parameters, where memory constraints are a primary concern.\n",
        "\n",
        "Hierarchical hybrid parallelism ensures that the model size is distributed across devices, reducing memory requirements, while data parallelism ensures that multiple data samples are processed simultaneously, improving throughput. This dual-layered approach is particularly effective for models like transformers, where each layer may have a significant memory footprint.\n",
        "\n",
        "###### Intra-layer Parallelism {#sec-ai-training-intralayer-parallelism-5b43}\n",
        "\n",
        "Intra-layer hybrid parallelism combines model and data parallelism within individual layers of the model. For instance, in a transformer architecture, the attention mechanism can be split across multiple devices (model parallelism), while each device processes distinct batches of data (data parallelism). This fine-grained integration allows the system to optimize resource usage at the level of individual operations, enabling training for models with extremely large intermediate computations.\n",
        "\n",
        "This variation is particularly useful in scenarios where specific layers, such as attention or feedforward layers, have computationally intensive operations that are difficult to distribute effectively using model or data parallelism alone. Intra-layer hybrid parallelism addresses this challenge by applying both strategies simultaneously.\n",
        "\n",
        "###### Inter-layer Parallelism {#sec-ai-training-interlayer-parallelism-e6cf}\n",
        "\n",
        "Inter-layer hybrid parallelism focuses on distributing the workload between model and data parallelism at the level of distinct model layers. For example, early layers of a neural network may be distributed using model parallelism, while later layers leverage data parallelism. This approach aligns with the observation that certain layers in a model may be more memory-intensive, while others benefit from increased data throughput.\n",
        "\n",
        "This configuration allows for dynamic allocation of resources, adapting to the specific demands of different layers in the model. By tailoring the parallelism strategy to the unique characteristics of each layer, inter-layer hybrid parallelism achieves an optimal balance between memory usage and computational efficiency.\n",
        "\n",
        "#### Benefits {#sec-ai-training-benefits-9a05}\n",
        "\n",
        "The adoption of hybrid parallelism in machine learning systems addresses some of the most significant challenges posed by the ever-growing scale of models and datasets. By blending the strengths of model parallelism and data parallelism, this approach provides a comprehensive solution to scaling modern machine learning workloads.\n",
        "\n",
        "One of the most prominent benefits of hybrid parallelism is its ability to scale seamlessly across both the model and the dataset. Modern neural networks, particularly transformers used in natural language processing and vision applications, often contain billions of parameters. These models, paired with massive datasets, make training on a single device impractical or even impossible. Hybrid parallelism enables the division of the model across multiple devices to manage memory constraints while simultaneously distributing the dataset to process vast amounts of data efficiently. This dual capability ensures that training systems can handle the computational and memory demands of the largest models and datasets without compromise.\n",
        "\n",
        "Another critical advantage lies in hardware utilization. In many distributed training systems, inefficiencies can arise when devices sit idle during different stages of computation or synchronization. Hybrid parallelism mitigates this issue by ensuring that all devices are actively engaged. Whether a device is computing forward passes through its portion of the model or processing data batches, hybrid strategies maximize resource usage, leading to faster training times and improved throughput.\n",
        "\n",
        "Flexibility is another hallmark of hybrid parallelism. Machine learning models vary widely in architecture and computational demands. For instance, convolutional neural networks prioritize spatial data processing, while transformers require intensive operations like matrix multiplications in attention mechanisms. Hybrid parallelism adapts to these diverse needs by allowing practitioners to apply model and data parallelism selectively. This adaptability ensures that hybrid approaches can be tailored to the specific requirements of a given model, making it a versatile solution for diverse training scenarios.\n",
        "\n",
        "Moreover, hybrid parallelism reduces communication bottlenecks, a common issue in distributed systems. By striking a balance between distributing model computations and spreading data processing, hybrid strategies minimize the amount of inter-device communication required during training. This efficient coordination not only speeds up the training process but also enables the effective use of large-scale distributed systems where network latency might otherwise limit performance.\n",
        "\n",
        "Finally, hybrid parallelism supports the ambitious scale of modern AI research and development. It provides a framework for leveraging cutting-edge hardware infrastructures, including clusters of GPUs or TPUs, to train models that push the boundaries of what's possible. Without hybrid parallelism, many of the breakthroughs in AI, including large language models and advanced vision systems, would remain unattainable due to resource limitations.\n",
        "\n",
        "By enabling scalability, maximizing hardware efficiency, and offering flexibility, hybrid parallelism has become an essential strategy for training the most complex machine learning systems. It is not just a solution to today's challenges but also a foundation for the future of AI, where models and datasets will continue to grow in complexity and size.\n",
        "\n",
        "#### Challenges {#sec-ai-training-challenges-7ac8}\n",
        "\n",
        "While hybrid parallelism provides a robust framework for scaling machine learning training, it also introduces complexities that require careful consideration. These challenges stem from the intricate coordination needed to integrate both model and data parallelism effectively. Understanding these obstacles is crucial for designing efficient hybrid systems and avoiding potential bottlenecks.\n",
        "\n",
        "One of the primary challenges of hybrid parallelism is communication overhead. Both model and data parallelism involve significant inter-device communication. In model parallelism, devices must exchange intermediate outputs and gradients to maintain the sequential flow of computation. In data parallelism, gradients computed on separate data subsets must be synchronized across devices. Hybrid parallelism compounds these demands, as it requires efficient communication for both processes simultaneously. If not managed properly, the resulting overhead can negate the benefits of parallelization, particularly in large-scale systems with slower interconnects or high network latency.\n",
        "\n",
        "Another critical challenge is the complexity of implementation. Hybrid parallelism demands a nuanced understanding of both model and data parallelism techniques, as well as the underlying hardware and software infrastructure. Designing efficient hybrid strategies involves making decisions about how to partition the model, how to distribute data, and how to synchronize computations across devices. This process often requires extensive experimentation and optimization, particularly for custom architectures or non-standard hardware setups. While modern frameworks like PyTorch and TensorFlow provide tools for distributed training, implementing hybrid parallelism at scale still requires significant engineering expertise.\n",
        "\n",
        "Workload balancing also presents a challenge in hybrid parallelism. In a distributed system, not all devices may have equal computational capacity. Some devices may process data or compute gradients faster than others, leading to inefficiencies as faster devices wait for slower ones to complete their tasks. Additionally, certain model layers or operations may require more resources than others, creating imbalances in computational load. Managing this disparity requires careful tuning of partitioning strategies and the use of dynamic workload distribution techniques.\n",
        "\n",
        "Memory constraints remain a concern, even in hybrid setups. While model parallelism addresses the issue of fitting large models into device memory, the additional memory requirements for data parallelism, such as storing multiple data batches and gradient buffers, can still exceed available capacity. This is especially true for models with extremely large intermediate computations, such as transformers with high-dimensional attention mechanisms. Balancing memory usage across devices is essential to prevent resource exhaustion during training.\n",
        "\n",
        "Lastly, hybrid parallelism poses challenges related to fault tolerance and debugging. Distributed systems are inherently more prone to hardware failures and synchronization errors. Debugging issues in hybrid setups can be significantly more complex than in standalone model or data parallelism systems, as errors may arise from interactions between the two approaches. Ensuring robust fault-tolerance mechanisms and designing tools for monitoring and debugging distributed systems are essential for maintaining reliability.\n",
        "\n",
        "Despite these challenges, hybrid parallelism remains an indispensable strategy for training state-of-the-art machine learning models. By addressing these obstacles through optimized communication protocols, intelligent partitioning strategies, and robust fault-tolerance systems, practitioners can unlock the full potential of hybrid parallelism and drive innovation in AI research and applications.\n",
        "\n",
        "### Comparison {#sec-ai-training-comparison-c2fe}\n",
        "\n",
        "The features of data parallelism, model parallelism, and hybrid parallelism are summarized in @tbl-parallelism-compare. This comparison highlights their respective focuses, memory requirements, communication overheads, scalability, implementation complexity, and ideal use cases. By examining these factors, practitioners can determine the most suitable approach for their training needs.\n",
        "\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Aspect                             | Data Parallelism                   | Model Parallelism                  | Hybrid Parallelism                 |\n",
        "+:===================================+:===================================+:===================================+:===================================+\n",
        "| Focus                              | Distributes dataset across         | Distributes the model across       | Combines model and data parallelism|\n",
        "|                                    | devices, each with a full model    | devices, each handling a portion   | for balanced scalability           |\n",
        "|                                    | copy                               | of the model                       |                                    |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Memory Requirement per Device      | High (entire model on each device) | Low (model split across devices)   | Moderate (splits model and dataset |\n",
        "|                                    |                                    |                                    | across devices)                    |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Communication Overhead             | Moderate to High (gradient         | High (communication for            | Very High (requires synchronization|\n",
        "|                                    | synchronization across devices)    | intermediate activations and       | for both model and data)           |\n",
        "|                                    |                                    | gradients)                         |                                    |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Scalability                        | Good for large datasets with       | Good for very large models with    | Excellent for extremely large      |\n",
        "|                                    | moderate model sizes               | smaller datasets                   | models and datasets                |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Implementation Complexity          | Low to Moderate (relatively        | Moderate to High (requires         | High (complex integration of       |\n",
        "|                                    | straightforward with existing      | careful partitioning and           | model and data parallelism)        |\n",
        "|                                    | tools)                             | coordination)                      |                                    |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "| Ideal Use Case                     | Large datasets where model fits    | Extremely large models that exceed | Training massive models on vast    |\n",
        "|                                    | within a single device             | single-device memory limits        | datasets in large-scale systems    |\n",
        "+------------------------------------+------------------------------------+------------------------------------+------------------------------------+\n",
        "\n",
        ": **Parallel Training Strategies**: Data, model, and hybrid parallelism each address the challenges of scaling machine learning training by distributing workload across devices, differing in how they partition data and model parameters to optimize memory usage, communication, and scalability. Understanding these trade-offs enables practitioners to select the most effective approach for their specific model and infrastructure. {#tbl-parallelism-compare .striped .hover}\n",
        "\n",
        "@fig-parallelism-flowchart provides a general guideline for selecting parallelism strategies in distributed training systems. While the chart offers a structured decision-making process based on model size, dataset size, and scaling constraints, it is intentionally simplified. Real-world scenarios often involve additional complexities such as hardware heterogeneity, communication bandwidth, and workload imbalance, which may influence the choice of parallelism techniques. The chart is best viewed as a foundational tool for understanding the trade-offs and decision points in parallelism strategy selection. Practitioners should consider this guideline as a starting point and adapt it to the specific requirements and constraints of their systems to achieve optimal performance.\n",
        "\n",
        "::: {#fig-parallelism-flowchart fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50,text=black\n",
        "},\n",
        "  Box/.style={inner xsep=2pt,\n",
        "    node distance=11mm,\n",
        "    draw=GreenLine, line width=0.75pt,\n",
        "    fill=GreenL,\n",
        "    text width=27mm,align=flush center,\n",
        "    minimum width=27mm, minimum height=9mm\n",
        "  },\n",
        "    Box1/.style={Box,\n",
        "    draw=RedLine, fill=RedL,\n",
        "    text width=31mm,\n",
        "    minimum width=32mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "  Text/.style={inner xsep=2pt,\n",
        "    draw=none, line width=0.75pt,\n",
        "    fill=TextColor,\n",
        "    font=\\footnotesize\\usefont{T1}{phv}{m}{n},\n",
        "    align=flush center,\n",
        "    minimum width=7mm,\n",
        "    minimum height=5mm\n",
        "  },\n",
        " decision/.style = {align=flush center,text width=42mm,diamond, aspect=2.0, node distance=6mm,\n",
        "                             inner sep=-4pt, fill=VioletL2, draw=VioletLine},\n",
        "}\n",
        "\\node[Box](B1){Hybrid\\\\ Parallelism};\n",
        "\\node[Box,node distance=8mm,right=of B1](B2){Model\\\\Parallelism};\n",
        "\\node[Box,node distance=8 mm,right=of B2](B3){Data\\\\ Parallelism};\n",
        "\\node[Box,right=of B3,fill=RedL, draw=RedLine](B4){Single Device Optimization};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=5mm,inner ysep=5mm,\n",
        "yshift=-1mm,\n",
        "fill=BackColor,fit=(B1)(B3),line width=0.75pt](BB){};\n",
        "\\node[decision,node distance=18mm,\n",
        "above=of B4](G1B4){Is the dataset\\\\ very large?};\n",
        "\n",
        "\\node[Box1,node distance=18mm,\n",
        "above=of $(B2.north)!0.5!(B3.north)$](G1B3){Is scaling the model\\\\ or data more critical?};\n",
        "\\node[decision,above=of G1B3](G2B3){Are both constraints significant?};\n",
        "\\node[decision,above=of G2B3](G3B3){Does the dataset fit\\\\ in a single device?};\n",
        "\\node[decision,above=of G3B3](G4B3){Does the model fit\\\\ in a single device?};\n",
        "\\node[Box,node distance=6mm,above=of G4B3,fill=BlueL, draw=BlueLine](G5B3){Start};\n",
        "%\n",
        "\\node[Box,below=of B2,fill=BlueL, draw=BlueLine](DB2){End};\n",
        "%\n",
        "\\draw[Line,-latex](G5B3)--(G4B3);\n",
        "\\draw[Line,-latex](G4B3)--node[right,pos=0.35]{No}(G3B3);\n",
        "\\draw[Line,-latex](G4B3)-|node[above,pos=0.05]{Yes}(G1B4);\n",
        "\\draw[Line,-latex](G3B3)--node[right,pos=0.35]{No}(G2B3);\n",
        "\\draw[Line,-latex](G2B3)--node[right,pos=0.35]{No}(G1B3);\n",
        "\\draw[Line,-latex](G1B4)--node[right,pos=0.15]{No}(B4);\n",
        "%\n",
        "\\draw[Line,-latex](G3B3)-|node[above,pos=0.22]{Yes}(B2.160);\n",
        "\\draw[Line,-latex](G2B3)-|node[above,pos=0.05]{Yes}(B1);\n",
        "\\draw[Line,-latex](G1B3.south)--node[left,align=center,pos=0.45]{Scaling Model}++(270:9mm)-|(B2);\n",
        "\\draw[Line,-latex](G1B3.south)--++(270:9mm)-|(B3);%node[Text,pos=0.22]{Scaling\\\\ Model}\n",
        "\\draw[Line,-latex](G1B4)-|node[above,pos=0.22,text=black]{Yes}(B3.40);\n",
        "%\n",
        "\\draw[Line,-latex](B1)|-(DB2);\n",
        "\\draw[Line,-latex](B3)|-(DB2);\n",
        "\\draw[Line,-latex](B2)--(DB2);\n",
        "\\node[above=12pt of  BB.south west,inner sep=0pt,xshift=3,\n",
        "anchor=north west,fill=BackColor]{Parallelism Opportunities};\n",
        "\\end{tikzpicture}\n",
        "\n",
        "```\n",
        "**Parallelism Strategy Selection**: Distributed training systems leverage data, model, or hybrid parallelism based on model size, dataset size, and scaling constraints to accelerate training and efficiently utilize resources. This flowchart guides practitioners through a decision process, recognizing that real-world deployments often require adaptation due to factors like hardware heterogeneity and workload imbalance.\n",
        ":::\n",
        "\n",
        "## Optimization Techniques {#sec-ai-training-optimization-techniques-ab8a}\n",
        "\n",
        "Efficient training of machine learning models relies on identifying and addressing the factors that limit performance and scalability. This section explores a range of optimization techniques designed to improve the efficiency of training systems. By targeting specific bottlenecks, optimizing hardware and software interactions, and employing scalable training strategies, these methods enable practitioners to build systems that effectively utilize resources while minimizing training time.\n",
        "\n",
        "### Identifying Bottlenecks {#sec-ai-training-identifying-bottlenecks-76f0}\n",
        "\n",
        "Effective optimization of training systems requires a systematic approach to identifying and addressing performance bottlenecks. Bottlenecks can arise at various levels, including computation, memory, and data handling, and they directly impact the efficiency and scalability of the training process.\n",
        "\n",
        "Computational bottlenecks can significantly impact training efficiency. One common bottleneck occurs when computational resources, such as GPUs or TPUs, are underutilized. This can happen due to imbalanced workloads or inefficient parallelization strategies. For example, if one device completes its assigned computation faster than others, it remains idle while waiting for the slower devices to catch up. Such inefficiencies reduce the overall training throughput.\n",
        "\n",
        "Memory-related bottlenecks are particularly challenging when dealing with large models. Insufficient memory can lead to frequent swapping of data between device memory and slower storage, significantly slowing down the training process. In some cases, the memory required to store intermediate activations during the forward and backward passes can exceed the available capacity, forcing the system to employ techniques such as gradient checkpointing, which trade off computational efficiency for memory savings.\n",
        "\n",
        "Data handling bottlenecks can severely limit the utilization of computational resources. Training systems often rely on a continuous supply of data to keep computational resources fully utilized. If data loading and preprocessing are not optimized, computational devices may sit idle while waiting for new batches of data to arrive. This issue is particularly prevalent when training on large datasets stored on networked file systems or remote storage solutions. As illustrated in @fig-tf-bottleneck-trace, profiling traces can reveal cases where the GPU remains underutilized due to slow data loading, highlighting the importance of efficient input pipelines.\n",
        "\n",
        "![**GPU Underutilization**: Profiling reveals identify data loading as a bottleneck, preventing full GPU utilization during training and increasing overall training time. The gaps in GPU activity indicate the device frequently waits for input data, suggesting optimization of the data pipeline is necessary to maximize computational throughput.](images/png/tf_profiler.png){#fig-tf-bottleneck-trace}\n",
        "\n",
        "Identifying these bottlenecks typically involves using profiling tools to analyze the performance of the training system. Tools integrated into machine learning frameworks, such as PyTorch's `torch.profiler` or TensorFlow's `tf.data` analysis utilities, can provide detailed insights into where time and resources are being spent during training. By pinpointing the specific stages or operations that are causing delays, practitioners can design targeted optimizations to address these issues effectively.\n",
        "\n",
        "### System-Level Optimizations {#sec-ai-training-systemlevel-optimizations-2c26}\n",
        "\n",
        "After identifying the bottlenecks in a training system, the next step is to implement optimizations at the system level. These optimizations target the underlying hardware, data flow, and resource allocation to improve overall performance and scalability.\n",
        "\n",
        "One essential technique is profiling training workloads. Profiling involves collecting detailed metrics about the system's performance during training, such as computation times, memory usage, and communication overhead. These metrics help reveal inefficiencies, such as imbalanced resource usage or excessive time spent in specific stages of the training pipeline. Profiling tools such as NVIDIA Nsight Systems or TensorFlow Profiler can provide actionable insights, enabling developers to make informed adjustments to their training configurations.\n",
        "\n",
        "Leveraging hardware-specific features is another critical aspect of system-level optimization. Modern accelerators, such as GPUs and TPUs, include specialized capabilities that can significantly enhance performance when utilized effectively. For instance, mixed precision training, which uses lower-precision floating-point formats like FP16 or bfloat16[^fn-bfloat16] for computations, can dramatically reduce memory usage and improve throughput without sacrificing model accuracy. Similarly, tensor cores in NVIDIA GPUs are designed to accelerate matrix operations, a common computational workload in deep learning, making them ideal for optimizing forward and backward passes.\n",
        "\n",
        "[^fn-bfloat16]: Google's bfloat16 format retains FP32's dynamic range while reducing precision, making it highly effective for deep learning training on TPUs.\n",
        "\n",
        "Data pipeline optimization is also an important consideration at the system level. Ensuring that data is loaded, preprocessed, and delivered to the training devices efficiently can eliminate potential bottlenecks caused by slow data delivery. Techniques such as caching frequently used data, prefetching batches to overlap computation and data loading, and using efficient data storage formats like TFRecord or RecordIO can help maintain a steady flow of data to computational devices.\n",
        "\n",
        "### Software-Level Optimizations {#sec-ai-training-softwarelevel-optimizations-736a}\n",
        "\n",
        "In addition to system-level adjustments, software-level optimizations focus on improving the efficiency of training algorithms and their implementation within machine learning frameworks.\n",
        "\n",
        "One effective software-level optimization is the use of fused kernels. In traditional implementations, operations like matrix multiplications, activation functions, and gradient calculations are often executed as separate steps. Fused kernels combine these operations into a single optimized routine, reducing the overhead associated with launching multiple operations and improving cache utilization. Many frameworks, such as PyTorch and TensorFlow, automatically apply kernel fusion where possible, but developers can further optimize custom operations by explicitly using libraries like cuBLAS or cuDNN.\n",
        "\n",
        "Dynamic graph execution is another powerful technique for software-level optimization. In frameworks that support dynamic computation graphs, such as PyTorch, the graph of operations is constructed on-the-fly during each training iteration. This flexibility allows for fine-grained optimizations based on the specific inputs and outputs of a given iteration. Dynamic graphs also enable more efficient handling of variable-length sequences, such as those encountered in natural language processing tasks.\n",
        "\n",
        "Gradient accumulation is an additional strategy that can be implemented at the software level to address memory constraints. Instead of updating model parameters after every batch, gradient accumulation allows the system to compute gradients over multiple smaller batches and update parameters only after aggregating them. This approach effectively increases the batch size without requiring additional memory, enabling training on larger datasets or models.\n",
        "\n",
        "### Scaling Techniques {#sec-ai-training-scaling-techniques-aace}\n",
        "\n",
        "Scaling techniques aim to extend the capabilities of training systems to handle larger datasets and models by optimizing the training configuration and resource allocation.\n",
        "\n",
        "One common scaling technique is batch size scaling. Increasing the batch size can reduce the number of synchronization steps required during training, as fewer updates are needed to process the same amount of data. However, larger batch sizes may introduce challenges, such as slower convergence or reduced generalization. Techniques like learning rate scaling and warmup schedules can help mitigate these issues, ensuring stable and effective training even with large batches.\n",
        "\n",
        "Layer-freezing strategies provide another method for scaling training systems efficiently. In many scenarios, particularly in transfer learning, the lower layers of a model capture general features and do not need frequent updates. By freezing these layers and allowing only the upper layers to train, memory and computational resources can be conserved, enabling the system to focus its efforts on fine-tuning the most critical parts of the model.\n",
        "\n",
        "## Specialized Hardware Training {#sec-ai-training-specialized-hardware-training-b4cc}\n",
        "\n",
        "The evolution of specialized machine learning hardware represents a critical development in addressing the computational demands of modern training systems. Each hardware architecture, such as GPUs, TPUs, FPGAs, and ASICs, embodies distinct design philosophies and engineering trade-offs that optimize for specific aspects of the training process. These specialized processors have fundamentally altered the scalability and efficiency constraints of machine learning systems, enabling breakthroughs in model complexity and training speed. We briefly examine the architectural principles, performance characteristics, and practical applications of each hardware type, highlighting their indispensable role in shaping the future capabilities of machine learning training systems.\n",
        "\n",
        "### GPUs {#sec-ai-training-gpus-d613}\n",
        "\n",
        "Machine learning training systems demand immense computational power to process large datasets, perform gradient computations, and update model parameters efficiently. GPUs have emerged as a critical technology to meet these requirements (@fig-training-gpus), primarily due to their highly parallelized architecture and ability to execute the dense linear algebra operations central to neural network training [@dally2021evolution].\n",
        "\n",
        "![**GPU Acceleration Trends**: Successive GPU generations deliver exponential increases in floating-point operations per second (FLOPS), enabling training of increasingly large and complex machine learning models and driving breakthroughs in areas like natural language processing. These advancements, spanning from pascal to blackwell, showcase the critical role of specialized hardware in overcoming the computational demands of modern AI.](images/png/acc_gpus.png){#fig-training-gpus}\n",
        "\n",
        "From the perspective of training pipeline architecture, GPUs address several key bottlenecks. The large number of cores in GPUs allows for simultaneous processing of thousands of matrix multiplications, accelerating the forward and backward passes of training. In systems where data throughput limits GPU utilization, prefetching and caching mechanisms help maintain a steady flow of data. These optimizations, previously discussed in training pipeline design, are critical to unlocking the full potential of GPUs [@Patterson2021].\n",
        "\n",
        "In distributed training systems, GPUs enable scalable strategies such as data parallelism and model parallelism. NVIDIA's ecosystem, including tools like [NCCL](https://developer.nvidia.com/nccl) for multi-GPU communication, facilitates efficient parameter synchronization, a frequent challenge in large-scale setups. For example, in training large models like GPT-3, GPUs were used in tandem with distributed frameworks to split computations across thousands of devices while addressing memory and compute scaling issues [@Brown2020].\n",
        "\n",
        "Hardware-specific features further enhance GPU performance. NVIDIA's tensor cores, for instance, are optimized for mixed-precision training, which reduces memory usage while maintaining numerical stability [@Micikevicius2018]. This directly addresses memory constraints, a common bottleneck in training massive models. Combined with software-level optimizations like fused kernels, GPUs deliver substantial speedups in both single-device and multi-device configurations.\n",
        "\n",
        "A case study that exemplifies the role of GPUs in machine learning training is OpenAI's use of NVIDIA hardware for large language models. Training GPT-3, with its 175 billion parameters, required distributed processing across thousands of V100 GPUs. The combination of GPU-optimized frameworks, advanced communication protocols, and hardware features enabled OpenAI to achieve this ambitious scale efficiently [@Brown2020].\n",
        "\n",
        "Despite their advantages, GPUs are not without challenges. Effective utilization of GPUs demands careful attention to workload balancing and inter-device communication. Training systems must also consider the cost implications, as GPUs are resource-intensive and require optimized data centers to operate at scale. However, with innovations like [NVLink](https://www.nvidia.com/en-us/data-center/nvlink/) and [CUDA-X libraries](https://developer.nvidia.com/cuda-zone), these challenges are continually being addressed.\n",
        "\n",
        "In conclusion, GPUs are indispensable for modern machine learning training systems due to their versatility, scalability, and integration with advanced software frameworks. By addressing key bottlenecks in computation, memory, and distribution, GPUs play a foundational role in enabling the large-scale training pipelines discussed throughout this chapter.\n",
        "\n",
        "### TPUs {#sec-ai-training-tpus-310e}\n",
        "\n",
        "Tensor Processing Units (TPUs) and other custom accelerators have been purpose-built to address the unique challenges of large-scale machine learning training. Unlike GPUs, which are versatile and serve a wide range of applications, TPUs are specifically optimized for the computational patterns found in deep learning, such as matrix multiplications and convolutional operations [@Jouppi2017]. These devices mitigate training bottlenecks by offering high throughput, specialized memory handling, and tight integration with machine learning frameworks.\n",
        "\n",
        "As illustrated in @fig-training-tpus, TPUs have undergone significant architectural evolution, with each generation introducing enhancements tailored for increasingly demanding AI workloads. The first-generation TPU, introduced in 2015, was designed for internal inference acceleration. Subsequent iterations have focused on large-scale distributed training, memory optimizations, and efficiency improvements, culminating in the most recent Trillium architecture. These advancements illustrate how domain-specific accelerators continue to push the boundaries of AI performance and efficiency.\n",
        "\n",
        "![**TPU Evolution**: Successive generations of tensor processing units demonstrate architectural advancements optimized for deep learning workloads, transitioning from inference acceleration to large-scale distributed training and culminating in the trillium architecture. These specialized accelerators address the computational demands of modern AI by enhancing memory handling, increasing throughput, and integrating tightly with machine learning frameworks.](images/png/acc_tpus.png){#fig-training-tpus}\n",
        "\n",
        "Machine learning frameworks can achieve substantial gains in training efficiency through purpose-built AI accelerators such as TPUs. However, maximizing these benefits requires careful attention to hardware-aware optimizations, including memory layout, dataflow orchestration, and computational efficiency.\n",
        "\n",
        "Google developed TPUs with a primary goal: to accelerate machine learning workloads at scale while reducing the energy and infrastructure costs associated with traditional hardware. Their architecture is optimized for tasks that benefit from batch processing, making them particularly effective in distributed training systems where large datasets are split across multiple devices. A key feature of TPUs is their systolic array architecture, which performs efficient matrix multiplications by streaming data through a network of processing elements. This design minimizes data movement overhead, reducing latency and energy consumptionâcritical factors for training large-scale models like transformers [@Jouppi2017].\n",
        "\n",
        "From the perspective of training pipeline optimization, TPUs simplify integration with data pipelines in the TensorFlow ecosystem. Features such as the TPU runtime and TensorFlow's [`tf.data` API](https://www.tensorflow.org/guide/data) enable seamless preprocessing, caching, and batching of data to feed the accelerators efficiently [@abadi2016tensorflow]. Additionally, TPUs are designed to work in podsâclusters of interconnected TPU devices that allow for massive parallelism. In such setups, TPU pods enable hybrid parallelism strategies by combining data parallelism across devices with model parallelism within devices, addressing memory and compute constraints simultaneously.\n",
        "\n",
        "TPUs have been instrumental in training large-scale models, such as BERT and T5. For example, Google's use of TPUs to train BERT demonstrates their ability to handle both the memory-intensive requirements of large transformer models and the synchronization challenges of distributed setups [@Devlin2019]. By splitting the model across TPU cores and optimizing communication patterns, Google achieved state-of-the-art results while significantly reducing training time compared to traditional hardware.\n",
        "\n",
        "Beyond TPUs, custom accelerators such as [AWS Trainium](https://aws.amazon.com/machine-learning/trainium/) and [Intel Gaudi](https://www.intel.com/content/www/us/en/artificial-intelligence/gaudi-deep-learning.html) chips are also gaining traction in the machine learning ecosystem. These devices are designed to compete with TPUs by offering similar performance benefits while catering to diverse cloud and on-premise environments. For example, AWS Trainium provides deep integration with the AWS ecosystem, allowing users to seamlessly scale their training pipelines with services like [Amazon SageMaker](https://aws.amazon.com/sagemaker/).\n",
        "\n",
        "While TPUs and custom accelerators excel in throughput and energy efficiency, their specialized nature introduces limitations. TPUs, for example, are tightly coupled with Google's ecosystem, making them less accessible to practitioners using alternative frameworks. Similarly, the high upfront investment required for TPU pods may deter smaller organizations or those with limited budgets. Despite these challenges, the performance gains offered by custom accelerators make them a compelling choice for large-scale training tasks.\n",
        "\n",
        "In summary, TPUs and custom accelerators address many of the key challenges in machine learning training systems, from handling massive datasets to optimizing distributed training. Their unique architectures and deep integration with specific ecosystems make them powerful tools for organizations seeking to scale their training workflows. As machine learning models and datasets continue to grow, these accelerators are likely to play an increasingly central role in shaping the future of AI training.\n",
        "\n",
        "### FPGAs {#sec-ai-training-fpgas-5357}\n",
        "\n",
        "Field-Programmable Gate Arrays (FPGAs) are versatile hardware solutions that allow developers to tailor their architecture for specific machine learning workloads. Unlike GPUs or TPUs, which are designed with fixed architectures, FPGAs can be reconfigured dynamically, offering a unique level of flexibility. This adaptability makes them particularly valuable for applications that require customized optimizations, low-latency processing, or experimentation with novel algorithms.\n",
        "\n",
        "Microsoft had been exploring the use of FPGAs for a while, as seen in @fig-inference-fpgas, with one prominent example being [Project Brainwave](https://www.microsoft.com/en-us/research/project/project-brainwave/). This initiative leverages FPGAs to accelerate machine learning workloads in the Azure cloud. Microsoft chose FPGAs for their ability to provide low-latency inference (not training) while maintaining high throughput. This approach is especially beneficial in scenarios where real-time predictions are critical, such as search engine queries or language translation services. By integrating FPGAs directly into their data center network, Microsoft has achieved significant performance gains while minimizing power consumption.\n",
        "\n",
        "![**FPGA Evolution for Inference**: Microsoft progressively developed field-programmable gate arrays (fpgas) to accelerate machine learning inference in cloud services, shifting from initial project catapult designs to more advanced iterations and ultimately project brainwave. These reconfigurable hardware solutions offer low-latency processing and high throughput, particularly valuable for real-time applications like search and language translation.](images/png/acc_fpgas.png){#fig-inference-fpgas}\n",
        "\n",
        "From a training perspective, FPGAs offer unique advantages in optimizing training pipelines. Their reconfigurability allows them to implement custom dataflow architectures tailored to specific model requirements. For instance, data preprocessing and augmentation steps, which can often become bottlenecks in GPU-based systems, can be offloaded to FPGAs, freeing up GPUs for core training tasks. Additionally, FPGAs can be programmed to perform operations such as sparse matrix multiplications, which are common in recommendation systems and graph-based models but are less efficient on traditional accelerators [@Putnam2014].\n",
        "\n",
        "In distributed training systems, FPGAs provide fine-grained control over communication patterns. This control allows developers to optimize inter-device communication and memory access, addressing challenges such as parameter synchronization overheads. For example, FPGAs can be configured to implement custom all-reduce algorithms for gradient aggregation, reducing latency compared to general-purpose hardware.\n",
        "\n",
        "Despite their benefits, FPGAs come with challenges. Programming FPGAs requires expertise in hardware description languages (HDLs) like Verilog or VHDL, which can be a barrier for many machine learning practitioners. To address this, frameworks like [Xilinx's Vitis AI](https://www.xilinx.com/products/design-tools/vitis/vitis-ai.html) and [Intel's OpenVINO](https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/overview.html) have simplified FPGA programming by providing tools and libraries tailored for AI workloads. However, the learning curve remains steep compared to the well-established ecosystems of GPUs and TPUs.\n",
        "\n",
        "Microsoft's use of FPGAs highlights their potential to integrate seamlessly into existing machine learning workflows. By incorporating FPGAs into Azure, Microsoft has demonstrated how these devices can complement other accelerators, optimizing end-to-end pipelines for both training and inference. This hybrid approach leverages the strengths of FPGAs for specific tasks while relying on GPUs or CPUs for others, creating a balanced and efficient system.\n",
        "\n",
        "In summary, FPGAs offer a compelling solution for machine learning training systems that require customization, low latency, or novel optimizations. While their adoption may be limited by programming complexity, advancements in tooling and real-world implementations like Microsoft's Project Brainwave demonstrate their growing relevance in the AI hardware ecosystem.\n",
        "\n",
        "### ASICs {#sec-ai-training-asics-46ed}\n",
        "\n",
        "Application-Specific Integrated Circuits (ASICs) represent a class of hardware designed for specific tasks, offering unparalleled efficiency and performance by eschewing the general-purpose flexibility of GPUs or FPGAs. Among the most innovative examples of ASICs for machine learning training is the [Cerebras Wafer-Scale Engine (WSE)](https://www.cerebras.net/), as shown in @fig-training-wse, which stands apart for its unique approach to addressing the computational and memory challenges of training massive machine learning models.\n",
        "\n",
        "![**Wafer-Scale Integration**: This 300mm silicon wafer contains 2.6 trillion transistors, enabling a single chip to house an entire AI training system and overcome memory bandwidth limitations common in distributed training setups. By integrating massive computational resources onto a single die, the WSE significantly reduces data transfer bottlenecks and accelerates model training for large-scale machine learning applications.](images/png/acc_wse.png){#fig-training-wse}\n",
        "\n",
        "The Cerebras WSE is unlike traditional chips in that it is a single wafer-scale processor, spanning the entire silicon wafer rather than being cut into smaller chips. This architecture enables Cerebras to pack 2.6 trillion transistors and 850,000 cores onto a single device. These cores are connected via a high-bandwidth, low-latency interconnect, allowing data to move across the chip without the bottlenecks associated with external communication between discrete GPUs or TPUs [@Feldman2020].\n",
        "\n",
        "From a machine learning training perspective, the WSE addresses several critical bottlenecks:\n",
        "\n",
        "1. **Data Movement**: In traditional distributed systems, significant time is spent transferring data between devices. The WSE eliminates this by keeping all computations and memory on a single wafer, drastically reducing communication overhead.\n",
        "2. **Memory Bandwidth**: The WSE integrates 40 GB of high-speed on-chip memory directly adjacent to its processing cores. This proximity allows for near-instantaneous access to data, overcoming the latency challenges that GPUs often face when accessing off-chip memory.\n",
        "3. **Scalability**: While traditional distributed systems rely on complex software frameworks to manage multiple devices, the WSE simplifies scaling by consolidating all resources into one massive chip. This design is particularly well-suited for training large language models and other deep learning architectures that require significant parallelism.\n",
        "\n",
        "A key example of Cerebras' impact is its application in natural language processing. Organizations using the WSE have demonstrated substantial speedups in training transformer models, which are notoriously compute-intensive due to their reliance on attention mechanisms. By leveraging the chip's massive parallelism and memory bandwidth, training times for models like BERT have been significantly reduced compared to GPU-based systems [@Brown2020].\n",
        "\n",
        "However, the Cerebras WSE also comes with limitations. Its single-chip design is optimized for specific use cases, such as dense matrix computations in deep learning, but may not be as versatile as multi-purpose hardware like GPUs or FPGAs. Additionally, the cost of acquiring and integrating such a specialized device can be prohibitive for smaller organizations or those with diverse workloads.\n",
        "\n",
        "Cerebras' strategy of targeting the largest models aligns with the trends discussed earlier in this chapter, such as the growing emphasis on scaling techniques and hybrid parallelism strategies. The WSE's unique design addresses challenges like memory bottlenecks and inter-device communication overhead, making it a pioneering solution for next-generation AI workloads.\n",
        "\n",
        "In conclusion, the Cerebras Wafer-Scale Engine exemplifies how ASICs can push the boundaries of what is possible in machine learning training. By addressing fundamental bottlenecks in computation and data movement, the WSE offers a glimpse into the future of specialized hardware for AI, where the integration of highly optimized, task-specific architectures unlocks unprecedented performance.\n",
        "\n",
        "## Summary {#sec-ai-training-summary-fa70}\n",
        "\n",
        "AI training systems are built upon a foundation of mathematical principles, computational strategies, and architectural considerations. The exploration of neural network computation has shown how core operations, activation functions, and optimization algorithms come together to enable efficient model training, while also emphasizing the trade-offs that must be balanced between memory, computation, and performance.\n",
        "\n",
        "The design of training pipelines incorporates key components such as data flows, forward and backward passes, and memory management. Understanding these elements in conjunction with hardware execution patterns is essential for achieving efficient and scalable training processes. Strategies like parameter updates, prefetching, and gradient accumulation further enhance the effectiveness of training by optimizing resource utilization and reducing computational bottlenecks.\n",
        "\n",
        "Distributed training systems, including data parallelism, model parallelism, and hybrid approaches, are topics that we examined as solutions for scaling AI training to larger datasets and models. Each approach comes with its own benefits and challenges, highlighting the need for careful consideration of system requirements and resource constraints.\n",
        "\n",
        "Altogether, the combination of theoretical foundations and practical implementations forms a cohesive framework for addressing the complexities of AI training. By leveraging this knowledge, it is possible to design robust, efficient systems capable of meeting the demands of modern machine learning applications."
      ],
      "id": "590304e6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Zeljko\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}