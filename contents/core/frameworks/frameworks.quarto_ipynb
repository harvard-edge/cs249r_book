{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "bibliography: frameworks.bib\n",
        "quiz: frameworks_quizzes.json\n",
        "---\n",
        "\n",
        "# AI Frameworks\n",
        "\n",
        "::: {layout-narrow}\n",
        "::: {.column-margin}\n",
        "*DALLÂ·E 3 Prompt: Illustration in a rectangular format, designed for a professional textbook, where the content spans the entire width. The vibrant chart represents training and inference frameworks for ML. Icons for TensorFlow, Keras, PyTorch, ONNX, and TensorRT are spread out, filling the entire horizontal space, and aligned vertically. Each icon is accompanied by brief annotations detailing their features. The lively colors like blues, greens, and oranges highlight the icons and sections against a soft gradient background. The distinction between training and inference frameworks is accentuated through color-coded sections, with clean lines and modern typography maintaining clarity and focus.*\n",
        ":::\n",
        "\n",
        "\\noindent\n",
        "![](images/png/cover_ml_frameworks.png)\n",
        "\n",
        ":::\n",
        "\n",
        "## Purpose {.unnumbered}\n",
        "\n",
        "*How do AI frameworks bridge the gap between theoretical design and practical implementation, and what role do they play in enabling scalable and effiicent machine learning systems?*\n",
        "\n",
        "AI frameworks are the middleware software layer that transforms abstract model specifications into executable implementations. The evolution of these frameworks reveals fundamental patterns for translating high-level designs into efficient computational workflows and system execution. Their architecture shines light on the essential trade-offs between abstraction, performance, and portability, providing systematic approaches to managing complexity in machine learning systems. Understanding framework capabilities and constraints offers insights into the engineering decisions that shape system scalability, enabling the development of robust, deployable solutions across diverse computing environments.\n",
        "\n",
        ":::{.callout-tip title=\"Learning Objectives\"}\n",
        "\n",
        "-   Trace the evolution of machine learning frameworks from early numerical libraries to modern deep learning systems\n",
        "\n",
        "-   Analyze framework fundamentals including tensor data structures, computational graphs, execution models, and memory management\n",
        "\n",
        "-   Differentiate between machine learning frameworks architectures, execution strategies, and development tools\n",
        "\n",
        "-   Compare framework specializations across cloud, edge, mobile, and TinyML applications\n",
        ":::\n",
        "\n",
        "## Overview {#sec-ai-frameworks-overview-7fa2}\n",
        "\n",
        "Modern machine learning development relies fundamentally on machine learning frameworks, which are comprehensive software libraries or platforms designed to simplify the development, training, and deployment of machine learning models. These frameworks play multiple roles in ML systems, much like operating systems are the foundation of computing systems. Just as operating systems abstract away the complexity of hardware resources and provide standardized interfaces for applications, ML frameworks abstract the intricacies of mathematical operations and hardware acceleration, providing standardized APIs for ML development.\n",
        "\n",
        "The capabilities of ML frameworks are diverse and continuously evolving. They provide efficient implementations of mathematical operations, automatic differentiation capabilities, and tools for managing model development, hardware acceleration, and memory utilization. For production systems, they offer standardized approaches to model deployment, versioning, and optimization. However, due to their diversity, there is no universally agreed-upon definition of an ML framework. To establish clarity for this chapter, we adopt the following definition:\n",
        "\n",
        ":::{.callout-note title=\"Framework Definition\"}\n",
        "A **Machine Learning Framework (ML Framework)** is a *software platform* that provides tools and abstractions for designing, training, and deploying machine learning models. It bridges *user applications* with *infrastructure*, enabling *algorithmic expressiveness* through computational graphs and operators, *workflow orchestration* across the machine learning lifecycle, *hardware optimization* with schedulers and compilers, *scalability* for distributed and edge systems, and *extensibility* to support diverse use cases. ML frameworks form the foundation of modern machine learning systems by simplifying development and deployment processes.\n",
        ":::\n",
        "\n",
        "The landscape of ML frameworks continues to evolve with the field itself. Today's frameworks must address diverse requirements: from training large language models on distributed systems to deploying compact neural networks on tiny IoT devices. Popular frameworks like PyTorch and TensorFlow[^fn-tensor_frame] have developed rich ecosystems that extend far beyond basic model implementation, encompassing tools for data preprocessing, model optimization, and deployment.\n",
        "\n",
        "[^fn-tensor_frame]: **TensorFlow and PyTorch**: TensorFlow, developed by Google, excels in production deployment and offers TensorFlow Lite for mobile/embedded applications. PyTorch, developed by Meta AI, is widely adopted in research settings due to its dynamic computation model and developer-friendly features. Together they represent the two most prevalent deep learning frameworks.\n",
        "\n",
        "As we progress into examining training, optimization, and deployment, understanding ML frameworks becomes necessary as they orchestrate the entire machine learning lifecycle. These frameworks provide the architecture that connects all aspects of ML systems, from data ingestion to model deployment. Just as understanding a blueprint is important before studying construction techniques, grasping framework architecture is vital before diving into training methodologies and deployment strategies. Modern frameworks encapsulate the complete ML workflow, and their design choices influence how we approach training, optimization, and inference.\n",
        "\n",
        "This chapter helps us learn how these complex frameworks function, their architectural principles, and their role in modern ML systems. Understanding these concepts will provide the necessary context as we explore specific aspects of the ML lifecycle in subsequent chapters.\n",
        "\n",
        "## Evolution History {#sec-ai-frameworks-evolution-history-6f43}\n",
        "\n",
        "The evolution of machine learning frameworks mirrors the broader development of artificial intelligence and computational capabilities. This section explores the distinct phases that reflect both technological advances and changing requirements of the AI community, from early numerical computing libraries to modern deep learning frameworks.\n",
        "\n",
        "### Evolution Timeline {#sec-ai-frameworks-evolution-timeline-f814}\n",
        "\n",
        "The development of machine learning frameworks has been built upon decades of foundational work in computational libraries. From the early building blocks of BLAS and LAPACK to today's cutting-edge frameworks like TensorFlow, PyTorch, and JAX, this journey represents a steady progression toward higher-level abstractions that make machine learning more accessible and powerful.\n",
        "\n",
        "Looking at @fig-mlfm-timeline, we can trace how these fundamental numerical computing libraries laid the groundwork for modern ML development. The mathematical foundations established by BLAS and LAPACK enabled the creation of more user-friendly tools like NumPy and SciPy, which in turn set the stage for today's sophisticated deep learning frameworks.\n",
        "\n",
        "::: {#fig-mlfm-timeline}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[node distance=1mm,outer sep=0pt,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{%\n",
        "    Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={inner xsep=1pt,\n",
        "    draw=none,\n",
        "    fill=#1,\n",
        "    anchor=west,\n",
        "    text width=27mm,align=flush center,\n",
        "    minimum width=28mm, minimum height=13mm\n",
        "  },\n",
        "  Box/.default=red\n",
        "}\n",
        "\\definecolor{col1}{RGB}{128, 179, 255}\n",
        "\\definecolor{col2}{RGB}{255, 255, 128}\n",
        "\\definecolor{col3}{RGB}{204, 255, 204}\n",
        "\\definecolor{col4}{RGB}{230, 179, 255}\n",
        "\\definecolor{col5}{RGB}{255, 153, 204}\n",
        "\\definecolor{col6}{RGB}{245, 82, 102}\n",
        "\\definecolor{col7}{RGB}{255, 102, 102}\n",
        "\n",
        "\\node[Box={col1}](B1){1979};\n",
        "\\node[Box={col2!},right=of B1](B2){1992};\n",
        "\\node[Box={col3},right=of B2](B3){2006};\n",
        "\\node[Box={col4},right=of B3](B4){2007};\n",
        "\\node[Box={col5},right=of B4](B5){2015};\n",
        "\\node[Box={col6},right=of B5](B6){2016};\n",
        "\\node[Box={col7},right=of B6](B7){2018};\n",
        "%%\n",
        "\\foreach \\x in{1,2,...,7}\n",
        "\\draw[dashed,thick,-latex](B\\x)--++(270:6);\n",
        "\n",
        "\\path[red]([yshift=-8mm]B1.south west)coordinate(P)-|coordinate(K)(B7.south east);\n",
        "\n",
        "\\draw[line width=2pt,-latex](P)--(K)--++(0:3mm);\n",
        "\n",
        "\\node[Box={col1!50},below=2 of B1](BB1){BLAS introduced};\n",
        "\\node[Box={col2!50},below=2 of B2](BB2){LAPACK extends BLAS};\n",
        "\\node[Box={col3!50},below=2 of B3](BB3){NumPy becomes Python's numerical backbone};\n",
        "\\node[Box={col4!50},below=2 of B4](BB4){SciPy adds advanced computations};\n",
        "\\node[Box={col4!50},below= 2mm of BB4](BBB4){Theano introduces computational graphs};\n",
        "\\node[Box={col5!50},below=2 of B5](BB5){TensorFlow revolutionizes distributed ML};\n",
        "\\node[Box={col6!50},below=2 of B6](BB6){PyTorch introduces dynamic graphs};\n",
        "\\node[Box={col7!50},below=2 of B7](BB7){JAX introduces functional paradigms};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Computational Library Evolution**: Modern machine learning frameworks build upon decades of numerical computing advancements, transitioning from low-level routines like BLAS and LAPACK to high-level abstractions in numpy, scipy, and ultimately, deep learning frameworks such as TensorFlow and PyTorch. This progression reflects a shift toward increased developer productivity and accessibility in machine learning system development.\n",
        ":::\n",
        "\n",
        "This evolution reflects a clear trend: each new layer of abstraction has made complex computational tasks more approachable while building upon the robust foundations of its predecessors. Let us examine how these systems built on top of one another.\n",
        "\n",
        "### Early Numerical Libraries {#sec-ai-frameworks-early-numerical-libraries-9e0a}\n",
        "\n",
        "The foundation for modern ML frameworks begins at the most fundamental level of computation: matrix operations. Machine learning computations are primarily matrix-matrix and matrix-vector multiplications. The Basic Linear Algebra Subprograms ([BLAS](https://www.netlib.org/blas/)), developed in 1979, provided these essential matrix operations that would become the computational backbone of machine learning [@kung1979systolic]. These low-level operations, when combined and executed efficiently, enable the complex calculations required for training neural networks and other ML models.\n",
        "\n",
        "Building upon BLAS, the Linear Algebra Package ([LAPACK](https://www.netlib.org/lapack/)) emerged in 1992, extending these capabilities with more sophisticated linear algebra operations such as matrix decompositions, eigenvalue problems, and linear system solutions. This layered approach of building increasingly complex operations from fundamental matrix computations became a defining characteristic of ML frameworks.\n",
        "\n",
        "The development of [NumPy](https://numpy.org/) in 2006 marked an important milestone in this evolution, building upon its predecessors Numeric and Numarray to become the fundamental package for numerical computation in Python. NumPy introduced n-dimensional array objects and essential mathematical functions, but more importantly, it provided an efficient interface to these underlying BLAS and LAPACK operations. This abstraction allowed developers to work with high-level array operations while maintaining the performance of optimized low-level matrix computations.\n",
        "\n",
        "In 2001, [SciPy](https://scipy.org/) emerged as a powerful extension built on top of NumPy, adding specialized functions for optimization, linear algebra, and signal processing. This further exemplified the pattern of progressive abstraction in ML frameworks: from basic matrix operations to sophisticated numerical computations, and eventually to high-level machine learning algorithms. This layered architecture, starting from fundamental matrix operations and building upward, would become a blueprint for future ML frameworks, as we will see in this chapter.\n",
        "\n",
        "### First-Generation Frameworks {#sec-ai-frameworks-firstgeneration-frameworks-550a}\n",
        "\n",
        "The transition from numerical libraries to dedicated machine learning frameworks marked an important evolution in abstraction. While the underlying computations remained rooted in matrix operations, frameworks began to encapsulate these operations into higher-level machine learning primitives. The University of Waikato introduced Weka in 1993 [@witten2002data], one of the earliest ML frameworks, which abstracted matrix operations into data mining tasks, though it was limited by its Java implementation and focus on smaller-scale computations.\n",
        "\n",
        "[Scikit-learn](https://scikit-learn.org/stable/), emerging in 2007, was a significant advancement in this abstraction. Building upon the NumPy and SciPy foundation, it transformed basic matrix operations into intuitive ML algorithms. For example, what was fundamentally a series of matrix multiplications and gradient computations became a simple `fit()` method call in a logistic regression model. This abstraction pattern - hiding complex matrix operations behind clean APIs - would become a defining characteristic of modern ML frameworks.\n",
        "\n",
        "[Theano](https://github.com/Theano/Theano), which appeared in 2007, was a major advancement, which was developed at the Montreal Institute for Learning Algorithms, MILA, Theano introduced two revolutionary concepts: computational graphs and GPU acceleration [@al2016theano]. Computational graphs represented mathematical operations as directed graphs, with matrix operations as nodes and data flowing between them. This graph-based approach allowed for automatic differentiation and optimization of the underlying matrix operations. More importantly, it enabled the framework to automatically route these operations to GPU hardware, dramatically accelerating matrix computations.\n",
        "\n",
        "Meanwhile, [Torch](http://torch.ch/), created at NYU in 2002, took a different approach to handling matrix operations. It emphasized immediate execution of operations (eager execution) and provided a flexible interface for neural network implementations. Torch's design philosophy of prioritizing developer experience while maintaining high performance influenced many subsequent frameworks. Its architecture demonstrated how to balance high-level abstractions with efficient low-level matrix operations, establishing design patterns that would later influence frameworks like PyTorch.\n",
        "\n",
        "### Emergence of Deep Learning Frameworks {#sec-ai-frameworks-emergence-deep-learning-frameworks-4d8c}\n",
        "\n",
        "The deep learning revolution demanded a fundamental shift in how frameworks handled matrix operations, primarily due to three factors: the massive scale of computations, the complexity of gradient calculations through deep networks, and the need for distributed processing. Traditional frameworks, designed for classical machine learning algorithms, could not efficiently handle the billions of matrix operations required for training deep neural networks.\n",
        "\n",
        "The foundations for modern deep learning frameworks emerged from academic research. The University of Montreal's [Theano](https://github.com/Theano/Theano), released in 2007, established the concepts that would shape future frameworks [@bergstra2010theano]. It introduced key concepts such as computational graphs[^fn-frameworks-1] for automatic differentiation and GPU acceleration, which we will explore in more detail later in this chapter, demonstrating how to efficiently organize and optimize complex neural network computations.\n",
        "\n",
        "[^fn-frameworks-1]: **Computational Graph**: A representation of mathematical computations as a directed graph, where nodes represent operations and edges represent data dependencies, used to enable automatic differentiation.\n",
        "\n",
        "[Caffe](https://caffe.berkeleyvision.org/), released by UC Berkeley in 2013, advanced this evolution by introducing specialized implementations of convolutional operations [@jia2014caffe]. While convolutions are mathematically equivalent to specific patterns of matrix multiplication, Caffe optimized these patterns specifically for computer vision tasks, demonstrating how specialized matrix operation implementations could dramatically improve performance for specific network architectures.\n",
        "\n",
        "Google's [TensorFlow](https://www.tensorflow.org/), introduced in 2015, revolutionized the field by treating matrix operations as part of a distributed computing problem [@dean2012large]. It represented all computations, from individual matrix multiplications to entire neural networks, as a static computational graph that could be split across multiple devices. This approach enabled training of unprecedented model sizes by distributing matrix operations across clusters of computers and specialized hardware. TensorFlow's static graph approach, while initially constraining, allowed for aggressive optimization of matrix operations through techniques like kernel fusion (combining multiple operations into a single kernel for efficiency) and memory planning (pre-allocating memory for operations).\n",
        "\n",
        "Microsoft's [CNTK](https://learn.microsoft.com/en-us/cognitive-toolkit/) entered the landscape in 2016, bringing robust implementations for speech recognition and natural language processing tasks [@seide2016cntk]. Its architecture emphasized scalability across distributed systems while maintaining efficient computation for sequence-based models.\n",
        "\n",
        "Facebook's [PyTorch](https://pytorch.org/), also launched in 2016, took a radically different approach to handling matrix computations. Instead of static graphs, PyTorch introduced dynamic computational graphs that could be modified on the fly [@paszke2019pytorch]. This dynamic approach, while potentially sacrificing some optimization opportunities, made it much easier for researchers to debug and understand the flow of matrix operations in their models. PyTorch's success demonstrated that the ability to introspect and modify computations dynamically was as important as raw performance for many applications.\n",
        "\n",
        "Amazon's [MXNet](https://mxnet.apache.org/) approached the challenge of large-scale matrix operations by focusing on memory efficiency and scalability across different hardware configurations. It introduced a hybrid approach that combined aspects of both static and dynamic graphs, allowing for flexible model development while still enabling aggressive optimization of the underlying matrix operations.\n",
        "\n",
        "As deep learning applications grew more diverse, the need for specialized and higher-level abstractions became apparent. [Keras](https://keras.io/) emerged in 2015 to address this need, providing a unified interface that could run on top of multiple lower-level frameworks [@chollet2015keras].\n",
        "\n",
        "Google's [JAX](https://github.com/google/jax), introduced in 2018, brought functional programming principles to deep learning computations, enabling new patterns of model development [@jax2018github]. [FastAI](https://www.fast.ai/) built upon PyTorch to package common deep learning patterns into reusable components, making advanced techniques more accessible to practitioners [@howard2020fastai]. These higher-level frameworks demonstrated how abstraction could simplify development while maintaining the performance benefits of their underlying implementations.\n",
        "\n",
        "### Hardware Impact on Design {#sec-ai-frameworks-hardware-impact-design-e351}\n",
        "\n",
        "Hardware developments have fundamentally reshaped how frameworks implement and optimize matrix operations. The introduction of [NVIDIA's CUDA platform](https://developer.nvidia.com/cuda-toolkit) in 2007 marked a pivotal moment in framework design by enabling general-purpose computing on GPUs.[^fn-gpu-cpu] This was transformative because GPUs excel at parallel matrix operations, offering orders of magnitude speedup for the computations in deep learning. While a CPU might process matrix elements sequentially, a GPU can process thousands of elements simultaneously, fundamentally changing how frameworks approach computation scheduling.\n",
        "\n",
        "[^fn-gpu-cpu]: GPUs are designed for rendering graphics and is heavily used for parallel processing. TPUs were developed by Google for fast matrix multiplication and deep learning tasks.\n",
        "\n",
        "The development of hardware-specific accelerators further revolutionized framework design. [Google's Tensor Processing Units (TPUs)](https://cloud.google.com/tpu/), first deployed in 2016, were purpose-built for tensor operations, the fundamental building blocks of deep learning computations. TPUs introduced systolic array architectures[^fn-frameworks-2], which are particularly efficient for matrix multiplication and convolution operations. This hardware architecture prompted frameworks like TensorFlow to develop specialized compilation strategies that could map high-level operations directly to TPU instructions, bypassing traditional CPU-oriented optimizations.\n",
        "\n",
        "[^fn-frameworks-2]: **Systolic Array**: A hardware architecture designed to perform a series of parallel computations in a time-synchronized manner, optimizing the flow of data through a grid of processors for tasks like matrix multiplication.\n",
        "\n",
        "Mobile hardware accelerators,[^fn-hard-accel] such as [Apple's Neural Engine (2017)](https://machinelearning.apple.com/research/neural-engine-transformers) and Qualcomm's Neural Processing Units, brought new constraints and opportunities to framework design. These devices emphasized power efficiency over raw computational speed, requiring frameworks to develop new strategies for quantization and operator fusion[^fn-frameworks-3]. Mobile frameworks like TensorFlow Lite (more recently rebraneded to [LiteRT](https://ai.google.dev/edge/litert)) and [PyTorch Mobile](https://pytorch.org/mobile/home/) needed to balance model accuracy with energy consumption, leading to innovations in how matrix operations are scheduled and executed.\n",
        "\n",
        "[^fn-hard-accel]: Hardware accelerators are specialized systems that perform computing tasks more efficiently than central processing units (CPUs). These accelerators speed up the computation by allowing greater concurrency, optimized matrix operations, simpler control logic, and dedicated memory architecture. Each processing unit is more specialized than a CPU core, so more units can be fit on a chip and run in unison.\n",
        "\n",
        "[^fn-frameworks-3]: **Operation fusion**: A technique that combines multiple consecutive operations into a single kernel to reduce memory bandwidth usage and improve computational efficiency, particularly for element-wise operations.\n",
        "\n",
        "The emergence of custom ASIC (Application-Specific Integrated Circuit)[^fn-frameworks-4] solutions has further diversified the hardware landscape. Companies like [Graphcore](https://www.graphcore.ai/), [Cerebras](https://www.cerebras.net/), and [SambaNova](https://sambanova.ai/) have developed unique architectures for matrix computation, each with different strengths and optimization opportunities. This proliferation of specialized hardware has pushed frameworks to adopt more flexible intermediate representations of matrix operations, allowing for target-specific optimization while maintaining a common high-level interface.\n",
        "\n",
        "[^fn-frameworks-4]: **Application-Specific Integrated Circuit (ASIC)**: is a custom-built hardware chip optimized for specific tasks, such as matrix computations in deep learning, offering superior performance and energy efficiency compared to general-purpose processors.\n",
        "\n",
        "Field Programmable Gate Arrays (FPGAs) introduced yet another dimension to framework optimization. Unlike fixed-function ASICs, FPGAs allow for reconfigurable circuits that can be optimized for specific matrix operation patterns. Frameworks responding to this capability developed just-in-time compilation strategies that could generate optimized hardware configurations based on the specific needs of a model.\n",
        "\n",
        "## Fundamental Concepts {#sec-ai-frameworks-fundamental-concepts-23c0}\n",
        "\n",
        "Modern machine learning frameworks operate through the integration of four key layers: Fundamentals, Data Handling, Developer Interface, and Execution and Abstraction. These layers function together to provide a structured and efficient foundation for model development and deployment, as illustrated in @fig-fm_blocks.\n",
        "\n",
        "::: {#fig-fm_blocks fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\resizebox{.85\\textwidth}{!}{%\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "%\n",
        "\\tikzset{%\n",
        "    Line/.style={line width=1.0pt,black!50,text=black\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=1.4,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=34mm,\n",
        "    minimum width=34mm, minimum height=10mm\n",
        "  },\n",
        " Text/.style={%\n",
        "    inner sep=3pt,\n",
        "    draw=none,\n",
        "    line width=0.75pt,\n",
        "    fill=TextColor!80,\n",
        "    text=black,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=7mm, minimum height=5mm\n",
        "  },\n",
        "}\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine](B1){Execution Models};\n",
        "\\node[Box,node distance=4.2,right=of B1,fill=OliveL,\n",
        "              draw=OliveLine](B2){Programming Models};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=6mm,inner ysep=4mm,yshift=2mm,\n",
        "           fill=BackColor,fit=(B1)(B2),line width=0.75pt](BB1){};\n",
        "\\node[below=2pt of  BB1.north,anchor=north]{Developer Interface};\n",
        "%\n",
        "\\node[Box,below=1.75 of B1,fill=VioletL,\n",
        "              draw=VioletLine](2B1){Computational Graphs};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=8mm,inner ysep=4mm,yshift=2mm,xshift=2mm,\n",
        "           fill=BackColor,fit=(2B1),line width=0.75pt](BB1){};\n",
        "\\node[below=2pt of  BB1.north east,anchor=north east]{Fundamentals};\n",
        "%\n",
        "\\begin{scope}[shift={(0,-5.55)}]\n",
        "\\node[Box,fill=GreenL,draw=GreenLine](3B1){Memory Management and Device Placement};\n",
        "\\node[Box,node distance=4.2,right=of 3B1,fill=GreenL,\n",
        "              draw=GreenLine](3B2){Specialized Data Structures};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=6mm,inner ysep=4mm,yshift=2mm,\n",
        "           fill=BackColor,fit=(3B1)(3B2),line width=0.75pt](BB2){};\n",
        "\\node[below=1pt of  BB2.north,anchor=north]{Data Handling};\n",
        "\\end{scope}\n",
        "%\n",
        "\\node[Box,below=1.75 of $(3B1)!0.5!(3B2)$,fill=BlueL,\n",
        "              draw=BlueLine](4B1){Core Operations};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=6mm,inner ysep=4mm,yshift=2mm,\n",
        "           fill=BackColor,fit=(4B1),line width=0.75pt](BB2){};\n",
        "\\node[below=1pt of  BB2.north,anchor=north]{Execution and Abstraction};\n",
        "% Arrows\n",
        "\\draw[-latex,Line](B1)--node[Text,pos=0.4]{Generates}(2B1);\n",
        "\\draw[-latex,Line](B2)--node[Text,pos=0.4]{Defines}(B1);\n",
        "\\draw[-latex,Line](2B1)--node[Text,pos=0.4]{Optimizes Execution}(3B1);\n",
        "\\draw[-latex,Line](B2.210)--node[Text,pos=0.35]{Shapes Execution\\\\ Behavior}\n",
        "             ++(270:3.1)--++(180:1.5)|-(3B1);\n",
        "\\draw[-latex,Line](B2.330)--node[Text,pos=0.55]{Influences\\\\ Data Flow}(3B2.30);\n",
        "\\draw[-latex,Line](2B1)-|node[Text,pos=0.25]{Provides\\\\ Structure For}(3B2.130);\n",
        "\\draw[-latex,Line](3B1)|-node[Text,pos=0.25]{Coordinates\\\\ with}(4B1);\n",
        "\\draw[-latex,Line](3B2)|-node[Text,pos=0.25]{Feeds\\\\ Data Into}(4B1);\n",
        "\\end{tikzpicture}}\n",
        "```\n",
        "**Framework Layer Interaction**: Modern machine learning frameworks organize functionality into distinct layersâfundamentals, data handling, developer interface, and execution & abstractionâthat collaborate to streamline model building and deployment. This layered architecture enables modularity and allows developers to focus on specific aspects of the machine learning workflow without needing to manage low-level infrastructure.\n",
        ":::\n",
        "\n",
        "The Fundamentals layer establishes the structural basis of these frameworks through computational graphs. These graphs represent the operations within a model as directed acyclic graphs (DAGs), enabling automatic differentiation and optimization. By organizing operations and data dependencies, computational graphs provide the framework with the ability to distribute workloads and execute computations efficiently across a variety of hardware platforms.\n",
        "\n",
        "The Data Handling layer manages numerical data and parameters essential for machine learning workflows. Central to this layer are specialized data structures, such as tensors, which handle high-dimensional arrays while optimizing memory usage and device placement. Additionally, memory management and data movement strategies ensure that computational workloads are executed efficiently, particularly in environments with diverse or limited hardware resources.\n",
        "\n",
        "The Developer Interface layer provides the tools and abstractions through which users interact with the framework. Programming models allow developers to define machine learning algorithms in a manner suited to their specific needs. These are categorized as either imperative or symbolic. Imperative models offer flexibility and ease of debugging, while symbolic models prioritize performance and deployment efficiency. Execution models further shape this interaction by defining whether computations are carried out eagerly (immediately) or as pre-optimized static graphs.\n",
        "\n",
        "The Execution and Abstraction layer transforms these high-level representations into efficient hardware-executable operations. Core operations, encompassing everything from basic linear algebra to complex neural network layers, are highly optimized for diverse hardware platforms. This layer also includes mechanisms for allocating resources and managing memory dynamically, ensuring robust and scalable performance in both training and inference settings.\n",
        "\n",
        "Understanding these interconnected layers is essential for leveraging machine learning frameworks effectively. Each layer plays a distinct yet interdependent role in facilitating experimentation, optimization, and deployment. By mastering these concepts, practitioners can make informed decisions about resource utilization, scaling strategies, and the suitability of specific frameworks for various tasks.\n",
        "\n",
        "### Computational Graphs {#sec-ai-frameworks-computational-graphs-6ea3}\n",
        "\n",
        "Machine learning frameworks must efficiently translate high-level model descriptions into executable computations across diverse hardware platforms. At the center of this translation lies the computational graph, a powerful abstraction that represents mathematical operations and their dependencies. We begin by examining the fundamental structure of computational graphs, then investigate their implementation in modern frameworks, and analyze their implications for system design and performance.\n",
        "\n",
        "#### Basic Concepts {#sec-ai-frameworks-basic-concepts-9900}\n",
        "\n",
        "Computational graphs emerged as a fundamental abstraction in machine learning frameworks to address the growing complexity of deep learning models. As models grew larger and more sophisticated, the need for efficient execution across diverse hardware platforms became crucial. The computational graph bridges the gap between high-level model descriptions and low-level hardware execution [@Baydin_2018], representing a machine learning model as a directed acyclic graph (DAG) where nodes represent operations and edges represent data flow.\n",
        "\n",
        "For example, a node might represent a matrix multiplication operation, taking two input matrices (or tensors) and producing an output matrix (or tensor). To visualize this, consider the simple example in @fig-comp-graph. The directed acyclic graph computes $z = x \\times y$, where each variable is just numbers.\n",
        "\n",
        "::: {#fig-comp-graph fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{%\n",
        "    Line/.style={line width=1.0pt,black!50,rounded corners\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "   shape=circle,\n",
        "    inner xsep=1pt,\n",
        "    node distance=1.4,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    minimum width=8mm,\n",
        "  },\n",
        "}\n",
        "\\node[Box,fill=GreenL,draw=GreenLine,minimum width=13mm, ](B1){$f(x,y)$};\n",
        "\\node[Box,right=of B1,fill=OliveL,draw=OliveLine](B2){$z$};\n",
        "\\node[Box,above left=0.1 and 2 of B1,fill=OliveL,draw=OliveLine](B3){$x$};\n",
        "\\node[Box,below left=0.1 and 2 of B1,fill=OliveL,draw=OliveLine](B4){$y$};\n",
        "\\draw[-latex,Line](B1)--(B2);\n",
        "\\draw[-latex,Line](B3)to[bend left=25](B1);\n",
        "\\draw[-latex,Line](B4)to[bend right=25](B1);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Computational Graph**: Directed acyclic graphs represent machine learning models as a series of interconnected operations, enabling efficient computation and automatic differentiation. This example presents a simple computation, $z = x \\times y$, where nodes define operations and edges specify the flow of data between them.\n",
        ":::\n",
        "\n",
        "As shown in @fig-mlfm-comp-graph, the structure of the computation graph[^fn-dynamic-comp-graph] involves defining interconnected layers, such as convolution, activation, pooling, and normalization, which are optimized before execution. The figure also demonstrates key system-level interactions, including memory management and device placement, showing how the static graph approach enables comprehensive pre-execution analysis and resource allocation.\n",
        "\n",
        "[^fn-dynamic-comp-graph]: Computation graphs are used to visualize the sequence of operations in a given model and to facilitate automatic differentiation which trains models through backpropagation.\n",
        "\n",
        "::: {#fig-mlfm-comp-graph fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=1.1,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=26mm,\n",
        "    minimum width=26mm, minimum height=10mm\n",
        "  },\n",
        " Text/.style={%\n",
        "    inner sep=3pt,\n",
        "    draw=none,\n",
        "    line width=0.75pt,\n",
        "    fill=TextColor!80,\n",
        "    text=black,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=7mm, minimum height=5mm\n",
        "  }\n",
        "}\n",
        "\\begin{scope}[local bounding box=scope1]\n",
        "\\node[Box,fill=BlueL,draw=BlueLine](B1){Operation Node 1};\n",
        "\\node[Box,fill=BlueL,draw=BlueLine,below=of B1](B2){Operation Node 2};\n",
        "\\node[Box,fill=BlueL,draw=BlueLine,below left=0.75 and 0.1 of B2](B3){Operation Node 3};\n",
        "\\node[Box,fill=BlueL,draw=BlueLine,below right=0.75 and 0.1 of B2](B4){Operation Node 4};\n",
        "\\node[Box,fill=BlueL,draw=BlueLine,below=of B3](B5){Operation Node 5};\n",
        "\\node[Box,fill=BlueL,draw=BlueLine,below=of B4](B6){Operation Node 6};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,yshift=2mm,\n",
        "           fill=BackColor!80,fit=(B1)(B3)(B6),line width=0.75pt](BB1){};\n",
        "\\node[below=2pt of  BB1.north east,anchor=north east]{Computational Graph};\n",
        "\\end{scope}\n",
        "%\n",
        "\\begin{scope}[local bounding box=scope2, shift={($(scope1.east)+(45mm,10mm)$)}]\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine](2B1){Memory Management};\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine,below=of 2B1](2B2){Device Placement};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,yshift=2mm,\n",
        "           fill=BackColor!50,fit=(2B1)(2B2),line width=0.75pt](2BB1){};\n",
        "\\node[below=2pt of  2BB1.north east,anchor=north east]{System Components};\n",
        "\\end{scope}\n",
        "\\draw[-latex,Line](B1)--node[Text,pos=0.45]{Data Flow}(B2);\n",
        "\\draw[-latex,Line](B3)--node[Text,pos=0.45]{Data Flow}(B5);\n",
        "\\draw[-latex,Line](B4)--node[Text,pos=0.45]{Data Flow}(B6);\n",
        "\\draw[-latex,Line](B2)-|node[Text,pos=0.45]{Data Flow}(B3);\n",
        "\\draw[-latex,Line](B2)-|node[Text,pos=0.45]{Data Flow}(B4);\n",
        "\\draw[latex-,Line](2B2) --node[Text,pos=0.55]{Interacts with} (scope1.east|-2B2);\n",
        "\\draw[latex-,Line](2B1) --node[Text,pos=0.55]{Interacts with} (scope1.east|-2B1);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Computation Graph**: This diagram represents a computation as a directed acyclic graph, where nodes denote variables and edges represent operations. By expressing computations in this form, systems can efficiently perform automatic differentiationâessential for training machine learning models through backpropagationâand optimize resource allocation before execution.\n",
        ":::\n",
        "\n",
        "##### Layers and Tensors {#sec-ai-frameworks-layers-tensors-6518}\n",
        "\n",
        "Modern machine learning frameworks implement neural network computations through two key abstractions: layers and tensors. Layers represent computational units that perform operations like convolution, pooling, or dense transformations. Each layer maintains internal states, including weights and biases, that evolve during model training. When data flows through these layers, it takes the form of tensorsâimmutable mathematical objects that hold and transmit numerical values.\n",
        "\n",
        "The relationship between layers and tensors mirrors the distinction between operations and data in traditional programming. A layer defines how to transform input tensors into output tensors, much like a function defines how to transform its inputs into outputs. However, layers add an extra dimension: they maintain and update internal parameters during training. For example, a convolutional layer not only specifies how to perform convolution operations but also learns and stores the optimal convolution filters for a given task.\n",
        "\n",
        "Frameworks like TensorFlow and PyTorch leverage this abstraction to simplify model implementation. When a developer writes `tf.keras.layers.` `Conv2D`, the framework constructs the necessary graph nodes for convolution operations, parameter management, and data flow. This high-level interface shields developers from the complexities of implementing convolution operations, managing memory, or handling parameter updates during training.\n",
        "\n",
        "##### Neural Network Construction {#sec-ai-frameworks-neural-network-construction-970d}\n",
        "\n",
        "The power of computational graphs extends beyond basic layer operations. Activation functions, essential for introducing non-linearity in neural networks, become nodes in the graph. Functions like ReLU, sigmoid, and tanh transform the output tensors of layers, enabling networks to approximate complex mathematical functions. Frameworks provide optimized implementations of these activation functions, allowing developers to experiment with different non-linearities without worrying about implementation details.\n",
        "\n",
        "Modern frameworks further extend this abstraction by providing complete model architectures as pre-configured computational graphs. Models like ResNet and MobileNet, which have proven effective across many tasks, come ready to use. Developers can start with these architectures, customize specific layers for their needs, and leverage transfer learning from pre-trained weights. This approach accelerates development while maintaining the benefits of carefully optimized implementations.\n",
        "\n",
        "##### System-Level Consequences {#sec-ai-frameworks-systemlevel-consequences-55cf}\n",
        "\n",
        "The computational graph abstraction fundamentally shapes how machine learning frameworks operate. By representing computations as a directed acyclic graph, frameworks gain the ability to analyze and optimize the entire computation before execution begins. The explicit representation of data dependencies enables automatic differentiationâa crucial capability for training neural networks through gradient-based optimization.\n",
        "\n",
        "This graph structure also provides flexibility in execution. The same model definition can run efficiently across different hardware platforms, from CPUs to GPUs to specialized accelerators. The framework handles the complexity of mapping operations to specific hardware capabilities, optimizing memory usage, and coordinating parallel execution. Moreover, the graph structure enables model serialization, allowing trained models to be saved, shared, and deployed across different environments.\n",
        "\n",
        "While neural network diagrams help visualize model architecture, computational graphs serve a deeper purpose. They provide the precise mathematical representation needed to bridge the gap between intuitive model design and efficient execution. Understanding this representation reveals how frameworks transform high-level model descriptions into optimized, hardware-specific implementations, making modern deep learning practical at scale.\n",
        "\n",
        "It is important to differentiate computational graphs from neural network diagrams, such as those for multilayer perceptrons (MLPs), which depict nodes and layers. Neural network diagrams visualize the architecture and flow of data through nodes and layers, providing an intuitive understanding of the model's structure. In contrast, computational graphs provide a low-level representation of the underlying mathematical operations and data dependencies required to implement and train these networks.\n",
        "\n",
        "From a systems perspective, computational graphs provide several key capabilities that influence the entire machine learning pipeline. They enable automatic differentiation[^fn-frameworks-5], which we will discuss later, provide clear structure for analyzing data dependencies and potential parallelism, and serve as an intermediate representation that can be optimized and transformed for different hardware targets. Understanding this architecture is essential for comprehending how frameworks translate high-level model descriptions into efficient executable code.\n",
        "\n",
        "[^fn-frameworks-5]: A computational technique that systematically computes derivatives of functions using the chain rule, crucial for training machine learning models through gradient-based optimization.\n",
        "\n",
        "#### Static Graphs {#sec-ai-frameworks-static-graphs-8b05}\n",
        "\n",
        "Static computation graphs, pioneered by early versions of TensorFlow, implement a \"define-then-run\" execution model. In this approach, developers must specify the entire computation graph before execution begins. This architectural choice has significant implications for both system performance and development workflow, as we will examine later.\n",
        "\n",
        "A static computation graph implements a clear separation between the definition of operations and their execution. During the definition phase, each mathematical operation, variable, and data flow connection is explicitly declared and added to the graph structure. This graph is a complete specification of the computation but does not perform any actual calculations. Instead, the framework constructs an internal representation of all operations and their dependencies, which will be executed in a subsequent phase.\n",
        "\n",
        "This upfront definition enables powerful system-level optimizations. The framework can analyze the complete structure to identify opportunities for operation fusion, eliminating unnecessary intermediate results. Memory requirements can be precisely calculated and optimized in advance, leading to efficient allocation strategies. Furthermore, static graphs can be compiled into highly optimized executable code for specific hardware targets, taking full advantage of platform-specific features. Once validated, the same computation can be run repeatedly with high confidence in its behavior and performance characteristics.\n",
        "\n",
        "@fig-mlfm-static-graph illustrates this fundamental two-phase approach: first, the complete computational graph is constructed and optimized; then, during the execution phase, actual data flows through the graph to produce results. This separation enables the framework to perform comprehensive analysis and optimization of the entire computation before any execution begins.\n",
        "\n",
        "::: {#fig-mlfm-static-graph fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50,rounded corners\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=0.7,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=18mm,\n",
        "    minimum width=18mm, minimum height=10mm\n",
        "  },\n",
        "}\n",
        "\\node[Box,fill=VioletL,draw=VioletLine](B1){Define Operations};\n",
        "\\node[Box,fill=VioletL,draw=VioletLine,right=of B1](B2){Declare Variables};\n",
        "\\node[Box,fill=VioletL,draw=VioletLine,right=of B2](B3){Build Graph};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=6mm,yshift=2mm,\n",
        "           fill=BackColor!80,fit=(B1)(B2)(B3),line width=0.75pt](BB1){};\n",
        "\\node[below=2pt of  BB1.north,anchor=north]{Definition Phase};\n",
        "%\n",
        "\\node[Box,node distance=1.5,fill=BrownL,draw=BrownLine,right=of B3](B4){Load Data};\n",
        "\\node[Box,fill=BrownL,draw=BrownLine,right=of B4](B5){Run Graph};\n",
        "\\node[Box,fill=BrownL,draw=BrownLine,right=of B5](B6){Get Results};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=GreenLine,inner xsep=4mm,inner ysep=6mm,yshift=2mm,\n",
        "           fill=GreenL!20,fit=(B4)(B5)(B6),line width=0.75pt](BB2){};\n",
        "\\node[below=2pt of  BB2.north,anchor=north]{Execution Phase};\n",
        "%\n",
        "\\foreach \\x/\\y in{1/2,2/3,3/4,4/5,5/6}\n",
        "\\draw[-latex,Line](B\\x)--(B\\y);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Static Computation Graph**: Machine learning frameworks first define computations as a graph of operations, enabling global optimizations like operation fusion and efficient resource allocation before any data flows through the system. This two-phase approach separates graph construction and optimization from execution, improving performance and predictability.\n",
        ":::\n",
        "\n",
        "#### Dynamic Graphs {#sec-ai-frameworks-dynamic-graphs-a146}\n",
        "\n",
        "Dynamic computation graphs, popularized by PyTorch, implement a \"define-by-run\" execution model. This approach constructs the graph during execution, offering greater flexibility in model definition and debugging. Unlike static graphs, which rely on predefined memory allocation, dynamic graphs allocate memory as operations execute, making them susceptible to memory fragmentation[^fn-frameworks-6] in long-running tasks.\n",
        "\n",
        "[^fn-frameworks-6]: **Memory Fragmentation**: The inefficient use of memory caused by small, unused gaps between allocated memory blocks, often resulting in wasted memory or reduced performance.\n",
        "\n",
        "As shown in @fig-mlfm-dynamic-graph-flow, each operation is defined, executed, and completed before moving on to define the next operation. This contrasts sharply with static graphs, where all operations must be defined upfront. When an operation is defined, it is immediately executed, and its results become available for subsequent operations or for inspection during debugging. This cycle continues until all operations are complete.\n",
        "\n",
        "::: {#fig-mlfm-dynamic-graph-flow fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=1.0,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=18mm,\n",
        "    minimum width=18mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "   Text/.style={%\n",
        "    inner sep=4pt,\n",
        "    draw=none,\n",
        "    line width=0.75pt,\n",
        "    fill=TextColor!80,\n",
        "    text=black,\n",
        "    font=\\usefont{T1}{phv}{m}{n}\\footnotesize,\n",
        "    align=flush center,\n",
        "    minimum width=7mm, minimum height=5mm\n",
        "  },\n",
        "}\n",
        "\\node[Box,text width=12mm,minimum width=14mm,\n",
        "             fill=OliveL!70,draw=OliveLine](B1){Start};\n",
        "\\node[Box,fill=VioletL,draw=VioletLine,right=of B1](B2){Operation 1};\n",
        "\\node[Box,fill=GreenL,draw=GreenLine,right=of B2,\n",
        "            minimum height=14mm](B3){Operation 1 Executed};\n",
        "\\node[Box,node distance=2.1,fill=VioletL,draw=VioletLine,right=of B3](B4){Operation 2};\n",
        "\\node[Box,fill=GreenL,draw=GreenLine,right=of B4,\n",
        "            minimum height=14mm](B5){Operation 2 Executed};\n",
        "\\node[Box,right=of B5,text width=12mm,minimum width=14mm,\n",
        "             fill=OliveL!70,draw=OliveLine](B6){End};\n",
        "%%\n",
        "\\foreach \\x/\\y in{1/2,2/3,3/4,4/5,5/6}\n",
        "\\draw[-latex,Line](B\\x)--(B\\y);\n",
        "\\def\\vi{15mm}\n",
        "\\draw[thick]($(B1.east)!0.5!(B2.west)$)--++(90:\\vi)\n",
        "node[Text]{Define\\\\ Operation};\n",
        "\\draw[thick]($(B2.east)!0.5!(B3.west)$)--++(90:\\vi)\n",
        "node[Text]{Execute\\\\ Operation};\n",
        "\\draw[thick]($(B3.east)!0.5!(B4.west)$)--++(90:\\vi)\n",
        "node[Text]{Define Next\\\\ Operation};\n",
        "\\draw[thick]($(B4.east)!0.5!(B5.west)$)--++(90:\\vi)\n",
        "node[Text]{Execute\\\\ Operation};\n",
        "\\draw[thick]($(B5.east)!0.5!(B6.west)$)--++(90:\\vi)\n",
        "node[Text](BB6){Repeat\\\\ Until Done};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=8mm,yshift=2mm,\n",
        "           fill=BackColor!80,fit=(B1)(B2)(BB6)(B6),line width=0.75pt](BB2){};\n",
        "\\node[below=2pt of  BB2.north,anchor=north]{Runtime Execution};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Dynamic Graph Execution**: Machine learning frameworks define and execute operations sequentially at runtime, enabling flexible model construction and immediate evaluation of intermediate results. This contrasts with static graphs which require complete upfront definition, and supports debugging and adaptive computation during model training and inference.\n",
        ":::\n",
        "\n",
        "Dynamic graphs excel in scenarios that require conditional execution or dynamic control flow, such as when processing variable-length sequences or implementing complex branching logic. They provide immediate feedback during development, making it easier to identify and fix issues in the computational pipeline. This flexibility aligns naturally with imperative programming patterns familiar to most developers, allowing them to inspect and modify computations at runtime. These characteristics make dynamic graphs particularly valuable during the research and development phase of ML projects.\n",
        "\n",
        "#### System Consequences {#sec-ai-frameworks-system-consequences-39d2}\n",
        "\n",
        "The architectural differences between static and dynamic computational graphs have multiple implications for how machine learning systems are designed and executed. These implications touch on various aspects of memory usage, device utilization, execution optimization, and debugging, all of which play crucial roles in determining the efficiency and scalability of a system. Here, we start with a focus on memory management and device placement as foundational concepts, leaving more detailed discussions for later chapters. This allows us to build a clear understanding before exploring more complex topics like optimization and fault tolerance.\n",
        "\n",
        "##### Memory Management {#sec-ai-frameworks-memory-management-6237}\n",
        "\n",
        "Memory management occurs when executing computational graphs. Static graphs benefit from their predefined structure, allowing for precise memory planning before execution. Frameworks can calculate memory requirements in advance, optimize allocation, and minimize overhead through techniques like memory reuse. This structured approach helps ensure consistent performance, particularly in resource-constrained environments, such as Mobile and Tiny ML systems.\n",
        "\n",
        "Dynamic graphs, by contrast, allocate memory dynamically as operations are executed. While this flexibility is invaluable for handling dynamic control flows or variable input sizes, it can result in higher memory overhead and fragmentation. These trade-offs are often most apparent during development, where dynamic graphs enable rapid iteration and debugging but may require additional optimization for production deployment.\n",
        "\n",
        "##### Device Placement {#sec-ai-frameworks-device-placement-7582}\n",
        "\n",
        "Device placement, the process of assigning operations to hardware resources such as CPUs, GPUs, or specialized ASICS like TPUs, is another system-level consideration. Static graphs allow for detailed pre-execution analysis, enabling the framework to map computationally intensive operations efficiently to devices while minimizing communication overhead. This capability makes static graphs well-suited for optimizing execution on specialized hardware, where performance gains can be significant.\n",
        "\n",
        "Dynamic graphs, in contrast, handle device placement at runtime. This allows them to adapt to changing conditions, such as hardware availability or workload demands. However, the lack of a complete graph structure before execution can make it challenging to optimize device utilization fully, potentially leading to inefficiencies in large-scale or distributed setups.\n",
        "\n",
        "##### Broader Perspective {#sec-ai-frameworks-broader-perspective-494f}\n",
        "\n",
        "The trade-offs between static and dynamic graphs extend well beyond memory and device considerations. As shown in @tbl-mlfm-graphs, these architectures influence optimization potential, debugging capabilities, scalability, and deployment complexity. While these broader implications are not the focus of this section, they will be explored in detail in later chapters, particularly in the context of training workflows and system-level optimizations.\n",
        "\n",
        "These hybrid solutions aim to provide the flexibility of dynamic graphs during development while enabling the performance optimizations of static graphs in production environments. The choice between static and dynamic graphs often depends on specific project requirements, balancing factors like development speed, production performance, and system complexity.\n",
        "\n",
        "| Aspect | Static Graphs | Dynamic Graphs |\n",
        "|:-----------------|:-------------------------|:---------------------------|\n",
        "| Memory Management | Precise allocation planning, optimized memory usage | Flexible but potentially less efficient allocation |\n",
        "| Optimization Potential | Comprehensive graph-level optimizations possible | Limited to local optimizations due to runtime construction |\n",
        "| Hardware Utilization | Can generate highly optimized hardware-specific code | May sacrifice some hardware-specific optimizations |\n",
        "| Development Experience | Requires more upfront planning, harder to debug | Better debugging, faster iteration cycles |\n",
        "| Runtime Flexibility | Fixed computation structure | Can adapt to runtime conditions |\n",
        "| Production Performance | Generally better performance at scale | May have overhead from runtime graph construction |\n",
        "| Integration with Traditional Code | More separation between definition and execution | Natural integration with imperative code |\n",
        "| Memory Overhead | Lower memory overhead due to planned allocations | Higher memory overhead due to dynamic allocations |\n",
        "| Debugging Capability | Limited to pre-execution analysis | Runtime inspection and modification possible |\n",
        "| Deployment Complexity | Simpler deployment due to fixed structure | May require additional runtime support |\n",
        "\n",
        ": **Graph Computation Modes**: Static graphs define the entire computation upfront, enabling optimization, while dynamic graphs construct the computation on-the-fly, offering flexibility for variable-length inputs and control flow. This distinction impacts both the efficiency of execution and the ease of model development and debugging. {#tbl-mlfm-graphs .hover .striped}\n",
        "\n",
        "### Automatic Differentiation {#sec-ai-frameworks-automatic-differentiation-6b16}\n",
        "\n",
        "Machine learning frameworks must solve a fundamental computational challenge: calculating derivatives through complex chains of mathematical operations efficiently and accurately. This capability enables the training of neural networks by computing how millions of parameters should be adjusted to improve the model's performance [@baydin2018].\n",
        "\n",
        "@lst-auto_diff_intro shows a simple computation that illustrates this challenge.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-auto_diff_intro .callout-important title=\"**Automatic Differentiation**: Enables efficient computation of gradients for complex functions, crucial for optimizing neural network parameters.\"}\n",
        "```{.python}\n",
        "def f(x):\n",
        "    a = x * x      # Square\n",
        "    b = sin(x)     # Sine\n",
        "    return a * b   # Product\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "9a1effa8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-auto_diff_intro\n",
        "#| lst-cap: \"**Automatic Differentiation**: Enables efficient computation of gradients for complex functions, crucial for optimizing neural network parameters.\"\n",
        "#| eval: false\n",
        "\n",
        "def f(x):\n",
        "    a = x * x      # Square\n",
        "    b = sin(x)     # Sine\n",
        "    return a * b   # Product"
      ],
      "id": "7ce04c51",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Even in this basic example, computing derivatives manually would require careful application of calculus rules - the product rule, the chain rule, and derivatives of trigonometric functions. Now imagine scaling this to a neural network with millions of operations. This is where automatic differentiation (AD) becomes essential.\n",
        "\n",
        "Automatic differentiation calculates derivatives of functions implemented as computer programs by decomposing them into elementary operations. In our example, AD breaks down `f(x)` into three basic steps:\n",
        "\n",
        "1.  Computing `a = x * x` (squaring)\n",
        "2.  Computing `b = sin(x)` (sine function)\n",
        "3.  Computing the final product `a * b`\n",
        "\n",
        "For each step, AD knows the basic derivative rules:\n",
        "\n",
        "-   For squaring: `d(xÂ²)/dx = 2x`\n",
        "-   For sine: `d(sin(x))/dx = cos(x)`\n",
        "-   For products: `d(uv)/dx = u(dv/dx) + v(du/dx)`\n",
        "\n",
        "By tracking how these operations combine and systematically applying the chain rule, AD computes exact derivatives through the entire computation. When implemented in frameworks like PyTorch or TensorFlow, this enables automatic computation of gradients through arbitrary neural network architectures.[^fn-frameworks-7] This fundamental understanding of how AD decomposes and tracks computations sets the foundation for examining its implementation in machine learning frameworks. We will explore its mathematical principles, system architecture implications, and performance considerations that make modern machine learning possible.\n",
        "\n",
        "[^fn-frameworks-7]: Automatic differentiation (AD) benefits diverse fields beyond machine learning, including physics simulations, design optimization, and financial risk analysis, by efficiently and accurately computing derivatives for complex processes [@paszke2019].\n",
        "\n",
        "#### Computational Methods {#sec-ai-frameworks-computational-methods-f5da}\n",
        "\n",
        "##### Forward Mode {#sec-ai-frameworks-forward-mode-9e52}\n",
        "\n",
        "Forward mode automatic differentiation computes derivatives alongside the original computation, tracking how changes propagate from input to output. This approach mirrors how we might manually compute derivatives, making it intuitive to understand and implement in machine learning frameworks.\n",
        "\n",
        "Consider our previous example with a slight modification to show how forward mode works (see @lst-forward_mode_ad).\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-forward_mode_ad .callout-important title=\"**Forward Mode Automatic Differentiation**: Computes derivatives alongside function evaluations using the product rule, illustrating how changes in inputs propagate to outputs.\"}\n",
        "```{.python}\n",
        "def f(x):    # Computing both value and derivative\n",
        "  # Step 1: x -> xÂ²\n",
        "  a = x * x           # Value: xÂ²\n",
        "  da = 2 * x          # Derivative: 2x\n",
        "\n",
        "  # Step 2: x -> sin(x)\n",
        "  b = sin(x)          # Value: sin(x)\n",
        "  db = cos(x)         # Derivative: cos(x)\n",
        "\n",
        "  # Step 3: Combine using product rule\n",
        "  result = a * b      # Value: xÂ² * sin(x)\n",
        "  dresult = a * db + b * da # Derivative: xÂ²*cos(x) + sin(x)*2x\n",
        "\n",
        "  return result, dresult\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "50b8bae4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-forward_mode_ad\n",
        "#| lst-cap: \"**Forward Mode Automatic Differentiation**: Computes derivatives alongside function evaluations using the product rule, illustrating how changes in inputs propagate to outputs.\"\n",
        "#| eval: false\n",
        "\n",
        "def f(x):    # Computing both value and derivative\n",
        "  # Step 1: x -> xÂ²\n",
        "  a = x * x           # Value: xÂ²\n",
        "  da = 2 * x          # Derivative: 2x\n",
        "\n",
        "  # Step 2: x -> sin(x)\n",
        "  b = sin(x)          # Value: sin(x)\n",
        "  db = cos(x)         # Derivative: cos(x)\n",
        "\n",
        "  # Step 3: Combine using product rule\n",
        "  result = a * b      # Value: xÂ² * sin(x)\n",
        "  dresult = a * db + b * da  # Derivative:\n",
        "                             # xÂ²*cos(x) + sin(x)*2x\n",
        "\n",
        "  return result, dresult"
      ],
      "id": "e002b04f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Forward mode achieves this systematic derivative computation by augmenting each number with its derivative value, creating what mathematicians call a \"dual number.\" The example in @lst-forward_mode_dual shows how this works numerically when x = 2.0, the computation tracks both values and derivatives:\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-forward_mode_dual .callout-important title=\"**Forward Mode**: The example computes derivatives alongside function values using dual numbers, showcasing how to track changes in both the result and its rate of change.\"}\n",
        "```{.python}\n",
        "x = 2.0    # Initial value\n",
        "dx = 1.0   # We're tracking derivative with respect to x\n",
        "\n",
        "# Step 1: xÂ²\n",
        "a = 4.0    # (2.0)Â²\n",
        "da = 4.0   # 2 * 2.0\n",
        "\n",
        "# Step 2: sin(x)\n",
        "b = 0.909   # sin(2.0)\n",
        "db = -0.416 # cos(2.0)\n",
        "\n",
        "# Final result\n",
        "result = 3.637   # 4.0 * 0.909\n",
        "dresult = 2.805  # 4.0 * (-0.416) + 0.909 * 4.0\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "e10f794e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-forward_mode_dual\n",
        "#| lst-cap: \"**Forward Mode**: The example computes derivatives alongside function values using dual numbers, showcasing how to track changes in both the result and its rate of change.\"\n",
        "#| eval: false\n",
        "\n",
        "x = 2.0    # Initial value\n",
        "dx = 1.0   # We're tracking derivative with respect to x\n",
        "\n",
        "# Step 1: xÂ²\n",
        "a = 4.0    # (2.0)Â²\n",
        "da = 4.0   # 2 * 2.0\n",
        "\n",
        "# Step 2: sin(x)\n",
        "b = 0.909   # sin(2.0)\n",
        "db = -0.416 # cos(2.0)\n",
        "\n",
        "# Final result\n",
        "result = 3.637   # 4.0 * 0.909\n",
        "dresult = 2.805  # 4.0 * (-0.416) + 0.909 * 4.0"
      ],
      "id": "7b5f0820",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "###### Implementation Structure {#sec-ai-frameworks-implementation-structure-03e5}\n",
        "\n",
        "Forward mode AD structures computations to track both values and derivatives simultaneously through programs. The structure of such computations can be seen again in @lst-forward_structure, where each intermediate operation is made explicit.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-forward_structure .callout-important title=\"**Forward Mode AD Structure**: Each operation tracks values and derivatives simultaneously, highlighting how computations are structured in forward mode automatic differentiation.\"}\n",
        "```{.python}\n",
        "def f(x):\n",
        "    a = x * x\n",
        "    b = sin(x)\n",
        "    return a * b\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "4d4a9219"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-forward_structure\n",
        "#| lst-cap: \"**Forward Mode AD Structure**: Each operation tracks values and derivatives simultaneously, highlighting how computations are structured in forward mode automatic differentiation.\"\n",
        "#| eval: false\n",
        "\n",
        "def f(x):\n",
        "    a = x * x\n",
        "    b = sin(x)\n",
        "    return a * b"
      ],
      "id": "ff065979",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "When a framework executes this function in forward mode, it augments each computation to carry two pieces of information: the value itself and how that value changes with respect to the input. This paired movement of value and derivative mirrors how we think about rates of change as shown in @lst-dual_tracking.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-dual_tracking .callout-important title=\"**Dual Tracking**: Each computation tracks both its value and derivative, illustrating how forward mode automatic differentiation works in practice. This example helps understand how values and their rates of change are simultaneously computed during function evaluation.\"}\n",
        "```{.python}\n",
        "# Conceptually, each computation tracks (value, derivative)\n",
        "x = (2.0, 1.0)           # Input value and its derivative\n",
        "a = (4.0, 4.0)           # xÂ² and its derivative 2x\n",
        "b = (0.909, -0.416)      # sin(x) and its derivative cos(x)\n",
        "result = (3.637, 2.805)  # Final value and derivative\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "a19f962d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-dual_tracking\n",
        "#| lst-cap: \"**Dual Tracking**: Each computation tracks both its value and derivative, illustrating how forward mode automatic differentiation works in practice. This example helps understand how values and their rates of change are simultaneously computed during function evaluation.\"\n",
        "#| eval: false\n",
        "\n",
        "# Conceptually, each computation tracks (value, derivative)\n",
        "x = (2.0, 1.0)           # Input value and its derivative\n",
        "a = (4.0, 4.0)           # xÂ² and its derivative 2x\n",
        "b = (0.909, -0.416)      # sin(x) and its derivative cos(x)\n",
        "result = (3.637, 2.805)  # Final value and derivative"
      ],
      "id": "74139fc8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This forward propagation of derivative information happens automatically within the framework's computational machinery. The framework: 1. Enriches each value with derivative information 2. Transforms each basic operation to handle both value and derivative 3. Propagates this information forward through the computation\n",
        "\n",
        "The beauty of this approach is that it follows the natural flow of computation - as values move forward through the program, their derivatives move with them. This makes forward mode particularly well-suited for functions with single inputs and multiple outputs, as the derivative information follows the same path as the regular computation.\n",
        "\n",
        "###### Performance Characteristics {#sec-ai-frameworks-performance-characteristics-ae7a}\n",
        "\n",
        "Forward mode AD exhibits distinct performance patterns that influence when and how frameworks employ it. Understanding these characteristics helps explain why frameworks choose different AD approaches for different scenarios.\n",
        "\n",
        "Forward mode performs one derivative computation alongside each original operation. For a function with one input variable, this means roughly doubling the computational work - once for the value, once for the derivative. The cost scales linearly with the number of operations in the program, making it predictable and manageable for simple computations.\n",
        "\n",
        "However, consider a neural network layer computing derivatives for matrix multiplication between weights and inputs. To compute derivatives with respect to all weights, forward mode would need to perform the computation once for each weight parameter - potentially thousands of times. This reveals an important characteristic: forward mode's efficiency depends on the number of input variables we need derivatives for.\n",
        "\n",
        "Forward mode's memory requirements are relatively modest. It needs to store the original value, a single derivative value, and temporary results during computation. The memory usage stays constant regardless of how complex the computation becomes. This predictable memory pattern makes forward mode particularly suitable for embedded systems with limited memory, real-time applications requiring consistent memory use, and systems where memory bandwidth is a bottleneck.\n",
        "\n",
        "This combination of computational scaling with input variables but constant memory usage creates specific trade-offs that influence framework design decisions. Forward mode shines in scenarios with few inputs but many outputs, where its straightforward implementation and predictable resource usage outweigh the computational cost of multiple passes.\n",
        "\n",
        "###### Use Cases {#sec-ai-frameworks-use-cases-4c19}\n",
        "\n",
        "While forward mode automatic differentiation isn't the primary choice for training full neural networks, it plays several important roles in modern machine learning frameworks. Its strength lies in scenarios where we need to understand how small changes in inputs affect a network's behavior. Consider a data scientist trying to understand why their model makes certain predictions. They might want to analyze how changing a single pixel in an image or a specific feature in their data affects the model's output, as illustrated in @lst-image_sensitivity.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-image_sensitivity .callout-important title=\"**Sensitivity Analysis**: Small changes in input images affect a neural network's predictions through forward mode automatic differentiation via This code. Understanding these effects helps in debugging models and improving their robustness.\"}\n",
        "```{.python}\n",
        "def analyze_image_sensitivity(model, image):\n",
        "    # Forward mode tracks how changing one pixel\n",
        "    # affects the final classification\n",
        "    layer1 = relu(W1 @ image + b1)\n",
        "    layer2 = relu(W2 @ layer1 + b2)\n",
        "    predictions = softmax(W3 @ layer2 + b3)\n",
        "    return predictions\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "9f8a6547"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-image_sensitivity\n",
        "#| lst-cap: \"**Sensitivity Analysis**: Small changes in input images affect a neural network's predictions through forward mode automatic differentiation via This code. Understanding these effects helps in debugging models and improving their robustness.\"\n",
        "#| eval: false\n",
        "\n",
        "def analyze_image_sensitivity(model, image):\n",
        "    # Forward mode tracks how changing one pixel\n",
        "    # affects the final classification\n",
        "    layer1 = relu(W1 @ image + b1)\n",
        "    layer2 = relu(W2 @ layer1 + b2)\n",
        "    predictions = softmax(W3 @ layer2 + b3)\n",
        "    return predictions"
      ],
      "id": "0509f2ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "As the computation moves through each layer, forward mode carries both values and derivatives, making it straightforward to see how input perturbations ripple through to the final prediction. For each operation, we can track exactly how small changes propagate forward.\n",
        "\n",
        "Neural network interpretation presents another compelling application. When researchers want to generate saliency maps or attribution scores, they often need to compute how each input element influences the output as shown in @lst-feature_importance.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-feature_importance .callout-important title=\"**Forward Mode AD**: Efficiently computes feature importance by tracking input perturbations through network operations.\"}\n",
        "```{.python}\n",
        "def compute_feature_importance(model, input_features):\n",
        "    # Track influence of each input feature\n",
        "    # through the network's computation\n",
        "    hidden = tanh(W1 @ input_features + b1)\n",
        "    logits = W2 @ hidden + b2\n",
        "    # Forward mode efficiently computes d(logits)/d(input)\n",
        "    return logits\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "814e96a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-feature_importance\n",
        "#| lst-cap: \"**Forward Mode AD**: Efficiently computes feature importance by tracking input perturbations through network operations.\"\n",
        "#| eval: false\n",
        "\n",
        "def compute_feature_importance(model, input_features):\n",
        "    # Track influence of each input feature\n",
        "    # through the network's computation\n",
        "    hidden = tanh(W1 @ input_features + b1)\n",
        "    logits = W2 @ hidden + b2\n",
        "    # Forward mode efficiently computes d(logits)/d(input)\n",
        "    return logits"
      ],
      "id": "594c888e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "In specialized training scenarios, particularly those involving online learning where models update on individual examples, forward mode offers advantages. The framework can track derivatives for a single example through the network efficiently, though this approach becomes less practical when dealing with batch training or updating multiple model parameters simultaneously.\n",
        "\n",
        "Understanding these use cases helps explain why machine learning frameworks maintain forward mode capabilities alongside other differentiation strategies. While reverse mode handles the heavy lifting of full model training, forward mode provides an elegant solution for specific analytical tasks where its computational pattern matches the problem structure.\n",
        "\n",
        "##### Reverse Mode {#sec-ai-frameworks-reverse-mode-9e4d}\n",
        "\n",
        "Reverse mode automatic differentiation forms the computational backbone of modern neural network training. This isn't by accident - reverse mode's structure perfectly matches what we need for training neural networks. During training, we have one scalar output (the loss function) and need derivatives with respect to millions of parameters (the network weights). Reverse mode is exceptionally efficient at computing exactly this pattern of derivatives.\n",
        "\n",
        "A closer look at @lst-reverse_simple reveals how reverse mode differentiation is structured.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_simple .callout-important title=\"Basic example of reverse mode automatic differentiation\"}\n",
        "```{.python}\n",
        "def f(x):\n",
        "    a = x * x        # First operation: square x\n",
        "    b = sin(x)       # Second operation: sine of x\n",
        "    c = a * b        # Third operation: multiply results\n",
        "    return c\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "7d7f442b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_simple\n",
        "#| lst-cap: Basic example of reverse mode automatic differentiation\n",
        "#| eval: false\n",
        "\n",
        "def f(x):\n",
        "    a = x * x        # First operation: square x\n",
        "    b = sin(x)       # Second operation: sine of x\n",
        "    c = a * b        # Third operation: multiply results\n",
        "    return c"
      ],
      "id": "05074838",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "In this function shown in @lst-reverse_simple, we have three operations that create a computational chain. Notice how 'x' influences the final result 'c' through two different paths: once through squaring (a = xÂ²) and once through sine (b = sin(x)). We'll need to account for both paths when computing derivatives.\n",
        "\n",
        "First, the forward pass computes and stores values, as illustrated in @lst-reverse_forward.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_forward .callout-important title=\"**Forward Pass**: Computes intermediate values that contribute to the final output through distinct paths.\"}\n",
        "```{.python}\n",
        " x = 2.0             # Our input value\n",
        " a = 4.0             # x * x = 2.0 * 2.0 = 4.0\n",
        " b = 0.909           # sin(2.0) â 0.909\n",
        " c = 3.637           # a * b = 4.0 * 0.909 â 3.637\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "add0e3ea"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_forward\n",
        "#| lst-cap: \"**Forward Pass**: Computes intermediate values that contribute to the final output through distinct paths.\"\n",
        "#| eval: false\n",
        "\n",
        " x = 2.0             # Our input value\n",
        " a = 4.0             # x * x = 2.0 * 2.0 = 4.0\n",
        " b = 0.909           # sin(2.0) â 0.909\n",
        " c = 3.637           # a * b = 4.0 * 0.909 â 3.637"
      ],
      "id": "f519f82c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Then comes the backward pass. This is where reverse mode shows its elegance. This process is demonstrated in @lst-reverse_backward, where we compute the gradient starting from the output.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_backward .callout-important title=\"**Backward Pass**: Computes gradients through multiple paths to update model parameters. This caption directly informs students about the purpose of the backward pass in computing gradients for parameter updates, emphasizing its role in training machine learning models.\"}\n",
        "```{.python}\n",
        "#| eval: false\n",
        "dc/dc = 1.0    # Derivative of output with respect to itself is 1\n",
        "\n",
        "# Moving backward through multiplication c = a * b\n",
        "dc/da = b      # â(a*b)/âa = b = 0.909\n",
        "dc/db = a      # â(a*b)/âb = a = 4.0\n",
        "\n",
        "# Finally, combining derivatives for x through both paths\n",
        "# Path 1: x -> xÂ² -> c    contribution: 2x * dc/da\n",
        "# Path 2: x -> sin(x) -> c contribution: cos(x) * dc/db\n",
        "dc/dx = (2 * x * dc/da) + (cos(x) * dc/db)\n",
        "      = (2 * 2.0 * 0.909) + (cos(2.0) * 4.0)\n",
        "      = 3.636 + (-0.416 * 4.0)\n",
        "      = 2.805\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "b1d1e04f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_backward\n",
        "#| lst-cap: \"**Backward Pass**: Computes gradients through multiple paths to update model parameters. This caption directly informs students about the purpose of the backward pass in computing gradients for parameter updates, emphasizing its role in training machine learning models.\"\n",
        "#| eval: false\n",
        "\n",
        " dc/dc = 1.0    # Derivative of output with respect\n",
        "                # to itself is 1\n",
        "\n",
        " # Moving backward through multiplication c = a * b\n",
        " dc/da = b      # â(a*b)/âa = b = 0.909\n",
        " dc/db = a      # â(a*b)/âb = a = 4.0\n",
        "\n",
        " # Finally, combining derivatives for x through both paths\n",
        " # Path 1: x -> xÂ² -> c    contribution: 2x * dc/da\n",
        " # Path 2: x -> sin(x) -> c contribution: cos(x) * dc/db\n",
        " dc/dx = (2 * x * dc/da) + (cos(x) * dc/db)\n",
        "       = (2 * 2.0 * 0.909) + (cos(2.0) * 4.0)\n",
        "       = 3.636 + (-0.416 * 4.0)\n",
        "       = 2.805"
      ],
      "id": "4aecee1c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The power of reverse mode becomes clear when we consider what would happen if we added more operations that depend on x. Forward mode would need to track derivatives through each new path, but reverse mode efficiently handles all paths in a single backward pass. This is exactly the scenario in neural networks, where each weight can affect the final loss through multiple paths in the network.\n",
        "\n",
        "###### Implementation Structure {#sec-ai-frameworks-implementation-structure-0220}\n",
        "\n",
        "The implementation of reverse mode in machine learning frameworks requires careful orchestration of computation and memory. While forward mode simply augments each computation, reverse mode needs to maintain a record of the forward computation to enable the backward pass. Modern frameworks accomplish this through computational graphs and automatic gradient accumulation.\n",
        "\n",
        "Letâs extend our previous example to a small neural network computation â see @lst-reverse_simple_nn for the code structure.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_simple_nn .callout-important title=\"**Reverse Mode**: Neural networks compute gradients through backward passes on layered computations.\"}\n",
        "```{.python}\n",
        "def simple_network(x, w1, w2):\n",
        "    # Forward pass\n",
        "    hidden = x * w1             # First layer multiplication\n",
        "    activated = max(0, hidden)  # ReLU activation\n",
        "    output = activated * w2     # Second layer multiplication\n",
        "    return output               # Final output (before loss)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "bc5ed72b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_simple_nn\n",
        "#| lst-cap: \"**Reverse Mode**: Neural networks compute gradients through backward passes on layered computations.\"\n",
        "#| eval: false\n",
        "\n",
        "def simple_network(x, w1, w2):\n",
        "    # Forward pass\n",
        "    hidden = x * w1             # First layer multiplication\n",
        "    activated = max(0, hidden)  # ReLU activation\n",
        "    output = activated * w2     # Second layer multiplication\n",
        "    return output               # Final output (before loss)"
      ],
      "id": "15e514f1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "During the forward pass, the framework doesn't just compute values â it builds a graph of operations while tracking intermediate results, as illustrated in @lst-reverse_nn_forward.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_nn_forward .callout-important title=\"**Forward Pass**: Computes intermediate states using linear and non-linear transformations to produce the final output. **Training Pipeline**: Partitions datasets into distinct sets for training, validation, and testing to ensure model robustness and unbiased evaluation.\"}\n",
        "```{.python}\n",
        "x = 1.0\n",
        "w1 = 2.0\n",
        "w2 = 3.0\n",
        "\n",
        "hidden = 2.0        # x * w1 = 1.0 * 2.0\n",
        "activated = 2.0     # max(0, 2.0) = 2.0\n",
        "output = 6.0        # activated * w2 = 2.0 * 3.0\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "cf188f7f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_nn_forward\n",
        "#| lst-cap: \"**Backward Pass**: This code calculates gradients for weights in a neural network, highlighting how changes propagate backward through layers to update parameters.\"\n",
        "#| eval: false\n",
        "\n",
        "x = 1.0\n",
        "w1 = 2.0\n",
        "w2 = 3.0\n",
        "\n",
        "hidden = 2.0        # x * w1 = 1.0 * 2.0\n",
        "activated = 2.0     # max(0, 2.0) = 2.0\n",
        "output = 6.0        # activated * w2 = 2.0 * 3.0"
      ],
      "id": "d12154b8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Refer to @lst-reverse_nn_backward for a step-by-step breakdown of gradient computation during the backward pass.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_nn_backward .callout-important title=\"**Backward Pass**: This code calculates gradients for weights in a neural network, highlighting how changes propagate backward through layers to update parameters.\"}\n",
        "```{.python}\n",
        "d_output = 1.0          # Start with derivative of output\n",
        "\n",
        "d_w2 = activated        # d_output * d(output)/d_w2\n",
        "                        # = 1.0 * 2.0 = 2.0\n",
        "d_activated = w2        # d_output * d(output)/d_activated\n",
        "                        # = 1.0 * 3.0 = 3.0\n",
        "\n",
        "# ReLU gradient: 1 if input was > 0, 0 otherwise\n",
        "d_hidden = d_activated * (1 if hidden > 0 else 0)\n",
        "# 3.0 * 1 = 3.0\n",
        "\n",
        "d_w1 = x * d_hidden    # 1.0 * 3.0 = 3.0\n",
        "d_x = w1 * d_hidden    # 2.0 * 3.0 = 6.0\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "395585eb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_nn_backward\n",
        "#| lst-cap: \"**Backward Pass**: This code calculates gradients for weights in a neural network, highlighting how changes propagate backward through layers to update parameters.\"\n",
        "#| eval: false\n",
        "\n",
        "d_output = 1.0          # Start with derivative of output\n",
        "\n",
        "d_w2 = activated        # d_output * d(output)/d_w2\n",
        "                        # = 1.0 * 2.0 = 2.0\n",
        "d_activated = w2        # d_output * d(output)/d_activated\n",
        "                        # = 1.0 * 3.0 = 3.0\n",
        "\n",
        "# ReLU gradient: 1 if input was > 0, 0 otherwise\n",
        "d_hidden = d_activated * (1 if hidden > 0 else 0)\n",
        "# 3.0 * 1 = 3.0\n",
        "\n",
        "d_w1 = x * d_hidden    # 1.0 * 3.0 = 3.0\n",
        "d_x = w1 * d_hidden    # 2.0 * 3.0 = 6.0"
      ],
      "id": "a2c88812",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This example illustrates several key implementation considerations: 1. The framework must track dependencies between operations 2. Intermediate values must be stored for the backward pass 3. Gradient computations follow the reverse topological order of the forward computation 4. Each operation needs both forward and backward implementations\n",
        "\n",
        "###### Memory Management Strategies {#sec-ai-frameworks-memory-management-strategies-6afa}\n",
        "\n",
        "Memory management represents one of the key challenges in implementing reverse mode differentiation in machine learning frameworks. Unlike forward mode where we can discard intermediate values as we go, reverse mode requires storing results from the forward pass to compute gradients during the backward pass.\n",
        "\n",
        "This requirement is illustrated in @lst-reverse_memory, which extends our neural network example to highlight how intermediate activations must be preserved for use during backpropagation.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-reverse_memory .callout-important title=\"**Reverse Mode Memory Management**: Stores intermediate values for gradient computation during backpropagation.\"}\n",
        "```{.python}\n",
        "def deep_network(x, w1, w2, w3):\n",
        "    # Forward pass - must store intermediates\n",
        "    hidden1 = x * w1\n",
        "    activated1 = max(0, hidden1)   # Store for backward\n",
        "    hidden2 = activated1 * w2\n",
        "    activated2 = max(0, hidden2)   # Store for backward\n",
        "    output = activated2 * w3\n",
        "    return output\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "5fda3bdb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-reverse_memory\n",
        "#| lst-cap: \"**Reverse Mode Memory Management**: Stores intermediate values for gradient computation during backpropagation.\"\n",
        "#| eval: false\n",
        "\n",
        "def deep_network(x, w1, w2, w3):\n",
        "    # Forward pass - must store intermediates\n",
        "    hidden1 = x * w1\n",
        "    activated1 = max(0, hidden1)   # Store for backward\n",
        "    hidden2 = activated1 * w2\n",
        "    activated2 = max(0, hidden2)   # Store for backward\n",
        "    output = activated2 * w3\n",
        "    return output"
      ],
      "id": "6680801e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Each intermediate value needed for gradient computation must be kept in memory until its backward pass completes. As networks grow deeper, this memory requirement grows linearly with network depth. For a typical deep neural network processing a batch of images, this can mean gigabytes of stored activations.\n",
        "\n",
        "Frameworks employ several strategies to manage this memory burden. One such approach is illustrated in @lst-memory_strategies.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-memory_strategies .callout-important title=\"**Memory Management Strategies**: Training involves layered transformations where memory is managed to optimize performance. Checkpointing allows intermediate values to be freed during training, reducing memory usage while maintaining computational integrity via Explanation: The code. This emphasizes the trade-offs between memory management and model complexity in deep learning systems.\"}\n",
        "```{.python}\n",
        "def training_step(model, input_batch):\n",
        "    # Strategy 1: Checkpointing\n",
        "    with checkpoint_scope():\n",
        "        hidden1 = activation(layer1(input_batch))\n",
        "        # Framework might free some memory here\n",
        "        hidden2 = activation(layer2(hidden1))\n",
        "        # More selective memory management\n",
        "        output = layer3(hidden2)\n",
        "\n",
        "    # Strategy 2: Gradient accumulation\n",
        "    loss = compute_loss(output)\n",
        "    # Backward pass with managed memory\n",
        "    loss.backward()\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "850a78ca"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-memory_strategies\n",
        "#| lst-cap: \"**Memory Management Strategies**: Training involves layered transformations where memory is managed to optimize performance. Checkpointing allows intermediate values to be freed during training, reducing memory usage while maintaining computational integrity via Explanation: The code. This emphasizes the trade-offs between memory management and model complexity in deep learning systems.\"\n",
        "#| eval: false\n",
        "\n",
        "def training_step(model, input_batch):\n",
        "    # Strategy 1: Checkpointing\n",
        "    with checkpoint_scope():\n",
        "        hidden1 = activation(layer1(input_batch))\n",
        "        # Framework might free some memory here\n",
        "        hidden2 = activation(layer2(hidden1))\n",
        "        # More selective memory management\n",
        "        output = layer3(hidden2)\n",
        "\n",
        "    # Strategy 2: Gradient accumulation\n",
        "    loss = compute_loss(output)\n",
        "    # Backward pass with managed memory\n",
        "    loss.backward()"
      ],
      "id": "1fffad86",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Modern frameworks automatically balance memory usage and computation speed. They might recompute some intermediate values during the backward pass rather than storing everything, particularly for memory-intensive operations. This trade-off between memory and computation becomes especially important in large-scale training scenarios.\n",
        "\n",
        "###### Optimization Techniques {#sec-ai-frameworks-optimization-techniques-293f}\n",
        "\n",
        "Reverse mode automatic differentiation in machine learning frameworks employs several key optimization techniques to enhance training efficiency. These optimizations become crucial when training large neural networks where computational and memory resources are pushed to their limits.\n",
        "\n",
        "Modern frameworks implement gradient checkpointing, a technique that strategically balances computation and memory. A simplified forward pass of such a network is shown in @lst-deep_forward.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-deep_forward .callout-important title=\"**Forward Pass**: Neural networks process input through sequential layers of transformations to produce an output, highlighting the hierarchical nature of deep learning architectures.\"}\n",
        "```{.python}\n",
        "def deep_network(input_tensor):\n",
        "    # A typical deep network computation\n",
        "    layer1 = large_dense_layer(input_tensor)\n",
        "    activation1 = relu(layer1)\n",
        "    layer2 = large_dense_layer(activation1)\n",
        "    activation2 = relu(layer2)\n",
        "    # ... many more layers\n",
        "    output = final_layer(activation_n)\n",
        "    return output\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "774a81ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-deep_forward\n",
        "#| lst-cap: \"**Forward Pass**: Neural networks process input through sequential layers of transformations to produce an output, highlighting the hierarchical nature of deep learning architectures.\"\n",
        "#| eval: false\n",
        "def deep_network(input_tensor):\n",
        "    # A typical deep network computation\n",
        "    layer1 = large_dense_layer(input_tensor)\n",
        "    activation1 = relu(layer1)\n",
        "    layer2 = large_dense_layer(activation1)\n",
        "    activation2 = relu(layer2)\n",
        "    # ... many more layers\n",
        "    output = final_layer(activation_n)\n",
        "    return output"
      ],
      "id": "96eff19f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Instead of storing all intermediate activations, frameworks can strategically recompute certain values during the backward pass. @lst-checkpoint_scheme demonstrates how frameworks achieve this memory saving. The framework might save activations only every few layers.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-checkpoint_scheme .callout-important title=\"**Checkpointing**: Reduces memory usage by selectively storing intermediate activations during forward passes. Frameworks balance storage needs with computational efficiency to optimize model training.\"}\n",
        "```{.python}\n",
        "# Conceptual representation of checkpointing\n",
        "checkpoint1 = save_for_backward(activation1)\n",
        "# Intermediate activations can be recomputed\n",
        "checkpoint2 = save_for_backward(activation4)\n",
        "# Framework balances storage vs recomputation\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "44dab2e1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-checkpoint_scheme\n",
        "#| lst-cap: \"**Checkpointing**: Reduces memory usage by selectively storing intermediate activations during forward passes. Frameworks balance storage needs with computational efficiency to optimize model training.\"\n",
        "#| eval: false\n",
        "# Conceptual representation of checkpointing\n",
        "checkpoint1 = save_for_backward(activation1)\n",
        "# Intermediate activations can be recomputed\n",
        "checkpoint2 = save_for_backward(activation4)\n",
        "# Framework balances storage vs recomputation"
      ],
      "id": "4c834f70",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Another crucial optimization involves operation fusion. Rather than treating each mathematical operation separately, frameworks combine operations that commonly occur together. Matrix multiplication followed by bias addition, for instance, can be fused into a single operation, reducing memory transfers and improving hardware utilization.\n",
        "\n",
        "The backward pass itself can be optimized by reordering computations to maximize hardware efficiency. Consider the gradient computation for a convolution layer - rather than directly translating the mathematical definition into code, frameworks implement specialized backward operations that take advantage of modern hardware capabilities.\n",
        "\n",
        "These optimizations work together to make the training of large neural networks practical. Without them, many modern architectures would be prohibitively expensive to train, both in terms of memory usage and computation time.\n",
        "\n",
        "#### Integration with Frameworks {#sec-ai-frameworks-integration-frameworks-c866}\n",
        "\n",
        "The integration of automatic differentiation into machine learning frameworks requires careful system design to balance flexibility, performance, and usability. Modern frameworks like PyTorch and TensorFlow expose AD capabilities through high-level APIs while maintaining the sophisticated underlying machinery.\n",
        "\n",
        "Let's examine how frameworks present AD to users.  A typical example from PyTorch is shown in @lst-ad_interface.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-ad_interface .callout-important title=\"**Automatic Differentiation Interface**: PyTorch transparently tracks operations during neural network execution to enable efficient backpropagation. Training requires careful management of gradients and model parameters, highlighting the importance of automatic differentiation in achieving optimal performance.\"}\n",
        "```{.python}\n",
        "# PyTorch-style automatic differentiation\n",
        "def neural_network(x):\n",
        "    # Framework transparently tracks operations\n",
        "    layer1 = nn.Linear(784, 256)\n",
        "    layer2 = nn.Linear(256, 10)\n",
        "\n",
        "    # Each operation is automatically tracked\n",
        "    hidden = torch.relu(layer1(x))\n",
        "    output = layer2(hidden)\n",
        "    return output\n",
        "\n",
        "# Training loop showing AD integration\n",
        "for batch_x, batch_y in data_loader:\n",
        "    optimizer.zero_grad()    # Clear previous gradients\n",
        "    output = neural_network(batch_x)\n",
        "    loss = loss_function(output, batch_y)\n",
        "\n",
        "    # Framework handles all AD machinery\n",
        "    loss.backward()         # Automatic backward pass\n",
        "    optimizer.step()        # Parameter updates\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "c201a116"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-ad_interface\n",
        "#| lst-cap: \"**Automatic Differentiation Interface**: PyTorch transparently tracks operations during neural network execution to enable efficient backpropagation. Training requires careful management of gradients and model parameters, highlighting the importance of automatic differentiation in achieving optimal performance.\"\n",
        "#| eval: false\n",
        "\n",
        "# PyTorch-style automatic differentiation\n",
        "def neural_network(x):\n",
        "    # Framework transparently tracks operations\n",
        "    layer1 = nn.Linear(784, 256)\n",
        "    layer2 = nn.Linear(256, 10)\n",
        "\n",
        "    # Each operation is automatically tracked\n",
        "    hidden = torch.relu(layer1(x))\n",
        "    output = layer2(hidden)\n",
        "    return output\n",
        "\n",
        "# Training loop showing AD integration\n",
        "for batch_x, batch_y in data_loader:\n",
        "    optimizer.zero_grad()    # Clear previous gradients\n",
        "    output = neural_network(batch_x)\n",
        "    loss = loss_function(output, batch_y)\n",
        "\n",
        "    # Framework handles all AD machinery\n",
        "    loss.backward()         # Automatic backward pass\n",
        "    optimizer.step()        # Parameter updates"
      ],
      "id": "9cdc2110",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "While this code appears straightforward, it masks considerable complexity. The framework must:\n",
        "\n",
        "1. Track all operations during the forward pass\n",
        "2. Build and maintain the computational graph\n",
        "3. Manage memory for intermediate values\n",
        "4. Schedule gradient computations efficiently\n",
        "5. Interface with hardware accelerators\n",
        "\n",
        "This integration extends beyond basic training. Frameworks must handle complex scenarios like higher-order gradients, where we compute derivatives of derivatives, and mixed-precision training. The ability to compute second-order derivatives is demonstrated in @lst-higher_order.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-higher_order .callout-important title=\"**Higher-Order Gradients**: Second-order gradients reveal how changes in model parameters affect first-order gradients, essential for advanced optimization techniques.\"}\n",
        "```{.python}\n",
        "# Computing higher-order gradients\n",
        "with torch.set_grad_enabled(True):\n",
        "  # First-order gradient computation\n",
        "  output = model(input)\n",
        "  grad_output = torch.autograd.grad(\n",
        "       output,\n",
        "       model.parameters())\n",
        "\n",
        "  # Second-order gradient computation\n",
        "  grad2_output = torch.autograd.grad(\n",
        "       grad_output,\n",
        "       model.parameters())\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "e7c87333"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-higher_order\n",
        "#| lst-cap: \"**Higher-Order Gradients**: Second-order gradients reveal how changes in model parameters affect first-order gradients, essential for advanced optimization techniques.\"\n",
        "#| eval: false\n",
        "# Computing higher-order gradients\n",
        "with torch.set_grad_enabled(True):\n",
        "  # First-order gradient computation\n",
        "  output = model(input)\n",
        "  grad_output = torch.autograd.grad(\n",
        "       output,\n",
        "       model.parameters())\n",
        "\n",
        "  # Second-order gradient computation\n",
        "  grad2_output = torch.autograd.grad(\n",
        "       grad_output,\n",
        "       model.parameters())"
      ],
      "id": "050c20b7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "#### Memory Consequences {#sec-ai-frameworks-memory-consequences-1858}\n",
        "\n",
        "The memory demands of automatic differentiation stem from a fundamental requirement: to compute gradients during the backward pass, we must remember what happened during the forward pass. This seemingly simple requirement creates interesting challenges for machine learning frameworks. Unlike traditional programs that can discard intermediate results as soon as they're used, AD systems must carefully preserve computational history.\n",
        "\n",
        "This necessity is illustrated in @lst-forward_trace, which shows what happens during a neural networkâs forward pass.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-forward_trace .callout-important title=\"**Forward Pass**: Neural networks compute values sequentially, storing intermediate results for backpropagation to calculate gradients accurately.\"}\n",
        "```{.python}\n",
        "def neural_network(x):\n",
        "    # Each operation creates values we need to remember\n",
        "    a = layer1(x)      # Must store for backward pass\n",
        "    b = relu(a)        # Must store input to relu\n",
        "    c = layer2(b)      # Must store for backward pass\n",
        "    return c\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "3927fd4a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-forward_trace\n",
        "#| lst-cap: \"**Forward Pass**: Neural networks compute values sequentially, storing intermediate results for backpropagation to calculate gradients accurately.\"\n",
        "#| eval: false\n",
        "def neural_network(x):\n",
        "    # Each operation creates values we need to remember\n",
        "    a = layer1(x)      # Must store for backward pass\n",
        "    b = relu(a)        # Must store input to relu\n",
        "    c = layer2(b)      # Must store for backward pass\n",
        "    return c"
      ],
      "id": "a8b9587a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "When this network processes data, each operation creates not just its output, but also a memory obligation. The multiplication in layer1 needs to remember its inputs because computing its gradient later will require them. Even the seemingly simple relu function must track which inputs were negative to correctly propagate gradients. As networks grow deeper, these memory requirements accumulate â as seen in @lst-deep_memory.\n",
        "\n",
        "This memory challenge becomes particularly interesting with deep neural networks.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-deep_memory .callout-important title=\"**Memory Accumulation**: Each layer in a deep neural network retains information needed for backpropagation, highlighting the growing memory demands as networks deepen.\"}\n",
        "```{.python}\n",
        "# A deeper network shows the accumulating memory needs\n",
        "hidden1 = large_matrix_multiply(input, weights1)\n",
        "activated1 = relu(hidden1)\n",
        "hidden2 = large_matrix_multiply(activated1, weights2)\n",
        "activated2 = relu(hidden2)\n",
        "output = large_matrix_multiply(activated2, weights3)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "a2711d46"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-deep_memory\n",
        "#| lst-cap: \"**Memory Accumulation**: Each layer in a deep neural network retains information needed for backpropagation, highlighting the growing memory demands as networks deepen.\"\n",
        "#| eval: false\n",
        "# A deeper network shows the accumulating memory needs\n",
        "hidden1 = large_matrix_multiply(input, weights1)\n",
        "activated1 = relu(hidden1)\n",
        "hidden2 = large_matrix_multiply(activated1, weights2)\n",
        "activated2 = relu(hidden2)\n",
        "output = large_matrix_multiply(activated2, weights3)"
      ],
      "id": "26c0431e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Each layer's computation adds to our memory burden. The framework must keep hidden1 in memory until we've computed gradients through hidden2, but after that, we can safely discard it. This creates a wave of memory usage that peaks when we start the backward pass and gradually recedes as we compute gradients.\n",
        "\n",
        "Modern frameworks handle this memory choreography automatically. They track the lifetime of each intermediate value - how long it must remain in memory for gradient computation. When training large models, this careful memory management becomes as crucial as the numerical computations themselves. The framework frees memory as soon as it's no longer needed for gradient computation, ensuring that our memory usage, while necessarily large, remains as efficient as possible.\n",
        "\n",
        "#### System Considerations {#sec-ai-frameworks-system-considerations-5ef6}\n",
        "\n",
        "Automatic differentiation's integration into machine learning frameworks raises important system-level considerations that affect both framework design and training performance. These considerations become particularly apparent when training large neural networks where efficiency at every level matters.\n",
        "\n",
        "As illustrated in @lst-train_loop, a typical training loop handles both computation and system-level interaction.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-train_loop .callout-important title=\"**Training Pipeline**: Machine learning workflows partition datasets into training, validation, and test sets to ensure robust model development and unbiased evaluation.\"}\n",
        "```{.python}\n",
        "def train_epoch(model, data_loader):\n",
        "    for batch_x, batch_y in data_loader:\n",
        "        # Moving data between CPU and accelerator\n",
        "        batch_x = batch_x.to(device)\n",
        "        batch_y = batch_y.to(device)\n",
        "\n",
        "        # Forward pass builds computational graph\n",
        "        outputs = model(batch_x)\n",
        "        loss = criterion(outputs, batch_y)\n",
        "\n",
        "        # Backward pass computes gradients\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        optimizer.zero_grad()\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "ff2fae06"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-train_loop\n",
        "#| lst-cap: \"**Training Pipeline**: Machine learning workflows partition datasets into training, validation, and test sets to ensure robust model development and unbiased evaluation.\"\n",
        "#| eval: false\n",
        "def train_epoch(model, data_loader):\n",
        "    for batch_x, batch_y in data_loader:\n",
        "        # Moving data between CPU and accelerator\n",
        "        batch_x = batch_x.to(device)\n",
        "        batch_y = batch_y.to(device)\n",
        "\n",
        "        # Forward pass builds computational graph\n",
        "        outputs = model(batch_x)\n",
        "        loss = criterion(outputs, batch_y)\n",
        "\n",
        "        # Backward pass computes gradients\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        optimizer.zero_grad()"
      ],
      "id": "c15b0eac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This simple loop masks complex system interactions. The AD system must coordinate with multiple framework components: the memory allocator, the device manager, the operation scheduler, and the optimizer. Each gradient computation potentially triggers data movement between devices, memory allocation, and kernel launches on accelerators.\n",
        "\n",
        "The scheduling of AD operations on modern hardware accelerators is illustrated in @lst-parallel_ad.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-parallel_ad .callout-important title=\"**Parallel Computation**: Operations can run concurrently in a neural network, illustrating the need for synchronization to combine results effectively. Via The code\"}\n",
        "```{.python}\n",
        "def parallel_network(x):\n",
        "    # These operations could run concurrently\n",
        "    branch1 = conv_layer1(x)\n",
        "    branch2 = conv_layer2(x)\n",
        "\n",
        "    # Must synchronize for combination\n",
        "    combined = branch1 + branch2\n",
        "    return final_layer(combined)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "3d49d336"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-parallel_ad\n",
        "#| lst-cap: \"**Parallel Computation**: Operations can run concurrently in a neural network, illustrating the need for synchronization to combine results effectively. Via The code\"\n",
        "#| eval: false\n",
        "def parallel_network(x):\n",
        "    # These operations could run concurrently\n",
        "    branch1 = conv_layer1(x)\n",
        "    branch2 = conv_layer2(x)\n",
        "\n",
        "    # Must synchronize for combination\n",
        "    combined = branch1 + branch2\n",
        "    return final_layer(combined)"
      ],
      "id": "0a7bcbac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The AD system must track dependencies not just for correct gradient computation, but also for efficient hardware utilization. It needs to determine which gradient computations can run in parallel and which must wait for others to complete. This dependency tracking extends across both forward and backward passes, creating a complex scheduling problem.\n",
        "\n",
        "Modern frameworks handle these system-level concerns while maintaining a simple interface for users. Behind the scenes, they make sophisticated decisions about operation scheduling, memory allocation, and data movement, all while ensuring correct gradient computation through the computational graph.\n",
        "\n",
        "#### Summary {#sec-ai-frameworks-summary-1266}\n",
        "\n",
        "Automatic differentiation systems represent an important computational abstraction in machine learning frameworks, transforming the mathematical concept of derivatives into efficient implementations. Through our examination of both forward and reverse modes, we've seen how frameworks balance mathematical precision with computational efficiency to enable training of modern neural networks.\n",
        "\n",
        "The implementation of AD systems reveals key design patterns in machine learning frameworks. One such pattern is shown in @lst-ad_mechanics.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-ad_mechanics .callout-important title=\"**AD Mechanism**: Frameworks track operations for efficient backward passes during training through The code. This example emphasizes the importance of tracking intermediate computations to enable effective gradient calculations, a core aspect of automatic differentiation in machine learning systems.\"}\n",
        "```{.python}\n",
        "def computation(x, w):\n",
        "    # Framework tracks operations\n",
        "    hidden = x * w     # Stored for backward pass\n",
        "    output = relu(hidden)  # Tracks activation pattern\n",
        "    return output\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "46ac86a6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-ad_mechanics\n",
        "#| lst-cap: \"**AD Mechanism**: Frameworks track operations for efficient backward passes during training through The code. This example emphasizes the importance of tracking intermediate computations to enable effective gradient calculations, a core aspect of automatic differentiation in machine learning systems.\"\n",
        "#| eval: false\n",
        "\n",
        "def computation(x, w):\n",
        "    # Framework tracks operations\n",
        "    hidden = x * w     # Stored for backward pass\n",
        "    output = relu(hidden)  # Tracks activation pattern\n",
        "    return output"
      ],
      "id": "b31fdcba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This simple computation embodies several fundamental concepts:\n",
        "\n",
        "1.  Operation tracking for derivative computation\n",
        "2.  Memory management for intermediate values\n",
        "3.  System coordination for efficient execution\n",
        "\n",
        "As shown in @lst-ad_abstraction, modern frameworks abstract these complexities behind clean interfaces while maintaining high performance.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-ad_abstraction .callout-important title=\"**Minimal API**: Simplifies automatic differentiation by tracking forward computations and efficiently computing gradients, enabling effective model optimization.\"}\n",
        "```{.python}\n",
        "loss = model(input)  # Forward pass tracks computation\n",
        "loss.backward()      # Triggers efficient reverse mode AD\n",
        "optimizer.step()     # Uses computed gradients\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "98e2ae3e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-ad_abstraction\n",
        "#| lst-cap: \"**Minimal API**: Simplifies automatic differentiation by tracking forward computations and efficiently computing gradients, enabling effective model optimization.\"\n",
        "#| eval: false\n",
        "loss = model(input)  # Forward pass tracks computation\n",
        "loss.backward()      # Triggers efficient reverse mode AD\n",
        "optimizer.step()     # Uses computed gradients"
      ],
      "id": "c43d8bfe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The effectiveness of automatic differentiation systems stems from their careful balance of competing demands. They must maintain sufficient computational history for accurate gradients while managing memory constraints, schedule operations efficiently while preserving correctness, and provide flexibility while optimizing performance.\n",
        "\n",
        "Understanding these systems proves essential for both framework developers and practitioners. Framework developers must implement efficient AD to enable modern deep learning, while practitioners benefit from understanding AD's capabilities and constraints when designing and training models.\n",
        "\n",
        "While automatic differentiation provides the computational foundation for gradient-based learning, its practical implementation depends heavily on how frameworks organize and manipulate data. This brings us to our next topic: the data structures that enable efficient computation and memory management in machine learning frameworks. These structures must not only support AD operations but also provide efficient access patterns for the diverse hardware platforms that power modern machine learning.\n",
        "\n",
        "##### Looking Forward {#sec-ai-frameworks-looking-forward-bba2}\n",
        "\n",
        "The automatic differentiation systems we've explored provide the computational foundation for neural network training, but they don't operate in isolation. These systems need efficient ways to represent and manipulate the data flowing through them. This brings us to our next topic: the data structures that machine learning frameworks use to organize and process information.\n",
        "\n",
        "Consider  how our earlier examples handled numerical values (@lst-numeric_interpretation).\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-numeric_interpretation .callout-important title=\"**Layered Transformations**: Neural networks compute outputs through sequential operations on input data, illustrating how weights and activation functions influence final predictions. Numerical values are processed in neural network computations, highlighting the role of weight multiplications and activation functions. Via **Data Flow**: The code\"}\n",
        "```{.python}\n",
        "def neural_network(x):\n",
        "    hidden = w1 * x     # What exactly is x?\n",
        "    activated = relu(hidden)  # How is hidden stored?\n",
        "    output = w2 * activated  # What type of multiplication?\n",
        "    return output\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "b6d21fbb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-numeric_interpretation\n",
        "#| lst-cap: \"**Layered Transformations**: Neural networks compute outputs through sequential operations on input data, illustrating how weights and activation functions influence final predictions. Numerical values are processed in neural network computations, highlighting the role of weight multiplications and activation functions. Via **Data Flow**: The code\"\n",
        "#| eval: false\n",
        "def neural_network(x):\n",
        "    hidden = w1 * x     # What exactly is x?\n",
        "    activated = relu(hidden)  # How is hidden stored?\n",
        "    output = w2 * activated  # What type of multiplication?\n",
        "    return output"
      ],
      "id": "96b46035",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "These operations appear straightforward, but they raise important questions. How do frameworks represent these values? How do they organize data to enable efficient computation and automatic differentiation? Most importantly, how do they structure data to take advantage of modern hardware?\n",
        "\n",
        "The next section examines how frameworks answer these questions through specialized data structures, particularly tensors, that form the basic building blocks of machine learning computations.\n",
        "\n",
        "### Data Structures {#sec-ai-frameworks-data-structures-2b06}\n",
        "\n",
        "Machine learning frameworks extend computational graphs with specialized data structures, bridging high-level computations with practical implementations. These data structures have two essential purposes: they provide containers for the numerical data that powers machine learning models, and they manage how this data is stored and moved across different memory spaces and devices.\n",
        "\n",
        "While computational graphs specify the logical flow of operations, data structures determine how these operations actually access and manipulate data in memory. This dual role of organizing numerical data for model computations while handling the complexities of memory management and device placement shapes how frameworks translate mathematical operations into efficient executions across diverse computing platforms.\n",
        "\n",
        "The effectiveness of machine learning frameworks depends heavily on their underlying data organization. While machine learning theory can be expressed through mathematical equations, turning these equations into practical implementations demands thoughtful consideration of data organization, storage, and manipulation. Modern machine learning models must process enormous amounts of data during training and inference, making efficient data access and memory usage critical across diverse hardware platforms.\n",
        "\n",
        "A framework's data structures must excel in three key areas. First, they need to deliver high performance, supporting rapid data access and efficient memory use across different hardware. This includes optimizing memory layouts for cache efficiency and enabling smooth data transfer between memory hierarchies and devices. Second, they must offer flexibility, accommodating various model architectures and training approaches while supporting different data types and precision requirements. Third, they should provide clear and intuitive interfaces to developers while handling complex memory management and device placement behind the scenes.\n",
        "\n",
        "These data structures bridge mathematical concepts and practical computing systems. The operations in machine learning, such as matrix multiplication, convolution, and activation functions, set basic requirements for how data must be organized. These structures must maintain numerical precision and stability while enabling efficient implementation of common operations and automatic gradient computation. However, they must also work within real-world computing constraints, dealing with limited memory bandwidth, varying hardware capabilities, and the needs of distributed computing.\n",
        "\n",
        "The design choices made in implementing these data structures significantly influence what machine learning frameworks can achieve. Poor decisions in data structure design can result in excessive memory use, limiting model size and batch capabilities. They might create performance bottlenecks that slow down training and inference, or produce interfaces that make programming error-prone. On the other hand, thoughtful design enables automatic optimization of memory usage and computation, efficient scaling across hardware configurations, and intuitive programming interfaces that support rapid implementation of new techniques.\n",
        "\n",
        "As we explore specific data structures in the following sections, we'll examine how frameworks address these challenges through careful design decisions and optimization approaches. This understanding proves essential for anyone working with machine learning systems, whether developing new models, optimizing existing ones, or creating new framework capabilities. We begin with tensor abstractions, the fundamental building blocks of modern machine learning frameworks, before exploring more specialized structures for parameter management, dataset handling, and execution control.\n",
        "\n",
        "#### Tensors {#sec-ai-frameworks-tensors-d78e}\n",
        "\n",
        "Machine learning frameworks process and store numerical data as tensors. Every computation in a neural network, from processing input data to updating model weights, operates on tensors. Training batches of images, activation maps in convolutional networks, and parameter gradients during backpropagation all take the form of tensors. This unified representation allows frameworks to implement consistent interfaces for data manipulation and optimize operations across different hardware architectures.\n",
        "\n",
        "##### Structure and Dimensionality {#sec-ai-frameworks-structure-dimensionality-3050}\n",
        "\n",
        "A tensor is a mathematical object that generalizes scalars, vectors, and matrices to higher dimensions. The dimensionality forms a natural hierarchy: a scalar is a zero-dimensional tensor containing a single value, a vector is a one-dimensional tensor containing a sequence of values, and a matrix is a two-dimensional tensor containing values arranged in rows and columns. Higher-dimensional tensors extend this pattern through nested structures; for instance, as illustrated in @fig-tensor-data-structure-a, a three-dimensional tensor can be visualized as a stack of matrices. Therefore, vectors and matrices can be considered special cases of tensors with 1D and 2D dimensions, respectively.\n",
        "\n",
        "::: {#fig-tensor-data-structure-a fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\scalebox{0.8}{%\n",
        "\\begin{tikzpicture}[font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\begin{scope}\n",
        "\\pgfmathsetmacro{\\cubex}{2.5}\n",
        "\\pgfmathsetmacro{\\cubey}{2.5}\n",
        "\\pgfmathsetmacro{\\cubez}{2.5}\n",
        "\\draw[BrownLine,fill=BrownL!40] (0,0,0) -- ++(-\\cubex,0,0) -- ++(0,-\\cubey,0) -- ++(\\cubex,0,0) -- cycle;\n",
        "\\draw[BrownLine,fill=BrownL] (0,0,0) -- ++(0,0,-\\cubez)coordinate(G) -- ++(0,-\\cubey,0) -- ++(0,0,\\cubez) -- cycle;\n",
        "\\draw[BrownLine,fill=BrownL!70] (0,0,0) -- ++(-\\cubex,0,0) -- ++(0,0,-\\cubez) -- ++(\\cubex,0,0) -- cycle;\n",
        "\\path[red] (-\\cubex,-\\cubey,0)coordinate(A) -- (0,-\\cubey,0)coordinate(B);\n",
        "\\node[below=0.3of $(A)!0.5!(B)$]{Rank 3};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[shift={(-5.5,-0.77)}]\n",
        "\\node[draw=BrownLine,fill=BrownL!40,rectangle,%anchor=north west,\n",
        "minimum width=98,minimum height=98](R){};\n",
        "\\node[right=2pt of $(R.north west)!0.1!(R.south west)$]{1 \\ldots ~2};\n",
        "\\node[right=2pt of $(R.north west)!0.24!(R.south west)$]{3 \\ldots  ~5};\n",
        "\\node[right=2pt of $(R.north west)!0.39!(R.south west)$]{5 \\phantom{\\ldots}  3};\n",
        "\\node[right=2pt of $(R.north west)!0.58!(R.south west)$]{$\\vdots$ \\phantom{\\ldots~} $\\vdots$};\n",
        "\\node[right=2pt of $(R.north west)!0.9!(R.south west)$]{3 \\phantom{\\ldots} 3};\n",
        "\\node[below=0.3of $(R.south west)!0.5!(R.south east)$]{Rank 2};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[shift={(-8.75,-0.77)}]\n",
        "\\node[draw=BrownLine,fill=BrownL!40,rectangle,%anchor=north west,\n",
        "minimum width=18,minimum height=98](R){};\n",
        "\\node[right=2pt of $(R.north west)!0.1!(R.south west)$]{1};\n",
        "\\node[right=2pt of $(R.north west)!0.24!(R.south west)$]{3};\n",
        "\\node[right=2pt of $(R.north west)!0.39!(R.south west)$]{5};\n",
        "\\node[right=2pt of $(R.north west)!0.58!(R.south west)$]{$\\vdots$};\n",
        "\\node[right=2pt of $(R.north west)!0.9!(R.south west)$]{3};\n",
        "\\node[below=0.3of $(R.south west)!0.5!(R.south east)$](R1){Rank 1};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[shift={(-10.5,-0.77)}]\n",
        "\\node[draw=BrownLine,fill=BrownL!40,rectangle,%anchor=north west,\n",
        "minimum width=18,minimum height=18](3R){0};\n",
        "\\end{scope}\n",
        "\\path[red](R1)-|coordinate(P)(3R);\n",
        "\\node[]at(P){Rank 0};\n",
        "\\end{tikzpicture}}\n",
        "```\n",
        "**Three-Dimensional Tensor**: Higher-rank tensors extend the concepts of scalars, vectors, and matrices by arranging data in nested structures; this figure represents a three-dimensional tensor as a stack of matrices, enabling representation of complex, multi-dimensional data relationships. Tensors with rank greater than two are fundamental to representing data in areas like image processing and natural language processing, where data possesses inherent multi-dimensional structure.\n",
        ":::\n",
        "\n",
        "In practical applications, tensors naturally arise when dealing with complex data structures. As illustrated in @fig-tensor-data-structure-b, image data exemplifies this concept particularly well. Color images comprise three channels, where each channel represents the intensity values of red, green, or blue as a distinct matrix. These channels combine to create the full colored image, forming a natural 3D tensor structure. When processing multiple images simultaneously, such as in batch operations, a fourth dimension can be added to create a 4D tensor, where each slice represents a complete three-channel image. This hierarchical organization demonstrates how tensors efficiently handle multidimensional data while maintaining clear structural relationships.\n",
        "\n",
        "::: {#fig-tensor-data-structure-b fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\scalebox{0.7}{%\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\Large]\n",
        "%\n",
        "\\tikzset{\n",
        "    Line/.style={line width=1.0pt,black!70,font=\\usefont{T1}{phv}{m}{n}\\footnotesize\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=4pt,\n",
        "    node distance=0,\n",
        "    draw=white,\n",
        "    line width=0.75pt,\n",
        "    fill=red!80,\n",
        "    minimum width=10mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "}\n",
        "\\node[Box](B1){\\textbf{6}};\n",
        "\\node[Box,right=of B1](B2){\\textbf{2}};\n",
        "\\node[Box,right=of B2](B3){\\textbf{5}};\n",
        "\\node[Box,below=of B1](B4){\\textbf{32}};\n",
        "\\node[Box,right=of B4](B5){\\textbf{15}};\n",
        "\\node[Box,right=of B5](B6){\\textbf{4}};\n",
        "\\node[Box,below=of B4](B7){\\textbf{1}};\n",
        "\\node[Box,right=of B7](B8){\\textbf{8}};\n",
        "\\node[Box,right=of B8](B9){\\textbf{3}};\n",
        "%%\n",
        "\\node[Box,fill= OliveLine, draw= white,above=of B2](2B1){\\textbf{8}};\n",
        "\\node[Box,fill= OliveLine, draw= white,right=of 2B1](2B2){\\textbf{7}};\n",
        "\\node[Box,fill= OliveLine, draw= white,right=of 2B2](2B3){\\textbf{5}};\n",
        "\\node[Box,fill= OliveLine, draw= white,below=of 2B3](2B4){\\textbf{1}};\n",
        "\\node[Box,fill= OliveLine, draw= white,below=of 2B4](2B5){\\textbf{2}};\n",
        "%%\n",
        "\\node[Box,fill= BlueLine!80, draw= white,above=of 2B2](3B1){\\textbf{2}};\n",
        "\\node[Box,fill= BlueLine!80, draw= white,right=of 3B1](3B2){\\textbf{1}};\n",
        "\\node[Box,fill= BlueLine!80, draw= white,right=of 3B2](3B3){\\textbf{9}};\n",
        "\\node[Box,fill= BlueLine!80, draw= white,below=of 3B3](3B4){\\textbf{4}};\n",
        "\\node[Box,fill= BlueLine!80, draw= white,below=of 3B4](3B5){\\textbf{3}};\n",
        "%\n",
        "\\draw[dashed,Line,latex-latex]([yshift=-3mm]B7.south west)--\n",
        "            node[below=1mm]{Width: 3 Pixel}([yshift=-3mm]B9.south east);\n",
        "\\draw[dashed,Line,latex-latex]([xshift=-4mm]B7.south west)--\n",
        "            node[left]{Height: 3 Pixel}([xshift=-4mm]B1.north west);\n",
        "\\draw[dashed,Line,latex-latex,shorten <=2mm]([xshift=-4mm]B1.north west)--\n",
        "            node[left=3mm,pos=0.6]{3 Color Channels}([xshift=-4mm]3B1.north west);\n",
        "\\end{tikzpicture}}\n",
        "```\n",
        "**Multidimensional Data Representation**: Images naturally mAP to tensors with dimensions representing image height, width, and color channels, forming a three-dimensional array; stacking multiple images creates a fourth dimension for batch processing and efficient computation. *credit: niklas lang [HTTPS://towardsdatascience.com/what-are-tensors-in-machine-learning-5671814646ff](HTTPS://towardsdatascience.com/what-are-tensors-in-machine-learning-5671814646ff)*.\n",
        ":::\n",
        "\n",
        "In machine learning frameworks, tensors take on additional properties beyond their mathematical definition to meet the demands of modern ML systems. While mathematical tensors provide a foundation as multi-dimensional arrays with transformation properties, machine learning introduces requirements for practical computation. These requirements shape how frameworks balance mathematical precision with computational performance.\n",
        "\n",
        "Framework tensors combine numerical data arrays with computational metadata. The dimensional structure, or shape, ranges from simple vectors and matrices to higher-dimensional arrays that represent complex data like image batches or sequence models. This dimensional information plays a critical role in operation validation and optimization. Matrix multiplication operations, for example, depend on shape metadata to verify dimensional compatibility and determine optimal computation paths.\n",
        "\n",
        "Memory layout implementation introduces distinct challenges in tensor design. While tensors provide an abstraction of multi-dimensional data, physical computer memory remains linear. Stride patterns address this disparity by creating mappings between multi-dimensional tensor indices and linear memory addresses. These patterns significantly impact computational performance by determining memory access patterns during tensor operations. Careful alignment of stride patterns with hardware memory hierarchies maximizes cache efficiency and memory throughput.\n",
        "\n",
        "##### Type Systems and Precision {#sec-ai-frameworks-type-systems-precision-72aa}\n",
        "\n",
        "Tensor implementations use type systems to control numerical precision and memory consumption. The standard choice in machine learning has been 32-bit floating-point numbers (`float32`), offering a balance of precision and efficiency. Modern frameworks extend this with multiple numeric types for different needs. Integer types support indexing and embedding operations. Reduced-precision types like 16-bit floating-point numbers enable efficient mobile deployment. 8-bit integers allow fast inference on specialized hardware.\n",
        "\n",
        "The choice of numeric type affects both model behavior and computational efficiency. Neural network training typically requires float32 precision to maintain stable gradient computations. Inference tasks can often use lower precision (`int8` or even `int4`), reducing memory usage and increasing processing speed. Mixed-precision training[^fn-frameworks-8] approaches combine these benefits by using float32 for critical accumulations while performing most computations at lower precision.\n",
        "\n",
        "[^fn-frameworks-8]: **Mixed-precision training**: A training approach that uses lower-precision arithmetic for most calculations while retaining higher-precision for critical operations, balancing performance and numerical stability.\n",
        "\n",
        "Type conversions between different numeric representations require careful management. Operating on tensors with different types demands explicit conversion rules to preserve numerical correctness. These conversions introduce computational costs and risk precision loss. Frameworks provide type casting capabilities but rely on developers to maintain numerical precision across operations.\n",
        "\n",
        "##### Device Placement and Memory Management {#sec-ai-frameworks-device-placement-memory-management-b50f}\n",
        "\n",
        "The rise of heterogeneous computing has transformed how machine learning frameworks manage tensor operations. Modern frameworks must seamlessly operate across CPUs, GPUs, TPUs, and various other accelerators, each offering different computational advantages and memory characteristics. This diversity creates a fundamental challenge: tensors must move efficiently between devices while maintaining computational coherency throughout the execution of machine learning workloads.\n",
        "\n",
        "Device placement decisions significantly influence both computational performance and memory utilization. Moving tensors between devices introduces latency costs and consumes precious bandwidth on system interconnects. Keeping multiple copies of tensors across different devices can accelerate computation by reducing data movement, but this strategy increases overall memory consumption and requires careful management of consistency between copies. Frameworks must therefore implement sophisticated memory management systems that track tensor locations and orchestrate data movement while considering these tradeoffs.\n",
        "\n",
        "These memory management systems maintain a dynamic view of available device memory and implement strategies for efficient data transfer. When operations require tensors that reside on different devices, the framework must either move data or redistribute computation. This decision process integrates deeply with the framework's computational graph execution and operation scheduling. Memory pressure on individual devices, data transfer costs, and computational load all factor into placement decisions.\n",
        "\n",
        "The interplay between device placement and memory management extends beyond simple data movement. Frameworks must anticipate future computational needs to prefetch data efficiently, manage memory fragmentation across devices, and handle cases where memory demands exceed device capabilities. This requires close coordination between the memory management system and the operation scheduler, especially in scenarios involving parallel computation across multiple devices or distributed training across machine boundaries.\n",
        "\n",
        "#### Specialized Structures {#sec-ai-frameworks-specialized-structures-b84b}\n",
        "\n",
        "While tensors are the building blocks of machine learning frameworks, they are not the only structures required for effective system operation. Frameworks rely on a suite of specialized data structures tailored to address the distinct needs of data processing, model parameter management, and execution coordination. These structures ensure that the entire workflow, ranging from raw data ingestion to optimized execution on hardware, proceeds seamlessly and efficiently.\n",
        "\n",
        "##### Dataset Structures {#sec-ai-frameworks-dataset-structures-a8ed}\n",
        "\n",
        "Dataset structures handle the critical task of transforming raw input data into a format suitable for machine learning computations. These structures bridge the gap between diverse data sources and the tensor abstractions required by models, automating the process of reading, parsing, and preprocessing data.\n",
        "\n",
        "Dataset structures must support efficient memory usage while dealing with input data far larger than what can fit into memory at once. For example, when training on large image datasets, these structures load images from disk, decode them into tensor-compatible formats, and apply transformations like normalization or augmentation in real time. Frameworks implement mechanisms such as data streaming, caching, and shuffling to ensure a steady supply of preprocessed batches without bottlenecks.\n",
        "\n",
        "The design of dataset structures directly impacts training performance. Poorly designed structures can create significant overhead, limiting data throughput to GPUs or other accelerators. In contrast, well-optimized dataset handling can leverage parallelism across CPU cores, disk I/O, and memory transfers to feed accelerators at full capacity.\n",
        "\n",
        "In large, multi-system distributed training scenarios, dataset structures also handle coordination between nodes, ensuring that each worker processes a distinct subset of data while maintaining consistency in operations like shuffling. This coordination prevents redundant computation and supports scalability across multiple devices and machines.\n",
        "\n",
        "##### Parameter Structures {#sec-ai-frameworks-parameter-structures-7b66}\n",
        "\n",
        "Parameter structures store the numerical values that define a machine learning model. These include the weights and biases of neural network layers, along with auxiliary data such as batch normalization statistics and optimizer state. Unlike datasets, which are transient, parameters persist throughout the lifecycle of model training and inference.\n",
        "\n",
        "The design of parameter structures must balance efficient storage with rapid access during computation. For example, convolutional neural networks require parameters for filters, fully connected layers, and normalization layers, each with unique shapes and memory alignment requirements. Frameworks organize these parameters into compact representations that minimize memory consumption while enabling fast read and write operations.\n",
        "\n",
        "A key challenge for parameter structures is managing memory efficiently across multiple devices [@li2014communication]. During distributed training, frameworks may replicate parameters across GPUs for parallel computation while keeping a synchronized master copy on the CPU. This strategy ensures consistency while reducing the latency of gradient updates. Additionally, parameter structures often leverage memory sharing techniques to minimize duplication, such as storing gradients and optimizer states in place to conserve memory.\n",
        "\n",
        "Parameter structures must also adapt to various precision requirements. While training typically uses 32-bit floating-point precision for stability, reduced precision such as 16-bit floating-point or even 8-bit integers is increasingly used for inference and large-scale training. Frameworks implement type casting and mixed-precision management to enable these optimizations without compromising numerical accuracy.\n",
        "\n",
        "##### Execution Structures {#sec-ai-frameworks-execution-structures-3551}\n",
        "\n",
        "Execution structures coordinate how computations are performed on hardware, ensuring that operations execute efficiently while respecting device constraints. These structures work closely with computational graphs, determining how data flows through the system and how memory is allocated for intermediate results.\n",
        "\n",
        "One of the primary roles of execution structures is memory management. During training or inference, intermediate computations such as activation maps or gradients can consume significant memory. Execution structures dynamically allocate and deallocate memory buffers to avoid fragmentation and maximize hardware utilization. For example, a deep neural network might reuse memory allocated for activation maps across layers, reducing the overall memory footprint.\n",
        "\n",
        "These structures also handle operation scheduling, ensuring that computations are performed in the correct order and with optimal hardware utilization. On GPUs, for instance, execution structures can overlap computation and data transfer operations, hiding latency and improving throughput. When running on multiple devices, they synchronize dependent computations to maintain consistency without unnecessary delays.\n",
        "\n",
        "Distributed training introduces additional complexity, as execution structures must manage data and computation across multiple nodes. This includes partitioning computational graphs, synchronizing gradients, and redistributing data as needed. Efficient execution structures minimize communication overhead, allowing distributed systems to scale linearly with additional hardware [@mcmahan2023communicationefficient]. @fig-3d-parallelism shows how distributed training can be defined over a grid of accelerators to paralalize over multiple dimensions for faster throughput.\n",
        "\n",
        "::: {#fig-3d-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\resizebox{0.70\\textwidth}{!}{\n",
        "\\begin{tikzpicture}[line cap=round,line join=round,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{\n",
        "pics/square/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\begin{scope}[local bounding box=SQUARE,scale=\\scalefac,every node/.append style={transform shape}]\n",
        "% Right Face\n",
        "\\draw[fill=\\channelcolor!70,line width=\\Linewidth]\n",
        "(\\Depth,0,0)coordinate(\\picname-ZDD)--(\\Depth,\\Width,0)--(\\Depth,\\Width,\\Height)--(\\Depth,0,\\Height)--cycle;\n",
        "% Front Face\n",
        "\\draw[fill=\\channelcolor!40,line width=\\Linewidth]\n",
        "(0,0,\\Height)coordinate(\\picname-DL)--(0,\\Width,\\Height)coordinate(\\picname-GL)--\n",
        "(\\Depth,\\Width,\\Height)coordinate(\\picname-GD)--(\\Depth,0,\\Height)coordinate(\\picname-DD)--(0,0,\\Height);\n",
        "% Top Face\n",
        "\\draw[fill=\\channelcolor!20,line width=\\Linewidth]\n",
        "(0,\\Width,0)coordinate(\\picname-ZGL)--(0,\\Width,\\Height)coordinate(\\picname-ZGL)--\n",
        "(\\Depth,\\Width,\\Height)--(\\Depth,\\Width,0)coordinate(\\picname-ZGD)--cycle;\n",
        "\\end{scope}\n",
        "    }\n",
        "  }\n",
        "}\n",
        "\\pgfkeys{\n",
        "  /channel/.cd,\n",
        "  Depth/.store in=\\Depth,\n",
        "  Height/.store in=\\Height,\n",
        "  Width/.store in=\\Width,\n",
        "  channelcolor/.store in=\\channelcolor,\n",
        "  drawchannelcolor/.store in=\\drawchannelcolor,\n",
        "  scalefac/.store in=\\scalefac,\n",
        "  Linewidth/.store in=\\Linewidth,\n",
        "  picname/.store in=\\picname,\n",
        "  Depth=1.6,\n",
        "  Height=1.1,\n",
        "  Width=1.4,\n",
        "  channelcolor=BrownLine,\n",
        "  drawchannelcolor=BrownLine,\n",
        "  scalefac=1,\n",
        "  Linewidth=1.0pt,\n",
        "  picname=C\n",
        "}\n",
        "\\def\\ras{0.95}\n",
        "\\def\\dis{2.2}\n",
        "\\begin{scope}[local bounding box=BELOW,shift={($(0,0)+(0,0)$)},scale=1,every node/.append style={transform shape}]\n",
        "\\begin{scope}[local bounding box=GPU0,shift={($(0,0)+(0,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=4,channelcolor=BlueLine,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU8,shift={($(0,0)+(\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=12,channelcolor=RedLine,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU16,shift={($(0,0)+(2*\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=20,channelcolor=GreenLine,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU16,shift={($(0,0)+(3*\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=28-\\i,channelcolor=OrangeLine,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\end{scope}\n",
        "%%%%ABOVE\n",
        "\\begin{scope}[local bounding box=ABOVE,shift={($(0,0)+(0,2.2)$)},scale=1,every node/.append style={transform shape}]\n",
        "\\begin{scope}[local bounding box=GPU0,shift={($(0,0)+(0,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=0,channelcolor=OliveLine,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU8,shift={($(0,0)+(1*\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=8,channelcolor=pink,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU16,shift={($(0,0)+(2*\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=16,channelcolor=green!70!,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\begin{scope}[local bounding box=GPU16,shift={($(0,0)+(3*\\dis,0)$)},scale=1,every node/.append style={transform shape}]\n",
        " \\foreach \\i in {1,...,4} {\n",
        " \\pic[shift={(0,0)}] at  ({-\\i*\\ras}, {-\\ras*\\i}) {square={scalefac=1,picname=24,channelcolor=red,Linewidth=0.7pt}};\n",
        "  }\n",
        "\\end{scope}\n",
        "\\end{scope}\n",
        "\\node[]at($(28-4-GL)!0.5!(28-4-DD)$){GPU 28};\n",
        "%\n",
        "\\foreach \\i in {0,8,16,24,4,12,20} {\n",
        "\\node[]at($(\\i-GL)!0.5!(\\i-DD)$){GPU \\i};\n",
        "}\n",
        "\\draw[thick,decoration={brace,amplitude=5pt,mirror},decorate]([yshift=-2mm]4-DL)--\n",
        "([yshift=-2mm]28-4-DD) node [midway,below=2mm] {Pipeline Parallel};\n",
        "\\draw[thick,decoration={brace,amplitude=5pt},decorate]([xshift=-2mm]4-DL)--\n",
        "([xshift=-2mm]0-GL) node [midway,above=5mm, sloped,pos=0.9,anchor=east] {Zero Data Parallel};\n",
        "\\draw[thick,decoration={brace,amplitude=5pt,mirror},decorate]([xshift=2mm]28-4-DD)--\n",
        "([xshift=2mm]28-1-ZDD)node[midway, below=4mm, anchor=west, sloped,pos=0.25] {Model Parallel};\n",
        "\\end{tikzpicture}}\n",
        "```\n",
        "**3D Parallelism**: Distributed training scales throughput by partitioning computation across multiple dimensionsâdata, pipeline stages, and model layersâenabling concurrent execution on a grid of accelerators. This approach minimizes communication overhead and maximizes hardware utilization by overlapping computation and communication across devices.\n",
        ":::\n",
        "\n",
        "### Programming Models {#sec-ai-frameworks-programming-models-31b0}\n",
        "\n",
        "Programming models define how developers express computations in code. In previous sections, we explored computational graphs and specialized data structures, which together define the computational processes of machine learning frameworks. Computational graphs outline the sequence of operations, such as matrix multiplication or convolution, while data structures like tensors store the numerical values that these operations manipulate. These models fall into two categories: symbolic programming and imperative programming.\n",
        "\n",
        "#### Symbolic Programming {#sec-ai-frameworks-symbolic-programming-3e3f}\n",
        "\n",
        "Symbolic programming involves constructing abstract representations of computations first and executing them later. This approach aligns naturally with static computational graphs, where the entire structure is defined before any computation occurs.\n",
        "\n",
        "For instance, in symbolic programming, variables and operations are represented as symbols. These symbolic expressions are not evaluated until explicitly executed, allowing the framework to analyze and optimize the computation graph before running it.\n",
        "\n",
        "Consider the symbolic programming example in @lst-symbolic_example.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-symbolic_example .callout-important title=\"**Symbolic Computation**: Symbolic expressions are constructed without immediate evaluation, allowing for optimization before execution in machine learning workflows.\"}\n",
        "```{.python}\n",
        "# Expressions are constructed but not evaluated\n",
        "weights = tf.Variable(tf.random.normal([784, 10]))\n",
        "input = tf.placeholder(tf.float32, [None, 784])\n",
        "output = tf.matmul(input, weights)\n",
        "\n",
        "# Separate evaluation phase\n",
        "with tf.Session() as sess:\n",
        "    sess.run(tf.global_variables_initializer())\n",
        "    result = sess.run(output, feed_dict={input: data})\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "2bbf4dd6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-symbolic_example\n",
        "#| lst-cap: \"**Symbolic Computation**: Symbolic expressions are constructed without immediate evaluation, allowing for optimization before execution in machine learning workflows.\"\n",
        "#| eval: false\n",
        "# Expressions are constructed but not evaluated\n",
        "weights = tf.Variable(tf.random.normal([784, 10]))\n",
        "input = tf.placeholder(tf.float32, [None, 784])\n",
        "output = tf.matmul(input, weights)\n",
        "\n",
        "# Separate evaluation phase\n",
        "with tf.Session() as sess:\n",
        "    sess.run(tf.global_variables_initializer())\n",
        "    result = sess.run(output, feed_dict={input: data})"
      ],
      "id": "dce8c2e8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This approach enables frameworks to apply global optimizations across the entire computation, making it efficient for deployment scenarios. Additionally, static graphs can be serialized and executed across different environments, enhancing portability. Predefined graphs also facilitate efficient parallel execution strategies. However, debugging can be challenging because errors often surface during execution rather than graph construction, and modifying a static graph dynamically is cumbersome.\n",
        "\n",
        "#### Imperative Programming {#sec-ai-frameworks-imperative-programming-2745}\n",
        "\n",
        "Imperative programming takes a more traditional approach, executing operations immediately as they are encountered. This method corresponds to dynamic computational graphs, where the structure evolves dynamically during execution.\n",
        "\n",
        "In this programming paradigm, computations are performed directly as the code executes, closely resembling the procedural style of most general-purpose programming languages. This is demonstrated in @lst-imperative_example, where each operation is evaluated immediately.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-imperative_example .callout-important title=\"**Imperative Execution**: Each operation is evaluated immediately as the code runs, highlighting how computations proceed step-by-step in dynamic computational graphs.\"}\n",
        "```{.python}\n",
        "# Each expression evaluates immediately\n",
        "weights = torch.randn(784, 10)\n",
        "input = torch.randn(32, 784)\n",
        "output = input @ weights  # Computation occurs now\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "b44cb187"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-imperative_example\n",
        "#| lst-cap: \"**Imperative Execution**: Each operation is evaluated immediately as the code runs, highlighting how computations proceed step-by-step in dynamic computational graphs.\"\n",
        "#| eval: false\n",
        "\n",
        "# Each expression evaluates immediately\n",
        "weights = torch.randn(784, 10)\n",
        "input = torch.randn(32, 784)\n",
        "output = input @ weights  # Computation occurs now"
      ],
      "id": "1019df4b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The immediate execution model is intuitive and aligns with common programming practices, making it easier to use. Errors can be detected and resolved immediately during execution, simplifying debugging. Dynamic graphs allow for adjustments on-the-fly, making them ideal for tasks requiring variable graph structures, such as reinforcement learning or sequence modeling. However, the creation of dynamic graphs at runtime can introduce computational overhead, and the frameworkâs ability to optimize the entire computation graph is limited due to the step-by-step execution process.\n",
        "\n",
        "#### System Implementation Considerations {#sec-ai-frameworks-system-implementation-considerations-3145}\n",
        "\n",
        "The choice between symbolic and imperative programming models fundamentally influences how ML frameworks manage system-level features such as memory management and optimization strategies.\n",
        "\n",
        "##### Performance Trade-offs {#sec-ai-frameworks-performance-tradeoffs-b01c}\n",
        "\n",
        "In symbolic programming, frameworks can analyze the entire computation graph upfront. This allows for efficient memory allocation strategies. For example, memory can be reused for intermediate results that are no longer needed during later stages of computation. This global view also enables advanced optimization techniques such as operation fusion, automatic differentiation, and hardware-specific kernel selection. These optimizations make symbolic programming highly effective for production environments where performance is critical.\n",
        "\n",
        "In contrast, imperative programming makes memory management and optimization more challenging since decisions must be made at runtime. Each operation executes immediately, which prevents the framework from globally analyzing the computation. This trade-off, however, provides developers with greater flexibility and immediate feedback during development. Beyond system-level features, the choice of programming model also impacts the developer experience, particularly during model development and debugging.\n",
        "\n",
        "##### Development and Debugging {#sec-ai-frameworks-development-debugging-7e6e}\n",
        "\n",
        "Symbolic programming requires developers to conceptualize their models as complete computational graphs. This often involves extra steps to inspect intermediate values, as symbolic execution defers computation until explicitly invoked. For example, in TensorFlow 1.x, developers need to use sessions and feed dictionaries to debug intermediate results, which can slow down the development process.\n",
        "\n",
        "Imperative programming offers a more straightforward debugging experience. Operations execute immediately, allowing developers to inspect tensor values and shapes as the code runs. This immediate feedback simplifies experimentation and makes it easier to identify and fix issues in the model. As a result, imperative programming is well-suited for rapid prototyping and iterative model development.\n",
        "\n",
        "##### Navigating Trade-offs {#sec-ai-frameworks-navigating-tradeoffs-0014}\n",
        "\n",
        "The choice between symbolic and imperative programming models often depends on the specific needs of a project. Symbolic programming excels in scenarios where performance and optimization are critical, such as production deployments. In contrast, imperative programming provides the flexibility and ease of use necessary for research and development.\n",
        "\n",
        "Modern frameworks have introduced hybrid approaches that combine the strengths of both paradigms. For instance, TensorFlow 2.x allows developers to write code in an imperative style while converting computations into optimized graph representations for deployment. Similarly, PyTorch provides tools like TorchScript to convert dynamic models into static graphs for production use. These hybrid approaches help bridge the gap between the flexibility of imperative programming and the efficiency of symbolic programming, enabling developers to navigate the trade-offs effectively.\n",
        "\n",
        "### Execution Models {#sec-ai-frameworks-execution-models-ee39}\n",
        "\n",
        "Machine learning frameworks employ various execution paradigms to determine how computations are performed. These paradigms significantly influence the development experience, performance characteristics, and deployment options of ML systems. Understanding the trade-offs between execution models is essential for selecting the right approach for a given application. Let's explore three key execution paradigms: eager execution, graph execution, and just-in-time (JIT) compilation.\n",
        "\n",
        "#### Eager Execution {#sec-ai-frameworks-eager-execution-3235}\n",
        "\n",
        "Eager execution is the most straightforward and intuitive execution paradigm. In this model, operations are executed immediately as they are called in the code. This approach closely mirrors the way traditional imperative programming languages work, making it familiar to many developers.\n",
        "\n",
        "@lst-eager_tf2 demonstrates eager execution, where operations are evaluated immediately.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-eager_tf2 .callout-important title=\"**Eager Execution**: Operations are evaluated immediately as they are called in the code, providing a more intuitive and flexible development experience.\"}\n",
        "```{.python}\n",
        "import tensorflow as tf\n",
        "\n",
        "x = tf.constant([[1., 2.], [3., 4.]])\n",
        "y = tf.constant([[1, 2], [3, 4]])\n",
        "z = tf.matmul(x, y)\n",
        "print(z)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "6d333031"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-eager_tf2\n",
        "#| lst-cap: \"**Eager Execution**: Operations are evaluated immediately as they are called in the code, providing a more intuitive and flexible development experience.\"\n",
        "#| eval: false\n",
        "\n",
        "import tensorflow as tf\n",
        "\n",
        "x = tf.constant([[1., 2.], [3., 4.]])\n",
        "y = tf.constant([[1, 2], [3, 4]])\n",
        "z = tf.matmul(x, y)\n",
        "print(z)"
      ],
      "id": "df95153e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "In this code snippet, each line is executed sequentially. When we create the tensors `x` and `y`, they are immediately instantiated in memory. The matrix multiplication `tf.matmul(x, y)` is computed right away, and the result is stored in `z`. When we print `z`, we see the output of the computation immediately.\n",
        "\n",
        "Eager execution offers several advantages. It provides immediate feedback, allowing developers to inspect intermediate values easily. This makes debugging more straightforward and intuitive. It also allows for more dynamic and flexible code structures, as the computation graph can change with each execution.\n",
        "\n",
        "However, eager execution has its trade-offs. Since operations are executed immediately, the framework has less opportunity to optimize the overall computation graph. This can lead to lower performance compared to more optimized execution paradigms, especially for complex models or when dealing with large datasets.\n",
        "\n",
        "Eager execution is particularly well-suited for research, interactive development, and rapid prototyping. It allows data scientists and researchers to quickly iterate on their ideas and see results immediately. Many modern ML frameworks, including TensorFlow 2.x and PyTorch, use eager execution as their default mode due to its developer-friendly nature.\n",
        "\n",
        "#### Graph Execution {#sec-ai-frameworks-graph-execution-e038}\n",
        "\n",
        "Graph execution, also known as static graph execution, takes a different approach to computing operations in ML frameworks. In this paradigm, developers first define the entire computational graph, and then execute it as a separate step.\n",
        "\n",
        "@lst-tf1_graph_exec illustrates an example in TensorFlow 1.x style, which employs graph execution.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-tf1_graph_exec .callout-important title=\"**Graph Execution**: Defines a computational graph and provides session-based evaluation to execute it, highlighting the separation between graph definition and execution in TensorFlow 1.x.\"}\n",
        "```{.python}\n",
        "import tensorflow.compat.v1 as tf\n",
        "tf.disable_eager_execution()\n",
        "\n",
        "# Define the graph\n",
        "x = tf.placeholder(tf.float32, shape=(2, 2))\n",
        "y = tf.placeholder(tf.float32, shape=(2, 2))\n",
        "z = tf.matmul(x, y)\n",
        "\n",
        "# Execute the graph\n",
        "with tf.Session() as sess:\n",
        "    result = sess.run(z, feed_dict={\n",
        "        x: [[1., 2.], [3., 4.]],\n",
        "        y: [[1, 2], [3, 4]]\n",
        "    })\n",
        "    print(result)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "7b71f026"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-tf1_graph_exec\n",
        "#| lst-cap: \"**Graph Execution**: Defines a computational graph and provides session-based evaluation to execute it, highlighting the separation between graph definition and execution in TensorFlow 1.x.\"\n",
        "#| eval: false\n",
        "\n",
        "import tensorflow.compat.v1 as tf\n",
        "tf.disable_eager_execution()\n",
        "\n",
        "# Define the graph\n",
        "x = tf.placeholder(tf.float32, shape=(2, 2))\n",
        "y = tf.placeholder(tf.float32, shape=(2, 2))\n",
        "z = tf.matmul(x, y)\n",
        "\n",
        "# Execute the graph\n",
        "with tf.Session() as sess:\n",
        "    result = sess.run(z, feed_dict={\n",
        "        x: [[1., 2.], [3., 4.]],\n",
        "        y: [[1, 2], [3, 4]]\n",
        "    })\n",
        "    print(result)"
      ],
      "id": "2a55527a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "In this code snippet, we first define the structure of our computation. The `placeholder` operations create nodes in the graph for input data, while `tf.matmul` creates a node representing matrix multiplication. Importantly, no actual computation occurs during this definition phase.\n",
        "\n",
        "The execution of the graph happens when we create a session and call `sess.run()`. At this point, we provide the actual input data through the `feed_dict` parameter. The framework then has the complete graph and can perform optimizations before running the computation.\n",
        "\n",
        "Graph execution offers several advantages. It allows the framework to see the entire computation ahead of time, enabling global optimizations that can improve performance, especially for complex models. Once defined, the graph can be easily saved and deployed across different environments, enhancing portability. It's particularly efficient for scenarios where the same computation is repeated many times with different data inputs.\n",
        "\n",
        "However, graph execution also has its trade-offs. It requires developers to think in terms of building a graph rather than writing sequential operations, which can be less intuitive. Debugging can be more challenging because errors often don't appear until the graph is executed. Additionally, implementing dynamic computations can be more difficult with a static graph.\n",
        "\n",
        "Graph execution is well-suited for production environments where performance and deployment consistency are crucial. It is commonly used in scenarios involving large-scale distributed training and when deploying models for predictions in high-throughput applications.\n",
        "\n",
        "#### Just-In-Time Compilation {#sec-ai-frameworks-justintime-compilation-6c3a}\n",
        "\n",
        "Just-In-Time compilation is a middle ground between eager execution and graph execution. This paradigm aims to combine the flexibility of eager execution with the performance benefits of graph optimization.\n",
        "\n",
        "@lst-jit_pytorch shows how scripted functions are compiled and reused in PyTorch.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-jit_pytorch .callout-important title=\"**PyTorch JIT Compilation**: Compiles scripted functions for efficient reuse, illustrating how just-in-time compilation balances flexibility and performance in machine learning workflows.\"}\n",
        "```{.python}\n",
        "import torch\n",
        "\n",
        "@torch.jit.script\n",
        "def compute(x, y):\n",
        "    return torch.matmul(x, y)\n",
        "\n",
        "x = torch.randn(2, 2)\n",
        "y = torch.randn(2, 2)\n",
        "\n",
        "# First call compiles the function\n",
        "result = compute(x, y)\n",
        "print(result)\n",
        "\n",
        "# Subsequent calls use the optimized version\n",
        "result = compute(x, y)\n",
        "print(result)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "902778fb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-jit_pytorch\n",
        "#| lst-cap: \"**PyTorch JIT Compilation**: Compiles scripted functions for efficient reuse, illustrating how just-in-time compilation balances flexibility and performance in machine learning workflows.\"\n",
        "#| eval: false\n",
        "import torch\n",
        "\n",
        "@torch.jit.script\n",
        "def compute(x, y):\n",
        "    return torch.matmul(x, y)\n",
        "\n",
        "x = torch.randn(2, 2)\n",
        "y = torch.randn(2, 2)\n",
        "\n",
        "# First call compiles the function\n",
        "result = compute(x, y)\n",
        "print(result)\n",
        "\n",
        "# Subsequent calls use the optimized version\n",
        "result = compute(x, y)\n",
        "print(result)"
      ],
      "id": "9b974db1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "In this code snippet, we define a function `compute` and decorate it with `@torch.jit.script`. This decorator tells PyTorch to compile the function using its JIT compiler. The first time `compute` is called, PyTorch analyzes the function, optimizes it, and generates efficient machine code. This compilation process occurs just before the function is executed, hence the term \"Just-In-Time\".\n",
        "\n",
        "Subsequent calls to `compute` use the optimized version, potentially offering significant performance improvements, especially for complex operations or when called repeatedly.\n",
        "\n",
        "JIT compilation provides a balance between development flexibility and runtime performance. It allows developers to write code in a natural, eager-style manner while still benefiting from many of the optimizations typically associated with graph execution.\n",
        "\n",
        "This approach offers several advantages. It maintains the immediate feedback and intuitive debugging of eager execution, as most of the code still executes eagerly. At the same time, it can deliver performance improvements for critical parts of the computation. JIT compilation can also adapt to the specific data types and shapes being used, potentially resulting in more efficient code than static graph compilation.\n",
        "\n",
        "However, JIT compilation also has some considerations. The first execution of a compiled function may be slower due to the overhead of the compilation process. Additionally, some complex Python constructs may not be easily JIT-compiled, requiring developers to be aware of what can be optimized effectively.\n",
        "\n",
        "JIT compilation is particularly useful in scenarios where you need both the flexibility of eager execution for development and prototyping, and the performance benefits of compilation for production or large-scale training. It's commonly used in research settings where rapid iteration is necessary but performance is still a concern.\n",
        "\n",
        "Many modern ML frameworks incorporate JIT compilation to provide developers with a balance of ease-of-use and performance optimization, as shown in @tbl-mlfm-execmodes. This balance manifests across multiple dimensions, from the learning curve that gradually introduces optimization concepts to the runtime behavior that combines immediate feedback with performance enhancements. The table highlights how JIT compilation bridges the gap between eager execution's programming simplicity and graph execution's performance benefits, particularly in areas like memory usage and optimization scope.\n",
        "\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "| Aspect               | Eager Execution                                      | Graph Execution                                     | JIT Compilation                                        |\n",
        "+:=====================+:=====================================================+:====================================================+:=======================================================+\n",
        "| Approach             | Computes each operation immediately when encountered | Builds entire computation plan first, then executes | Analyzes code at runtime, creates optimized version    |\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "| Memory Usage         | Holds intermediate results throughout computation    | Optimizes memory by planning complete data flow     | Adapts memory usage based on actual execution patterns |\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "| Optimization Scope   | Limited to local operation patterns                  | Global optimization across entire computation chain | Combines runtime analysis with targeted optimizations  |\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "| Debugging Approach   | Examine values at any point during computation       | Must set up specific monitoring points in graph     | Initial runs show original behavior, then optimizes    |\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "| Speed vs Flexibility | Prioritizes flexibility over speed                   | Prioritizes performance over flexibility            | Balances flexibility and performance                   |\n",
        "+----------------------+------------------------------------------------------+-----------------------------------------------------+--------------------------------------------------------+\n",
        "\n",
        ": **Execution Model Trade-Offs**: Machine learning frameworks offer varying execution strategiesâeager, graph, and JIT compilationâthat balance programming flexibility with runtime performance. The table details how each approach differs in aspects like debugging ease, memory consumption, and the scope of optimization techniques applied during model training and inference. {#tbl-mlfm-execmodes .striped .hover}\n",
        "\n",
        "#### Distributed Execution {#sec-ai-frameworks-distributed-execution-de86}\n",
        "\n",
        "As machine learning models continue to grow in size and complexity, training them on a single device is often no longer feasible. Large models require significant computational power and memory, while massive datasets demand efficient processing across multiple machines. To address these challenges, modern AI frameworks provide built-in support for distributed execution, allowing computations to be split across multiple GPUs, TPUs, or distributed clusters. By abstracting the complexities of parallel execution, these frameworks enable practitioners to scale machine learning workloads efficiently while maintaining ease of use.\n",
        "\n",
        "At the essence of distributed execution are two primary strategies: data parallelism and model parallelism. Data parallelism allows multiple devices to train the same model on different subsets of data, ensuring faster convergence without increasing memory requirements. Model parallelism, on the other hand, partitions the model itself across multiple devices, allowing the training of architectures too large to fit into a single deviceâs memory. While model parallelism comes in several variations, which will be explored in later chapters, both techniques are essential for training modern machine learning models efficiently.\n",
        "\n",
        "##### Data Parallelism {#sec-ai-frameworks-data-parallelism-3fac}\n",
        "\n",
        "Data parallelism is the most widely used approach for distributed training, enabling machine learning models to scale across multiple devices while maintaining efficiency. In this method, each computing device holds an identical copy of the model but processes a unique subset of the training data, as illustrated in @fig-data-parallelism. Once the computations are complete, the gradients computed on each device are synchronized before updating the model parameters, ensuring consistency across all copies. This approach allows models to learn from larger datasets in parallel without increasing memory requirements per device.\n",
        "\n",
        "::: {#fig-data-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\definecolor{Red}{RGB}{227,48,103}\n",
        "\\definecolor{Green}{RGB}{102,187,120}\n",
        "\\tikzset{%\n",
        "  mycycleR/.style={circle, draw=none, fill=Red, minimum width=8mm,node distance=1},\n",
        "  mycycleB/.style={circle, draw=none, fill=Green, minimum width=8mm,node distance=1},\n",
        "  mylineD/.style={line width=0.5pt,draw=black!80,dashed},\n",
        "  Line/.style={line width=1.0pt,black!50}\n",
        "}\n",
        "\\begin{scope}[local bounding box = BLUE]\n",
        "\\begin{scope}[local bounding box = CIRC2]\n",
        "\\node[mycycleB] (2C1) {};\n",
        "\\node[mycycleB,right=of 2C1] (2C2) {};\n",
        "\\node[mycycleB,right=of 2C2] (2C3) {};\n",
        "\\node[mycycleB,node distance=1.5,right=of 2C3] (2C4) {};\n",
        "\\node[]at($(2C3)!0.5!(2C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](2C\\x)--(2C\\newX);\n",
        "}\n",
        "\\draw[mylineD](2C1)--++(180:1.3)coordinate(LR2);\n",
        "\\draw[mylineD](2C4)--++(0:1.3)coordinate(DR2);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC3,shift={(0,-1.75)}]\n",
        "\\node[mycycleB] (3C1) {};\n",
        "\\node[mycycleB,right=of 3C1] (3C2) {};\n",
        "\\node[mycycleB,right=of 3C2] (3C3) {};\n",
        "\\node[mycycleB,node distance=1.5,right=of 3C3] (3C4) {};\n",
        "\\node[]at($(3C3)!0.5!(3C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](3C\\x)--(3C\\newX);\n",
        "}\n",
        "\\draw[mylineD](3C1)--++(180:1.3)coordinate(LR3);\n",
        "\\draw[mylineD](3C4)--++(0:1.3)coordinate(DR3);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC4,shift={(0,-3.5)}]\n",
        "\\node[mycycleB] (4C1) {};\n",
        "\\node[mycycleB,right=of 4C1] (4C2) {};\n",
        "\\node[mycycleB,right=of 4C2] (4C3) {};\n",
        "\\node[mycycleB,node distance=1.5,right=of 4C3] (4C4) {};\n",
        "\\node[]at($(4C3)!0.5!(4C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](4C\\x)--(4C\\newX);\n",
        "}\n",
        "\\draw[mylineD](4C1)--++(180:1.3)coordinate(LR4);\n",
        "\\draw[mylineD](4C4)--++(0:1.3)coordinate(DR4);\n",
        "\\end{scope}\n",
        "%below\n",
        "\\node[mycycleB,below=1.5 of $(4C1)!0.5!(4C2)$] (5C1) {};\n",
        "\\node[mycycleB,below=1.5 of $(4C2)!0.5!(4C3)$] (5C2) {};\n",
        "\\node[mycycleB,below=1.5 of $(4C3)!0.5!(4C4)$] (5C3) {};\n",
        "\\node[]at($(5C2)!0.5!(5C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](5C1)-|coordinate(LR5)(LR4);\n",
        "\\path[red](5C3)-|coordinate(DR5)(DR4);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR5)--(DR5);\n",
        "%%%%%%%%%%%%%%%%%%%%\n",
        "%above\n",
        "\\node[mycycleB,above=1.5 of $(2C1)!0.5!(2C2)$] (1C1) {};\n",
        "\\node[mycycleB,above=1.5 of $(2C2)!0.5!(2C3)$] (1C2) {};\n",
        "\\node[mycycleB,above=1.5 of $(2C3)!0.5!(2C4)$] (1C3) {};\n",
        "\\node[]at($(1C2)!0.5!(1C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](1C1)-|coordinate(LR1)(LR2);\n",
        "\\path[red](1C3)-|coordinate(DR1)(DR2);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR1)--(DR1);\n",
        "%%\n",
        "% Defining the number of nodes per layer\n",
        "\\foreach \\i/\\num in {1/3, 2/4, 3/4, 4/4, 5/3} {\n",
        "   \\foreach \\j in {1,...,\\num} { % It goes through all the nodes in layer \\i\n",
        "      \\ifnum\\i<5 % Checks if it is not the last layer\n",
        "         \\foreach \\k in {1,...,4} { % The next layer can have up to 4 nodes\n",
        "            \\ifnum\\i=4 % If it is the penultimate layer, it only connects to 3 nodes\n",
        "               \\ifnum\\k<4\n",
        "                  \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "               \\fi\n",
        "            \\else\n",
        "               \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "            \\fi\n",
        "         }\n",
        "      \\fi\n",
        "   }\n",
        "}\n",
        "%right boxes\n",
        "\\coordinate(DD)at($(DR5)+(0.25,0)$);\n",
        "\\coordinate(DG)at($(DR1)+(0.25,0)$);\n",
        "%\n",
        " \\def\\h{0.8}\n",
        "\\draw[draw=none,fill=Green,minimum width=92,\n",
        "            minimum height=23] (DD) rectangle ($(DG) + (\\h,0)$);\n",
        "\\node[rotate=90] at ($(DG)!0.5!(DD) + (\\h/2,0)$)(FD) {GPU 0};\n",
        "\n",
        "\\coordinate(0LD)at($(LR5)+(-1.7,0)$);\n",
        "\\coordinate(0LG)at($(LR1)+(-1.7,0)$);\n",
        "\\draw[mylineD](0LD)--node[align=center,fill=white]{Neural\\\\ Network A}(0LG);\n",
        "%%%%%%%%%%%%%%\n",
        "%down\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,-latex,shorten <=3pt](1C\\x)--\n",
        "            node[fill=white,text=black](OU\\x){Output}++(90:2);\n",
        "}\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,latex-,shorten <=3pt](5C\\x)--\n",
        "            node[fill=white,text=black,pos=0.6](IN\\x){Input}++(270:2);\n",
        "}\n",
        "%\n",
        "\\coordinate(SP1)at($(IN1)+(-1,-0.75)$);\n",
        "\\coordinate(SP2)at($(IN3)+(1,-0.75)$);\n",
        " \\def\\h{0.8}\n",
        "\\draw[draw=none,fill=cyan!50] (SP1) rectangle ($(SP2) + (0,-\\h)$);\n",
        "\\node at ($(SP1)!0.5!(SP2) + (0,-\\h/2)$)(BS0) {Batch Set 2};\n",
        "\n",
        "%%\n",
        "\\foreach \\x in {1,...,4} {\n",
        "\\node[below=0.7 of LR\\x](H\\x){Hidden layer};\n",
        "}\n",
        "\\path[red](H1)|-coordinate(OL)(OU1);\n",
        "\\path[red](H4)|-coordinate(HL)(IN1);\n",
        "\\node[]at(HL){Input layer};\n",
        "\\node[]at(OL){Output layer};\n",
        "\\end{scope}\n",
        "%%%%%%%%%%%%%%%%%%%%\n",
        "%RIGHT\n",
        "%%%%%%%%%%%%%%%%%%%%\n",
        "\n",
        "\\begin{scope}[local bounding box = BLUE,shift={(13,0)}]\n",
        "\\begin{scope}[local bounding box = CIRC2]\n",
        "\\node[mycycleR] (2C1) {};\n",
        "\\node[mycycleR,right=of 2C1] (2C2) {};\n",
        "\\node[mycycleR,right=of 2C2] (2C3) {};\n",
        "\\node[mycycleR,node distance=1.5,right=of 2C3] (2C4) {};\n",
        "\\node[]at($(2C3)!0.5!(2C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](2C\\x)--(2C\\newX);\n",
        "}\n",
        "\\draw[mylineD](2C1)--++(180:1.3)coordinate(LR2);\n",
        "\\draw[mylineD](2C4)--++(0:1.3)coordinate(DR2);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC3,shift={(0,-1.75)}]\n",
        "\\node[mycycleR] (3C1) {};\n",
        "\\node[mycycleR,right=of 3C1] (3C2) {};\n",
        "\\node[mycycleR,right=of 3C2] (3C3) {};\n",
        "\\node[mycycleR,node distance=1.5,right=of 3C3] (3C4) {};\n",
        "\\node[]at($(3C3)!0.5!(3C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](3C\\x)--(3C\\newX);\n",
        "}\n",
        "\\draw[mylineD](3C1)--++(180:1.3)coordinate(LR3);\n",
        "\\draw[mylineD](3C4)--++(0:1.3)coordinate(DR3);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC4,shift={(0,-3.5)}]\n",
        "\\node[mycycleR] (4C1) {};\n",
        "\\node[mycycleR,right=of 4C1] (4C2) {};\n",
        "\\node[mycycleR,right=of 4C2] (4C3) {};\n",
        "\\node[mycycleR,node distance=1.5,right=of 4C3] (4C4) {};\n",
        "\\node[]at($(4C3)!0.5!(4C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](4C\\x)--(4C\\newX);\n",
        "}\n",
        "\\draw[mylineD](4C1)--++(180:1.3)coordinate(LR4);\n",
        "\\draw[mylineD](4C4)--++(0:1.3)coordinate(DR4);\n",
        "\\end{scope}\n",
        "%below\n",
        "\\node[mycycleR,below=1.5 of $(4C1)!0.5!(4C2)$] (5C1) {};\n",
        "\\node[mycycleR,below=1.5 of $(4C2)!0.5!(4C3)$] (5C2) {};\n",
        "\\node[mycycleR,below=1.5 of $(4C3)!0.5!(4C4)$] (5C3) {};\n",
        "\\node[]at($(5C2)!0.5!(5C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](5C1)-|coordinate(LR5)(LR4);\n",
        "\\path[red](5C3)-|coordinate(DR5)(DR4);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR5)--(DR5);\n",
        "%%%%%%%%%%%%%%%%%%%%\n",
        "%above\n",
        "\\node[mycycleR,above=1.5 of $(2C1)!0.5!(2C2)$] (1C1) {};\n",
        "\\node[mycycleR,above=1.5 of $(2C2)!0.5!(2C3)$] (1C2) {};\n",
        "\\node[mycycleR,above=1.5 of $(2C3)!0.5!(2C4)$] (1C3) {};\n",
        "\\node[]at($(1C2)!0.5!(1C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](1C1)-|coordinate(LR1)(LR2);\n",
        "\\path[red](1C3)-|coordinate(DR1)(DR2);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR1)--(DR1);\n",
        "%%\n",
        "% Defining the number of nodes per layer\n",
        "\\foreach \\i/\\num in {1/3, 2/4, 3/4, 4/4, 5/3} {\n",
        "   \\foreach \\j in {1,...,\\num} { % It goes through all the nodes in layer \\i\n",
        "      \\ifnum\\i<5 % Checks if it is not the last layer\n",
        "         \\foreach \\k in {1,...,4} { % The next layer can have up to 4 nodes\n",
        "            \\ifnum\\i=4 % If it is the penultimate layer, it only connects to 3 nodes\n",
        "               \\ifnum\\k<4\n",
        "                  \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "               \\fi\n",
        "            \\else\n",
        "               \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "            \\fi\n",
        "         }\n",
        "      \\fi\n",
        "   }\n",
        "}\n",
        "%right boxes\n",
        "\\coordinate(DD)at($(DR5)+(0.25,0)$);\n",
        "\\coordinate(DG)at($(DR1)+(0.25,0)$);\n",
        "%\n",
        " \\def\\h{0.8}\n",
        "\\draw[draw=none,fill=Red,minimum width=92,\n",
        "            minimum height=23] (DD) rectangle ($(DG) + (\\h,0)$);\n",
        "\\node[rotate=90] at ($(DG)!0.5!(DD) + (\\h/2,0)$)(FD) {GPU 1};\n",
        "\n",
        "\\coordinate(LD)at($(LR5)+(-1.7,0)$);\n",
        "\\coordinate(LG)at($(LR1)+(-1.7,0)$);\n",
        "\\draw[mylineD](LD)--node[align=center,fill=white]{Neural\\\\ Network A}(LG);\n",
        "%%%%%%%%%%%%%%\n",
        "%down\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,-latex,shorten <=3pt](1C\\x)--\n",
        "            node[fill=white,text=black](OU\\x){Output}++(90:2);\n",
        "}\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,latex-,shorten <=3pt](5C\\x)--\n",
        "            node[fill=white,text=black,pos=0.6](IN\\x){Input}++(270:2);\n",
        "}\n",
        "%\n",
        "\\coordinate(SP1)at($(IN1)+(-1,-0.75)$);\n",
        "\\coordinate(SP2)at($(IN3)+(1,-0.75)$);\n",
        " \\def\\h{0.8}\n",
        "\\draw[draw=none,fill=cyan!20] (SP1) rectangle ($(SP2) + (0,-\\h)$);\n",
        "\\node at ($(SP1)!0.5!(SP2) + (0,-\\h/2)$)(BS1) {Batch Set 1};\n",
        "\n",
        "%%\n",
        "\\foreach \\x in {1,...,4} {\n",
        "\\node[below=0.7 of LR\\x](H\\x){Hidden layer};\n",
        "}\n",
        "\\path[red](H1)|-coordinate(OL)(OU1);\n",
        "\\path[red](H4)|-coordinate(HL)(IN1);\n",
        "\\node[]at(HL){Input layer};\n",
        "\\node[]at(OL){Output layer};\n",
        "\\end{scope}\n",
        "\n",
        "%%%%%%%%%%%%%%%%%%\n",
        " \\def\\h{0.8}\n",
        "\\coordinate(GG1)at($(DR1)+(0.25,2.75)+(\\h,0)$);\n",
        "\\coordinate(GG2)at($(0LG)+(0,2.75)$);\n",
        "\\draw[mylineD](GG1)--node[align=center,fill=white]{Data Parallelism}(GG2);\n",
        "\n",
        " \\coordinate(DD1)at($(DR5)+(0.25,-3.6)+(\\h,0)$);\n",
        "\\coordinate(DD2)at($(0LD)+(0,-3.6)$);\n",
        "\\draw[draw=none,fill=orange!30] (DD1) rectangle ($(DD2) + (0,-\\h)$);\n",
        "\\node at ($(DD1)!0.5!(DD2) + (0,-\\h/2)$)(MS) {ML System};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](BS1)--node[align=center,fill=white]{Full Dataset}(BS0);\n",
        "%\n",
        "\\foreach \\x in {-0.25, 0.25} { %\n",
        "    \\draw[Line, -latex, shorten <=5pt]\n",
        "        (BS1.south|-MS.north) ++(\\x,0) --++ (0,0.75);\n",
        "}\n",
        "\n",
        "\\foreach \\x in {-0.25, 0.25} { %\n",
        "    \\draw[Line, -latex, shorten <=5pt]\n",
        "        (BS0.south|-MS.north) ++(\\x,0) --++ (0,0.75);\n",
        "}\n",
        "\\end{tikzpicture}\n",
        "\n",
        "```\n",
        "Data parallelism.\n",
        ":::\n",
        "\n",
        "AI frameworks provide built-in mechanisms to manage the key challenges of data parallel execution, including data distribution, gradient synchronization, and performance optimization. In PyTorch, the `DistributedDataParallel (DDP)` module automates these tasks, ensuring efficient training across multiple GPUs or nodes. TensorFlow offers `tf.distribute.MirroredStrategy`, which enables seamless gradient synchronization for multi-GPU training. Similarly, JAXâs `pmap()` function facilitates parallel execution across multiple accelerators, optimizing inter-device communication to reduce overhead.\n",
        "\n",
        "By handling synchronization and communication automatically, these frameworks make distributed training accessible to a wide range of users, from researchers exploring novel architectures to engineers deploying large-scale AI systems. The implementation details vary, but the fundamental goal remains the same: enabling efficient multi-device training without requiring users to manually manage low-level parallelization.\n",
        "\n",
        "##### Model Parallelism {#sec-ai-frameworks-model-parallelism-a8f8}\n",
        "\n",
        "While data parallelism is effective for many machine learning workloads, some models are too large to fit within the memory of a single device. Model parallelism addresses this limitation by partitioning the model itself across multiple devices, allowing each to process a different portion of the computation. Unlike data parallelism, where the entire model is replicated on each device, model parallelism divides layers, tensors, or specific operations among available hardware resources, as shown in @fig-model-parallelism. This approach enables training of large-scale models that would otherwise be constrained by single-device memory limits.\n",
        "\n",
        "::: {#fig-model-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "\n",
        "```{.tikz}\n",
        "\\scalebox{0.65}{%\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "\\definecolor{Red}{RGB}{227,48,103}\n",
        "\\definecolor{Green}{RGB}{102,187,120}\n",
        "\\tikzset{%\n",
        "  mycycleR/.style={circle, draw=none, fill=Red, minimum width=8mm,node distance=1},\n",
        "  mycycleB/.style={circle, draw=none, fill=Green, minimum width=8mm,node distance=1},\n",
        "  mylineD/.style={line width=0.5pt,draw=black!80,dashed},\n",
        "  myline/.style={line width=0.5pt,draw=black!80},\n",
        "%\n",
        "  Box/.style={\n",
        "    inner xsep=2pt,\n",
        "    draw=RedLine,\n",
        "    line width=0.75pt,\n",
        "    fill=RedL!20,\n",
        "    text width=22mm,\n",
        "    minimum width=22mm, minimum height=8mm\n",
        "  },\n",
        "  Line/.style={line width=1.0pt,black!50}\n",
        "}\n",
        "\\begin{scope}[local bounding box = CIRC2]\n",
        "\\node[mycycleR] (2C1) {};\n",
        "\\node[mycycleR,right=of 2C1] (2C2) {};\n",
        "\\node[mycycleR,right=of 2C2] (2C3) {};\n",
        "\\node[mycycleR,node distance=1.5,right=of 2C3] (2C4) {};\n",
        "\\node[]at($(2C3)!0.5!(2C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](2C\\x)--(2C\\newX);\n",
        "}\n",
        "\\draw[mylineD](2C1)--++(180:1.3)coordinate(LR2);\n",
        "\\draw[mylineD](2C4)--++(0:1.3)coordinate(DR2);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC3,shift={(0,-1.75)}]\n",
        "\\node[mycycleB] (3C1) {};\n",
        "\\node[mycycleB,right=of 3C1] (3C2) {};\n",
        "\\node[mycycleB,right=of 3C2] (3C3) {};\n",
        "\\node[mycycleB,node distance=1.5,right=of 3C3] (3C4) {};\n",
        "\\node[]at($(3C3)!0.5!(3C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](3C\\x)--(3C\\newX);\n",
        "}\n",
        "\\draw[mylineD](3C1)--++(180:1.3)coordinate(LR3);\n",
        "\\draw[mylineD](3C4)--++(0:1.3)coordinate(DR3);\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box = CIRC4,shift={(0,-3.5)}]\n",
        "\\node[mycycleB] (4C1) {};\n",
        "\\node[mycycleB,right=of 4C1] (4C2) {};\n",
        "\\node[mycycleB,right=of 4C2] (4C3) {};\n",
        "\\node[mycycleB,node distance=1.5,right=of 4C3] (4C4) {};\n",
        "\\node[]at($(4C3)!0.5!(4C4)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\foreach \\x in {1,2,3} {\n",
        " \\pgfmathtruncatemacro{\\newX}{\\x + 1} %\n",
        " \\draw[mylineD](4C\\x)--(4C\\newX);\n",
        "}\n",
        "\\draw[mylineD](4C1)--++(180:1.3)coordinate(LR4);\n",
        "\\draw[mylineD](4C4)--++(0:1.3)coordinate(DR4);\n",
        "\\end{scope}\n",
        "%below\n",
        "\\node[mycycleB,below=1.5 of $(4C1)!0.5!(4C2)$] (5C1) {};\n",
        "\\node[mycycleB,below=1.5 of $(4C2)!0.5!(4C3)$] (5C2) {};\n",
        "\\node[mycycleB,below=1.5 of $(4C3)!0.5!(4C4)$] (5C3) {};\n",
        "\\node[]at($(5C2)!0.5!(5C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](5C1)-|coordinate(LR5)(LR4);\n",
        "\\path[red](5C3)-|coordinate(DR5)(DR4);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR5)--(DR5);\n",
        "%%%%%%%%%%%%%%%%%%%%\n",
        "%above\n",
        "\\node[mycycleR,above=1.5 of $(2C1)!0.5!(2C2)$] (1C1) {};\n",
        "\\node[mycycleR,above=1.5 of $(2C2)!0.5!(2C3)$] (1C2) {};\n",
        "\\node[mycycleR,above=1.5 of $(2C3)!0.5!(2C4)$] (1C3) {};\n",
        "\\node[]at($(1C2)!0.5!(1C3)$){$\\bullet$\\hspace{3pt} $\\bullet$\\hspace{3pt} $\\bullet$};\n",
        "\\path[red](1C1)-|coordinate(LR1)(LR2);\n",
        "\\path[red](1C3)-|coordinate(DR1)(DR2);\n",
        "\\scoped[on background layer]\n",
        "\\draw[mylineD](LR1)--(DR1);\n",
        "%%\n",
        "% Defining the number of nodes per layer\n",
        "\\foreach \\i/\\num in {1/3, 2/4, 3/4, 4/4, 5/3} {\n",
        "   \\foreach \\j in {1,...,\\num} { % It goes through all the nodes in layer \\i\n",
        "      \\ifnum\\i<5 % Checks if it is not the last layer\n",
        "         \\foreach \\k in {1,...,4} { % The next layer can have up to 4 nodes\n",
        "            \\ifnum\\i=4 % If it is the penultimate layer, it only connects to 3 nodes\n",
        "               \\ifnum\\k<4\n",
        "                  \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "               \\fi\n",
        "            \\else\n",
        "               \\draw ( \\i C\\j ) -- ( \\the\\numexpr\\i+1 C\\k );\n",
        "            \\fi\n",
        "         }\n",
        "      \\fi\n",
        "   }\n",
        "}\n",
        "%right boxes\n",
        "\\coordinate(DD)at($(DR5)+(0.25,0)$);\n",
        "\\coordinate(DG)at($(DR1)+(0.25,0)$);\n",
        "\\node[fill=Green,minimum width=113, minimum height=23,\n",
        "            anchor=north west,rotate=90](GPU0)at(DD){GPU 0};\n",
        "\\node[fill=Red,minimum width=92, minimum height=23,\n",
        "            anchor=north east,rotate=90](GPU1)at(DG){GPU 1};\n",
        " %\n",
        "\\coordinate(LD)at($(LR5)+(-1.7,0)$);\n",
        "\\coordinate(LG)at($(LR1)+(-1.7,0)$);\n",
        "\\draw[mylineD](LD)--node[align=center,fill=white]{Neural\\\\ Network A}(LG);\n",
        "%%%%%%%%%%%%%%\n",
        "%down\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,-latex,shorten <=3pt](1C\\x)--\n",
        "            node[fill=white,text=black](OU\\x){Output}++(90:2);\n",
        "}\n",
        "\\foreach \\x in {1,...,3} {\n",
        "\\draw[Line,latex-,shorten <=3pt](5C\\x)--\n",
        "            node[fill=white,text=black,pos=0.6](IN\\x){Input}++(270:2);\n",
        "}\n",
        "%\n",
        "\\coordinate(SP1)at($(LD)+(0,-2.2)$);\n",
        "\\coordinate(SP2)at($(DD)+(0,-2.2)$);\n",
        "\\coordinate(SP3)at($(LD)+(0,-3.7)$);\n",
        "\\coordinate(SP4)at($(DD)+(0,-3.7)$);\n",
        "\\def\\h{0.8}\n",
        "\\draw[draw=none,fill=cyan!20] (SP1) rectangle ($(SP2) + (0,-\\h)$);\n",
        "\\node at ($(SP1)!0.5!(SP2) + (0,-\\h/2)$)(FD) {Full Dataset};\n",
        "\\draw[draw=none,fill=orange!30] (SP3) rectangle ($(SP4) + (0,-\\h)$);\n",
        "\\node at ($(SP3)!0.5!(SP4) + (0,-\\h/2)$)(MS) {ML System};\n",
        "\n",
        "\\foreach \\x in {-0.8,-0.4,0,0.4,0.8} { %\n",
        "        \\draw[Line,latex-,shorten <=5pt,shorten >=5pt]\n",
        "                    ($(FD.south) + (\\x,0)$) -- ($(MS.north) + (\\x,0)$);\n",
        "    }\n",
        "\\coordinate(GOR1)at($(LG)+(0,2.7)$);\n",
        "\\coordinate(GOR2)at($(GPU1.north east)+(0,2.7)$);\n",
        "\n",
        "\\draw[mylineD](GOR1)--node[align=center,fill=white]{Model Parallelism}(GOR2);\n",
        "%%\n",
        "\\foreach \\x in {1,...,4} {\n",
        "\\node[below=0.7 of LR\\x](H\\x){Hidden layer};\n",
        "}\n",
        "\\path[red](H1)|-coordinate(OL)(OU1);\n",
        "\\path[red](H4)|-coordinate(HL)(IN1);\n",
        "\\node[]at(HL){Input layer};\n",
        "\\node[]at(OL){Output layer};\n",
        "\\end{tikzpicture}}\n",
        "\n",
        "```\n",
        "Model parallelism.\n",
        ":::\n",
        "\n",
        "AI frameworks provide structured APIs to simplify model parallel execution, abstracting away much of the complexity associated with workload distribution and communication. PyTorch supports pipeline parallelism through `torch.distributed.pipeline.sync`, enabling different GPUs to process sequential layers of a model while maintaining efficient execution flow. TensorFlowâs `TPUStrategy` allows for automatic partitioning of large models across TPU cores, optimizing execution for high-speed interconnects. Additionally, frameworks like DeepSpeed and Megatron-LM extend PyTorch by implementing advanced model sharding techniques, including tensor parallelism, which splits model weights across multiple devices to reduce memory overhead.\n",
        "\n",
        "There are multiple variations of model parallelism, each suited to different architectures and hardware configurations. These include tensor parallelism, pipeline parallelism, and expert parallelism, among others. The specific trade-offs and applications of these techniques will be explored in later chapters, and @fig-tensor-vs-pipeline-parallelism shows some initial intuition in comparing parallelism strategies. Regardless of the exact approach, AI frameworks play an important role in managing workload partitioning, scheduling computations efficiently, and minimizing communication overheadâensuring that even the largest models can be trained at scale.\n",
        "\n",
        "::: {#fig-tensor-vs-pipeline-parallelism fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line cap=round,line join=round,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{%\n",
        "GPU/.style={inner sep=0pt,font=\\footnotesize\\usefont{T1}{phv}{m}{n}},\n",
        "Line/.style={line width=1.0pt,black!50,text=black},\n",
        "Box/.style={inner xsep=2pt,\n",
        "    node distance=1.3,\n",
        "    draw=GreenLine,\n",
        "    line width=0.75pt,\n",
        "    fill=GreenL,\n",
        "    align=flush center,\n",
        "    minimum width=20mm, minimum height=9.5mm\n",
        "  },\n",
        "Box2/.style={Box, minimum width=40mm}\n",
        "}\n",
        "\n",
        "\\begin{scope}[local bounding box=MOBILE1,shift={($(0,0)+(0,0)$)}]\n",
        "\\node[Box](B1){Input \\\\ 1 $\\times$ 4};\n",
        "\\node[Box2,right=of B1,fill=VioletL2,draw=VioletLine](B2){Linear 4 $\\times$ 4};\n",
        "\\node[Box2,right=of B2,fill=RedL,draw=RedLine](B3){Linear 4 $\\times$ 2};\n",
        "\\node[Box,right=of B3,fill=BlueL,draw=BlueLine](B4){Output \\\\ 1 $\\times$ 2};\n",
        "\\node[draw=none,inner xsep=4mm,inner ysep=5mm,\n",
        "yshift=2.5mm,fill=none,fit=(B1)(B4),line width=0.75pt](BB1){};\n",
        "\\node[below=4pt of  BB1.north,inner sep=0pt,\n",
        "anchor=north]{\\textbf{Tensor Parallelism (2 GPUs)}};\n",
        "%\n",
        "\\foreach \\i in{1,2,3}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\i + 1} %\n",
        "\\draw[Line,-latex](B\\i)--(B\\newX);\n",
        "}\n",
        "\\node[GPU,below=4pt of B2.south west,anchor=north west]{GPU 0};\n",
        "\\node[GPU,below=4pt of B3.south west,,anchor=north west]{GPU 0};\n",
        "\\node[GPU,below=4pt of B2.south east,anchor=north east]{GPU 1};\n",
        "\\node[GPU,below=4pt of B3.south east,anchor=north east]{GPU 1};\n",
        "\\draw[BrownLine,dashed](B2.north)--(B2.south);\n",
        "\\draw[BrownLine,dashed](B3.north)--(B3.south);\n",
        "\\end{scope}\n",
        "%below\n",
        "\\begin{scope}[local bounding box=MOBILE1,shift={($(0,0)+(0,-3.75)$)}]\n",
        "\\node[Box](B1){Input \\\\ 1 $\\times$ 4};\n",
        "\\node[Box2,right=of B1,fill=VioletL2,draw=VioletLine](B2){Linear 4 $\\times$ 4};\n",
        "\\node[Box2,right=of B2,fill=RedL,draw=RedLine](B3){Linear 4 $\\times$ 2};\n",
        "\\node[Box,right=of B3,fill=BlueL,draw=BlueLine](B4){Output \\\\ 1 $\\times$ 2};\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=5mm,\n",
        "yshift=2.5mm,fill=BackColor,fit=(B1)(B2),line width=0.75pt](BB2){};\n",
        "\\node[below=4pt of  BB2.north,inner sep=0pt,anchor=north]{GPU 0};\n",
        "\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=pink,inner xsep=4mm,inner ysep=5mm,\n",
        "yshift=2.5mm,fill=pink!10,fit=(B3)(B4),line width=0.75pt](BB3){};\n",
        "\\node[below=4pt of  BB3.north,inner sep=0pt,anchor=north]{GPU 1};\n",
        "\n",
        "\\node[draw=none,inner xsep=4mm,inner ysep=5mm,\n",
        "yshift=2.5mm,fill=none,fit=(B1)(B4)(BB2),line width=0.75pt](BB1){};\n",
        "\\node[below=4pt of  BB1.north,inner sep=0pt,\n",
        "anchor=north]{\\textbf{Pipeline Parallelism (2 GPUs)}};\n",
        "%\n",
        "\\foreach \\i in{1,2,3}{\n",
        "\\pgfmathtruncatemacro{\\newX}{\\i + 1} %\n",
        "\\draw[Line,-latex](B\\i)--(B\\newX);\n",
        "}\n",
        "\\end{scope}\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Parallelism Strategies**: Tensor parallelism shards individual layers across multiple devices, reducing per-device memory requirements, while pipeline parallelism distributes consecutive layers to different devices, increasing throughput by overlapping computation and communication. This figure contrasts these approaches, highlighting how tensor parallelism replicates layer parameters across devices and pipeline parallelism partitions the modelâs computational graph.\n",
        ":::\n",
        "\n",
        "### Core Operations {#sec-ai-frameworks-core-operations-30b6}\n",
        "\n",
        "Machine learning frameworks employ multiple layers of operations that translate high-level model descriptions into efficient computations on hardware. These operations form a hierarchy: hardware abstraction operations manage the complexity of diverse computing platforms, basic numerical operations implement fundamental mathematical computations, and system-level operations coordinate resources and execution. This operational hierarchy is key to understanding how frameworks transform mathematical models into practical implementations. @fig-mlfm-core-ops illustrates this hierarchy, showing the relationship between the three layers and their respective subcomponents.\n",
        "\n",
        "::: {#fig-mlfm-core-ops fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=2pt,\n",
        "    node distance=0.3,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,\n",
        "    text width=34mm,\n",
        "    minimum width=30mm,\n",
        "    minimum height=10mm\n",
        "  },\n",
        "}\n",
        "\\begin{scope}[local bounding box=box1]\n",
        "\\node[Box,](B1){Scheduling};\n",
        "\\node[Box,below=of B1](B2){Memory Management};\n",
        "\\node[Box,below=of B2](B3){Resource Optimization};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=5mm,yshift=3mm,\n",
        "           fill=BackColor,fit=(B1)(B2)(B3),line width=0.75pt](BB1){};\n",
        "\\node[below=2pt of  BB1.north,anchor=north]{System-Level Operations};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box=box2,shift={(5.5,0)}]\n",
        "\\node[Box,fill=BrownL,draw=BrownLine,](B1){GEMM Operations};\n",
        "\\node[Box,fill=BrownL,draw=BrownLine,below=of B1](B2){BLAS Operations};\n",
        "\\node[Box,fill=BrownL,draw=BrownLine,below=of B2](B3){Element-wise Operations};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=5mm,yshift=3mm,\n",
        "           fill=BackColor,fit=(B1)(B2)(B3),line width=0.75pt](BB2){};\n",
        "\\node[below=2pt of  BB2.north,anchor=north]{Basic Numerical Operations};\n",
        "\\end{scope}\n",
        "\n",
        "\\begin{scope}[local bounding box=box3,shift={(11,0)}]\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine,](B1){Compute Kernel Management};\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine,below=of B1](B2){Memory Abstraction};\n",
        "\\node[Box,fill=OrangeL,draw=OrangeLine,below=of B2](B3){Execution Control};\n",
        "%\n",
        "\\scoped[on background layer]\n",
        "\\node[draw=BackLine,inner xsep=4mm,inner ysep=5mm,yshift=3mm,\n",
        "           fill=BackColor,fit=(B1)(B2)(B3),line width=0.75pt](BB3){};\n",
        "\\node[below=2pt of  BB3.north,anchor=north]{Hardware Operations};\n",
        "\\end{scope}\n",
        "\n",
        "\\foreach \\x/\\y in{1/2,2/3}\n",
        "\\draw[-latex,Line](box\\x)--(box\\y);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Framework Operational Hierarchy**: Machine learning frameworks abstract hardware complexities through layered operationsâscheduling, memory management, and resource optimizationâenabling efficient execution of mathematical models on diverse computing platforms. This hierarchical structure transforms high-level model descriptions into practical implementations by coordinating resources and managing computations.\n",
        ":::\n",
        "\n",
        "#### Hardware Abstraction Operations {#sec-ai-frameworks-hardware-abstraction-operations-8672}\n",
        "\n",
        "At the lowest level, hardware abstraction operations provide the foundation for executing computations across diverse computing platforms. These operations isolate higher layers from hardware-specific details while maintaining computational efficiency. The abstraction layer must handle three fundamental aspects: compute kernel management, memory system abstraction, and execution control.\n",
        "\n",
        "##### Compute Kernel Management {#sec-ai-frameworks-compute-kernel-management-59c9}\n",
        "\n",
        "Compute kernel management involves selecting and dispatching optimal implementations of mathematical operations for different hardware architectures. This requires maintaining multiple implementations of core operations and sophisticated dispatch logic. For example, a matrix multiplication operation might be implemented using AVX-512[^fn-frameworks-9] vector instructions on modern CPUs, [cuBLAS](https://developer.nvidia.com/cublas) on NVIDIA GPUs, or specialized tensor processing instructions on AI accelerators. The kernel manager must consider input sizes, data layout, and hardware capabilities when selecting implementations. It must also handle fallback paths for when specialized implementations are unavailable or unsuitable.\n",
        "\n",
        "[^fn-frameworks-9]: A set of 512-bit single-instruction, multiple-data (SIMD) extensions to the x86 instruction set architecture.\n",
        "\n",
        "##### Memory System Abstraction {#sec-ai-frameworks-memory-system-abstraction-0418}\n",
        "\n",
        "Memory system abstractions manage data movement through complex memory hierarchies. These abstractions must handle various memory types (registered, pinned, unified) and their specific access patterns. Data layouts often require transformation between hardware-preferred formats - for instance, between row-major and column-major matrix layouts, or between interleaved and planar image formats. The memory system must also manage alignment requirements, which can vary from 4-byte alignment on CPUs to 128-byte alignment on some accelerators. Additionally, it handles cache coherency issues when multiple execution units access the same data.\n",
        "\n",
        "##### Execution Control {#sec-ai-frameworks-execution-control-a937}\n",
        "\n",
        "Execution control operations coordinate computation across multiple execution units and memory spaces. This includes managing execution queues, handling event dependencies, and controlling asynchronous operations. Modern hardware often supports multiple execution streams that can operate concurrently. For example, independent GPU streams or CPU thread pools. The execution controller must manage these streams, handle synchronization points, and ensure correct ordering of dependent operations. It must also provide error handling and recovery mechanisms for hardware-specific failures.\n",
        "\n",
        "#### Basic Numerical Operations {#sec-ai-frameworks-basic-numerical-operations-d754}\n",
        "\n",
        "Building upon hardware abstractions, frameworks implement fundamental numerical operations that form the building blocks of machine learning computations. These operations must balance mathematical precision with computational efficiency. General Matrix Multiply (GEMM) operations, which dominate the computational cost of most machine learning workloads. GEMM operations follow the pattern C = $\\alpha$AB + $\\beta$C, where A, B, and C are matrices, and $\\alpha$ and $\\beta$ are scaling factors.\n",
        "\n",
        "The implementation of GEMM operations requires sophisticated optimization techniques. These include blocking[^fn-frameworks-10] for cache efficiency, where matrices are divided into smaller tiles that fit in cache memory; loop unrolling[^fn-frameworks-11] to increase instruction-level parallelism; and specialized implementations for different matrix shapes and sparsity patterns. For example, fully-connected neural network layers typically use regular dense GEMM operations, while convolutional layers often employ specialized GEMM variants that exploit input locality patterns.\n",
        "\n",
        "[^fn-frameworks-10]: An optimization technique where computations are performed on submatrices (tiles) that fit into cache memory, reducing memory access overhead and improving computational efficiency.\n",
        "\n",
        "[^fn-frameworks-11]: A method of increasing instruction-level parallelism by manually replicating loop iterations in the code, reducing branching overhead and enabling better utilization of CPU pipelines.\n",
        "\n",
        "Beyond GEMM, frameworks must efficiently implement BLAS operations such as vector addition (AXPY), matrix-vector multiplication (GEMV), and various reduction operations. These operations require different optimization strategies. AXPY operations are typically memory-bandwidth limited, while GEMV operations must balance memory access patterns with computational efficiency.\n",
        "\n",
        "Element-wise operations form another critical category, including both basic arithmetic operations (addition, multiplication) and transcendental functions (exponential, logarithm, trigonometric functions). While conceptually simpler than GEMM, these operations present significant optimization opportunities through vectorization and operation fusion. For example, multiple element-wise operations can often be fused into a single kernel to reduce memory bandwidth requirements. The efficiency of these operations becomes particularly important in neural network activation functions and normalization layers, where they process large volumes of data.\n",
        "\n",
        "Modern frameworks must also handle operations with varying numerical precision requirements. For example, training often requires 32-bit floating-point precision for numerical stability, while inference can often use reduced precision formats like 16-bit floating-point or even 8-bit integers. Frameworks must therefore provide efficient implementations across multiple numerical formats while maintaining acceptable accuracy.\n",
        "\n",
        "#### System-Level Operations {#sec-ai-frameworks-systemlevel-operations-7298}\n",
        "\n",
        "System-level operations build upon the previously discussed computational graph abstractions, hardware abstractions, and numerical operations to manage overall computation flow and resource utilization. These operations handle three critical aspects: operation scheduling, memory management, and resource optimization.\n",
        "\n",
        "Operation scheduling leverages the computational graph structure discussed earlier to determine execution ordering. Building on the static or dynamic graph representation, the scheduler must identify parallelization opportunities while respecting dependencies. The implementation challenges differ between static graphs, where the entire dependency structure is known in advance, and dynamic graphs, where dependencies emerge during execution. The scheduler must also handle advanced execution patterns like conditional operations and loops that create dynamic control flow within the graph structure.\n",
        "\n",
        "Memory management implements sophisticated strategies for allocating and deallocating memory resources across the computational graph. Different data types require different management strategies. Model parameters typically persist throughout execution and may require specific memory types for efficient access. Intermediate results have bounded lifetimes defined by the operation graph. For example, activation values are needed only during the backward pass. The memory manager employs techniques like reference counting for automatic cleanup, memory pooling to reduce allocation overhead, and workspace management for temporary buffers. It must also handle memory fragmentation, particularly in long-running training sessions where allocation patterns can change over time.\n",
        "\n",
        "Resource optimization integrates scheduling and memory decisions to maximize performance within system constraints. A key optimization is gradient checkpointing[^fn-frameworks-12], where some intermediate results are discarded and recomputed rather than stored, trading computation time for memory savings. The optimizer must also manage concurrent execution streams, balancing load across available compute units while respecting dependencies. For operations with multiple possible implementations, it selects between alternatives based on runtime conditions - for instance, choosing between matrix multiplication algorithms based on matrix shapes and system load.\n",
        "\n",
        "[^fn-frameworks-12]: **Gradient checkpointing**: A memory-saving optimization technique that stores a limited set of intermediate activations during the forward pass and recomputes the others during the backward pass to reduce memory usage.\n",
        "\n",
        "Together, these operational layers build upon the computational graph foundation to execute machine learning workloads efficiently while abstracting implementation complexity from model developers. The interaction between these layers determines overall system performance and sets the foundation for advanced optimization techniques discussed in subsequent chapters.\n",
        "\n",
        "## Framework Components {#sec-ai-frameworks-framework-components-1c28}\n",
        "\n",
        "Machine learning frameworks organize their fundamental capabilities into distinct components that work together to provide a complete development and deployment environment. These components create layers of abstraction that make frameworks both usable for high-level model development and efficient for low-level execution. Understanding how these components interact helps developers choose and use frameworks effectively.\n",
        "\n",
        "### APIs and Abstractions {#sec-ai-frameworks-apis-abstractions-7b4c}\n",
        "\n",
        "The API layer of machine learning frameworks provides the primary interface through which developers interact with the framework's capabilities. This layer must balance multiple competing demands: it must be intuitive enough for rapid development, flexible enough to support diverse use cases, and efficient enough to enable high-performance implementations.\n",
        "\n",
        "Modern framework APIs typically implement multiple levels of abstraction. At the lowest level, they provide direct access to tensor operations and computational graph construction. These low-level APIs expose the fundamental operations discussed in the previous section, allowing fine-grained control over computation. For example, frameworks like PyTorch and TensorFlow offer such low-level interfaces, enabling researchers to define custom computations and explore novel algorithms [@paszke2019pytorch; @Abadi_2016], as illustrated in @lst-low_level_api.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-low_level_api .callout-important title=\"**Manual Tensor Operations**: To perform custom computations using pytorch's low-level API, highlighting the flexibility for defining complex transformations.\"}\n",
        "```{.python}\n",
        "import torch\n",
        "\n",
        "# Manual tensor operations\n",
        "x = torch.randn(2, 3)\n",
        "w = torch.randn(3, 4)\n",
        "b = torch.randn(4)\n",
        "y = torch.matmul(x, w) + b\n",
        "\n",
        "# Manual gradient computation\n",
        "y.backward(torch.ones_like(y))\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "5b8275ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-low_level_api\n",
        "#| lst-cap: \"**Manual Tensor Operations**: To perform custom computations using pytorch's low-level API, highlighting the flexibility for defining complex transformations.\"\n",
        "#| eval: false\n",
        "\n",
        "import torch\n",
        "\n",
        "# Manual tensor operations\n",
        "x = torch.randn(2, 3)\n",
        "w = torch.randn(3, 4)\n",
        "b = torch.randn(4)\n",
        "y = torch.matmul(x, w) + b\n",
        "\n",
        "# Manual gradient computation\n",
        "y.backward(torch.ones_like(y))"
      ],
      "id": "b773f32b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "Building on these primitives, frameworks implement higher-level APIs that package common patterns into reusable components. Neural network layers represent a classic example, although a convolution operation could be implemented manually using basic tensor operations, frameworks provide pre-built layer abstractions that handle the implementation details. This approach is exemplified by libraries such as PyTorch's `torch.nn` and TensorFlow's Keras API, which enable efficient and user-friendly model development [@chollet2018keras], as shown in @lst-mid_level_api.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-mid_level_api .callout-important title=\"**Mid-Level Abstraction**: Neural networks are constructed using layers like convolutions and fully connected layers, showcasing how high-level models build upon basic tensor operations for efficient implementation.\"}\n",
        "```{.python}\n",
        "import torch.nn as nn\n",
        "\n",
        "class SimpleNet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.conv = nn.Conv2d(3, 64, kernel_size=3)\n",
        "        self.fc = nn.Linear(64, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        x = torch.relu(x)\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "c4b0a0e3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-mid_level_api\n",
        "#| lst-cap: \"**Mid-Level Abstraction**: Neural networks are constructed using layers like convolutions and fully connected layers, showcasing how high-level models build upon basic tensor operations for efficient implementation.\"\n",
        "#| eval: false\n",
        "\n",
        "import torch.nn as nn\n",
        "\n",
        "class SimpleNet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.conv = nn.Conv2d(3, 64, kernel_size=3)\n",
        "        self.fc = nn.Linear(64, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        x = torch.relu(x)\n",
        "        x = self.fc(x)\n",
        "        return x"
      ],
      "id": "288f2938",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "At the highest level (@lst-high_level_api), frameworks often provide model-level abstractions that automate common workflows. For example, the Keras API provides a highly abstract interface that hides most implementation details:\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-high_level_api .callout-important title=\"**High-level model definition**: Defines a convolutional neural network architecture using Keras, showcasing layer stacking for feature extraction and classification. **Training workflow**: Automates the training process by compiling the model with an optimizer and loss function, then fitting it to data over multiple epochs.\"}\n",
        "```{.python}\n",
        "\n",
        "from tensorflow import keras\n",
        "\n",
        "model = keras.Sequential([\n",
        "    keras.layers.Conv2D(\n",
        "        64,\n",
        "        3,\n",
        "        activation='relu',\n",
        "        input_shape=(32, 32, 3)),\n",
        "    keras.layers.Flatten(),\n",
        "    keras.layers.Dense(10)\n",
        "])\n",
        "\n",
        "# Automated training workflow\n",
        "model.compile(\n",
        "    optimizer='adam',\n",
        "    loss='sparse_categorical_crossentropy')\n",
        "model.fit(train_data, train_labels, epochs=10)\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "db1abf67"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-high_level_api\n",
        "#| lst-cap: \"**High-level model definition**: Defines a convolutional neural network architecture using Keras, showcasing layer stacking for feature extraction and classification. **Training workflow**: Automates the training process by compiling the model with an optimizer and loss function, then fitting it to data over multiple epochs.\"\n",
        "#| eval: false\n",
        "\n",
        "from tensorflow import keras\n",
        "\n",
        "model = keras.Sequential([\n",
        "    keras.layers.Conv2D(\n",
        "        64,\n",
        "        3,\n",
        "        activation='relu',\n",
        "        input_shape=(32, 32, 3)),\n",
        "    keras.layers.Flatten(),\n",
        "    keras.layers.Dense(10)\n",
        "])\n",
        "\n",
        "# Automated training workflow\n",
        "model.compile(\n",
        "    optimizer='adam',\n",
        "    loss='sparse_categorical_crossentropy')\n",
        "model.fit(train_data, train_labels, epochs=10)"
      ],
      "id": "dd001e16",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "The organization of these API layers reflects fundamental trade-offs in framework design. Lower-level APIs provide maximum flexibility but require more expertise to use effectively. Higher-level APIs improve developer productivity but may constrain implementation choices. Framework APIs must therefore provide clear paths between abstraction levels, allowing developers to mix different levels of abstraction as needed for their specific use cases.\n",
        "\n",
        "## Framework Components {#sec-ai-frameworks-framework-components-1c28}\n",
        "\n",
        "Machine learning frameworks organize their fundamental capabilities into distinct components that work together to provide a complete development and deployment environment. These components create layers of abstraction that make frameworks both usable for high-level model development and efficient for low-level execution. Understanding how these components interact helps developers choose and use frameworks effectively.\n",
        "\n",
        "### Core Libraries {#sec-ai-frameworks-core-libraries-6235}\n",
        "\n",
        "At the heart of every machine learning framework lies a set of core libraries, forming the foundation upon which all other components are built. These libraries provide the essential building blocks for machine learning operations, implementing fundamental tensor operations that serve as the backbone of numerical computations. Heavily optimized for performance, these operations often leverage low-level programming languages and hardware-specific optimizations to ensure efficient execution of tasks like matrix multiplication, a cornerstone of neural network computations.\n",
        "\n",
        "Alongside these basic operations, core libraries implement automatic differentiation capabilities, enabling the efficient computation of gradients for complex functions. This feature is crucial for the backpropagation algorithm that powers most neural network training. The implementation often involves intricate graph manipulation and symbolic computation techniques, abstracting away the complexities of gradient calculation from the end-user.\n",
        "\n",
        "Building upon these fundamental operations, core libraries typically provide pre-implemented neural network layers such as convolutional, recurrent, and attention mechanisms. These ready-to-use components save developers from reinventing the wheel for common model architectures, allowing them to focus on higher-level model design rather than low-level implementation details. Similarly, optimization algorithms like various flavors of gradient descent are provided out-of-the-box, further streamlining the model development process.\n",
        "\n",
        "A simplified example of how these components might be used in practice is shown in @lst-integrated_example.\n",
        "\n",
        "::: {.content-visible when-format=\"html\"}\n",
        "::: {#lst-integrated_example .callout-important title=\"**Training Pipeline**: Machine learning workflows partition datasets into training, validation, and test sets to ensure robust model development and unbiased evaluation.\"}\n",
        "```{.python}\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "\n",
        "# Create a simple neural network\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(10, 20),\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(20, 1)\n",
        ")\n",
        "\n",
        "# Define loss function and optimizer\n",
        "loss_fn = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n",
        "\n",
        "# Forward pass, compute loss, and backward pass\n",
        "x = torch.randn(32, 10)\n",
        "y = torch.randn(32, 1)\n",
        "y_pred = model(x)\n",
        "loss = loss_fn(y_pred, y)\n",
        "loss.backward()\n",
        "optimizer.step()\n",
        "```\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.content-visible when-format=\"pdf\"}"
      ],
      "id": "b09898c8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| lst-label: lst-integrated_example\n",
        "#| lst-cap: \"**Training Pipeline**: Machine learning workflows partition datasets into training, validation, and test sets to ensure robust model development and unbiased evaluation.\"\n",
        "#| eval: false\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "\n",
        "# Create a simple neural network\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(10, 20),\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(20, 1)\n",
        ")\n",
        "\n",
        "# Define loss function and optimizer\n",
        "loss_fn = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n",
        "\n",
        "# Forward pass, compute loss, and backward pass\n",
        "x = torch.randn(32, 10)\n",
        "y = torch.randn(32, 1)\n",
        "y_pred = model(x)\n",
        "loss = loss_fn(y_pred, y)\n",
        "loss.backward()\n",
        "optimizer.step()"
      ],
      "id": "f23c55c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "This example demonstrates how core libraries provide high-level abstractions for model creation, loss computation, and optimization, while handling low-level details internally.\n",
        "\n",
        "### Extensions and Plugins {#sec-ai-frameworks-extensions-plugins-7d02}\n",
        "\n",
        "While core libraries offer essential functionality, the true power of modern machine learning frameworks often lies in their extensibility. Extensions and plugins expand the capabilities of frameworks, allowing them to address specialized needs and leverage cutting-edge research. Domain-specific libraries, for instance, cater to particular areas like computer vision or natural language processing, providing pre-trained models, specialized data augmentation techniques, and task-specific layers.\n",
        "\n",
        "Hardware acceleration plugins play an important role in performance optimization as it enables frameworks to take advantage of specialized hardware like GPUs or TPUs. These plugins dramatically speed up computations and allow seamless switching between different hardware backends, a key feature for scalability and flexibility in modern machine learning workflows.\n",
        "\n",
        "As models and datasets grow in size and complexity, distributed computing extensions also become important. These tools enable training across multiple devices or machines, handling complex tasks like data parallelism, model parallelism, and synchronization between compute nodes. This capability is essential for researchers and companies tackling large-scale machine learning problems.\n",
        "\n",
        "Complementing these computational tools are visualization and experiment tracking extensions. Visualization tools provide invaluable insights into the training process and model behavior, displaying real-time metrics and even offering interactive debugging capabilities. Experiment tracking extensions help manage the complexity of machine learning research, allowing systematic logging and comparison of different model configurations and hyperparameters.\n",
        "\n",
        "### Development Tools {#sec-ai-frameworks-development-tools-7122}\n",
        "\n",
        "The ecosystem of development tools surrounding a machine learning framework further enhances its effectiveness and adoption. Interactive development environments, such as Jupyter notebooks, have become nearly ubiquitous in machine learning workflows, allowing for rapid prototyping and seamless integration of code, documentation, and outputs. Many frameworks provide custom extensions for these environments to enhance the development experience.\n",
        "\n",
        "Debugging and profiling tools address the unique challenges presented by machine learning models. Specialized debuggers allow developers to inspect the internal state of models during training and inference, while profiling tools identify bottlenecks in model execution, guiding optimization efforts. These tools are essential for developing efficient and reliable machine learning systems.\n",
        "\n",
        "As projects grow in complexity, version control integration becomes increasingly important. Tools that allow versioning of not just code, but also model weights, hyperparameters, and training data, help manage the iterative nature of model development. This comprehensive versioning approach ensures reproducibility and facilitates collaboration in large-scale machine learning projects.\n",
        "\n",
        "Finally, deployment utilities bridge the gap between development and production environments. These tools handle tasks like model compression, conversion to deployment-friendly formats, and integration with serving infrastructure, streamlining the process of moving models from experimental settings to real-world applications.\n",
        "\n",
        "## System Integration {#sec-ai-frameworks-system-integration-5f4b}\n",
        "\n",
        "System integration is about implementing machine learning frameworks in real-world environments. This section explores how ML frameworks integrate with broader software and hardware ecosystems, addressing the challenges and considerations at each level of the integration process.\n",
        "\n",
        "### Hardware Integration {#sec-ai-frameworks-hardware-integration-bfe5}\n",
        "\n",
        "Effective hardware integration is crucial for optimizing the performance of machine learning models. Modern ML frameworks must adapt to a diverse range of computing environments, from high-performance GPU clusters to resource-constrained edge devices.\n",
        "\n",
        "For GPU acceleration, frameworks like TensorFlow and PyTorch provide robust support, allowing seamless utilization of NVIDIA's CUDA platform. This integration enables significant speedups in both training and inference tasks. Similarly, support for Google's TPUs in TensorFlow allows for even further acceleration of specific workloads.\n",
        "\n",
        "In distributed computing scenarios, frameworks must efficiently manage multi-device and multi-node setups. This involves strategies for data parallelism, where the same model is replicated across devices, and model parallelism, where different parts of the model are distributed across hardware units. Frameworks like Horovod have emerged to simplify distributed training across different backend frameworks.\n",
        "\n",
        "For edge deployment, frameworks are increasingly offering lightweight versions optimized for mobile and IoT devices. TensorFlow Lite and PyTorch Mobile, for instance, provide tools for model compression and optimization, ensuring efficient execution on devices with limited computational resources and power constraints.\n",
        "\n",
        "### Software Stack {#sec-ai-frameworks-software-stack-5866}\n",
        "\n",
        "Integrating ML frameworks into existing software stacks presents unique challenges and opportunities. A key consideration is how the ML system interfaces with data processing pipelines. Frameworks often provide connectors to popular big data tools like Apache Spark or Apache Beam, allowing seamless data flow between data processing systems and ML training environments.\n",
        "\n",
        "Containerization technologies like Docker have become essential in ML workflows, ensuring consistency between development and production environments. Kubernetes has emerged as a popular choice for orchestrating containerized ML workloads, providing scalability and manageability for complex deployments.\n",
        "\n",
        "ML frameworks must also interface with other enterprise systems such as databases, message queues, and web services. For instance, TensorFlow Serving provides a flexible, high-performance serving system for machine learning models, which can be easily integrated into existing microservices architectures.\n",
        "\n",
        "### Deployment Considerations {#sec-ai-frameworks-deployment-considerations-9575}\n",
        "\n",
        "Deploying ML models to production environments involves several critical considerations. Model serving strategies must balance performance, scalability, and resource efficiency. Approaches range from batch prediction for large-scale offline processing to real-time serving for interactive applications.\n",
        "\n",
        "Scaling ML systems to meet production demands often involves techniques like horizontal scaling of inference servers, caching of frequent predictions, and load balancing across multiple model versions. Frameworks like TensorFlow Serving and TorchServe provide built-in solutions for many of these scaling challenges.\n",
        "\n",
        "Monitoring and logging are crucial for maintaining ML systems in production. This includes tracking model performance metrics, detecting concept drift, and logging prediction inputs and outputs for auditing purposes. Tools like Prometheus and Grafana are often integrated with ML serving systems to provide comprehensive monitoring solutions.\n",
        "\n",
        "### Workflow Orchestration {#sec-ai-frameworks-workflow-orchestration-98e4}\n",
        "\n",
        "Managing end-to-end ML pipelines requires orchestrating multiple stages, from data preparation and model training to deployment and monitoring. MLOps practices have emerged to address these challenges, bringing DevOps principles to machine learning workflows.\n",
        "\n",
        "Continuous Integration and Continuous Deployment (CI/CD) practices are being adapted for ML workflows. This involves automating model testing, validation, and deployment processes. Tools like Jenkins or GitLab CI can be extended with ML-specific stages to create robust CI/CD pipelines for machine learning projects.\n",
        "\n",
        "Automated model retraining and updating is another critical aspect of ML workflow orchestration. This involves setting up systems to automatically retrain models on new data, evaluate their performance, and seamlessly update production models when certain criteria are met. Frameworks like Kubeflow provide end-to-end ML pipelines that can automate many of these processes. @fig-workflow-orchestration shows an example orchestration flow, where a user submitts DAGs, or directed acyclic graphs of workloads to process and train to be executed.\n",
        "\n",
        "Version control for ML assets, including data, model architectures, and hyperparameters, is essential for reproducibility and collaboration. Tools like DVC (Data Version Control) and MLflow have emerged to address these ML-specific version control needs.\n",
        "\n",
        "::: {#fig-workflow-orchestration fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[line cap=round,line join=round,font=\\small\\usefont{T1}{phv}{m}{n}]\n",
        "\\tikzset{%\n",
        "Line/.style={line width=1.0pt,black!50,text=black,align=center},\n",
        "Box/.style={inner xsep=2pt,\n",
        "    node distance=3.2,\n",
        "    draw=GreenLine,\n",
        "    line width=0.75pt,\n",
        "    fill=GreenL,\n",
        "    align=flush center,\n",
        "    minimum width=22mm, minimum height=9.5mm\n",
        "  }\n",
        "}\n",
        "\\tikzset{mycylinder/.style={cylinder, shape border rotate=90, aspect=1.3, draw, fill=white,\n",
        "minimum width=25mm,minimum height=11mm,line width=\\Linewidth,node distance=-0.15},\n",
        "pics/data/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\begin{scope}[local bounding box=STREAMING,scale=\\scalefac, every node/.append style={transform shape}]\n",
        "\\node[mycylinder,fill=\\channelcolor!50] (A) {};\n",
        "\\node[mycylinder, above=of A,fill=\\channelcolor!30] (B) {};\n",
        "\\node[mycylinder, above=of B,fill=\\channelcolor!10] (C) {};\n",
        " \\end{scope}\n",
        "     }\n",
        "  }\n",
        "}\n",
        "\\tikzset{%\n",
        " LinePE/.style={line width=\\Linewidth,draw=\\drawchannelcolor,fill=\\channelcolor!30},\n",
        " ellipsePE/.style={line width=\\Linewidth,draw=\\drawchannelcolor,ellipse,\n",
        " minimum width = 2.5mm, inner sep=2pt,minimum width=29,minimum height=40},\n",
        " pics/person/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\begin{scope}[local bounding box=PERSON1,\n",
        "scale=\\scalefac, every node/.append style={transform shape}]\n",
        "\\node[ellipsePE,fill=\\channelcolor!60](\\picname-EL1)at(0,0.44){};\n",
        "\\draw[LinePE](-0.6,0)to[out=210,in=85](-1.1,-1)\n",
        "to[out=270,in=180](-0.9,-1.2)to(0.9,-1.2)to[out=0,in=270](1.1,-1)\n",
        "to[out=85,in=325](0.6,0)to[out=250,in=290,distance=17](-0.6,0);\n",
        " \\end{scope}\n",
        "     }\n",
        "  }\n",
        "}\n",
        "\\tikzset{%\n",
        " LineDF/.style={line width=\\Linewidth,draw=\\drawchannelcolor,rounded corners=2pt},\n",
        " pics/dataFolder/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\begin{scope}[local bounding box=DATAFOLDER,scale=\\scalefac, every node/.append style={transform shape}]\n",
        "\\draw[LineDF,fill=\\channelcolor!20] (0,0) -- (-0.20,2.45)coordinate(\\picname-GL)--(0.7,2.45)--(0.9,2.1)-- (2.5,2.1)--(2.5,0)--cycle ;\n",
        "\\draw[LineDF,fill=\\channelcolor!50] (0,0)coordinate(\\picname-DL) -- (2.8,0) coordinate(\\picname-DD)-- (3,1.8) -- (0.2,1.8) -- cycle;\n",
        " \\end{scope}\n",
        "     }\n",
        "  }\n",
        "}\n",
        "\\tikzset{pics/graph/.style = {\n",
        "        code = {\n",
        "        \\pgfkeys{/channel/.cd, #1}\n",
        "\\begin{scope}[local bounding box=GRAPH,scale=\\scalefac, every node/.append style={transform shape}]\n",
        "\\draw[line width=2*\\Linewidth,draw = \\drawchannelcolor](-0.20,0)--(2,0);\n",
        "\\draw[line width=2*\\Linewidth,draw = \\drawchannelcolor](-0.20,0)--(-0.20,2);\n",
        "\\foreach \\i/\\vi in {0/10,0.5/17,1/9,1.5/5}{\n",
        "\\node[draw, minimum width  =4mm, minimum height = \\vi mm, inner sep = 0pt,\n",
        "      draw = \\channelcolor, fill=\\channelcolor!20, line width=\\Linewidth,anchor=south west](COM)at(\\i,0.2){};\n",
        "}\n",
        " \\end{scope}\n",
        "     }\n",
        "  }\n",
        "}\n",
        "\\pgfkeys{\n",
        "  /channel/.cd,\n",
        "  channelcolor/.store in=\\channelcolor,\n",
        "  drawchannelcolor/.store in=\\drawchannelcolor,\n",
        "  scalefac/.store in=\\scalefac,\n",
        "  Linewidth/.store in=\\Linewidth,\n",
        "  picname/.store in=\\picname,\n",
        "  channelcolor=BrownLine,\n",
        "  drawchannelcolor=BrownLine,\n",
        "  scalefac=1,\n",
        "  Linewidth=1.6pt,\n",
        "  picname=C\n",
        "}\n",
        "\n",
        "\\node[Box](B1){Scheduler};\n",
        "\\node[Box,right=of B1,fill=BlueL,draw=BlueLine](B2){Execulor};\n",
        "\\node[Box,above=1.6of B2,fill=RedL,draw=RedLine](B3){Worker};\n",
        "\\scoped[on background layer]\n",
        "\\node[Box,above=1.6 of B2,xshift=6mm,yshift=6mm,fill=RedL,draw=RedLine](B32){};\n",
        "\\scoped[on background layer]\n",
        "\\node[Box,above=1.6 of B2,xshift=3mm,yshift=3mm,fill=RedL,draw=RedLine](B31){};\n",
        "%Data folder\n",
        "\\begin{scope}[local bounding box=DATAFOLDER1,shift={($(B1)+(-0.7,-3.5)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\pic[shift={(0,0)}] at  (0,0){dataFolder={scalefac=0.5,picname=1,Linewidth=1.0pt,\n",
        "    channelcolor=BrownLine,drawchannelcolor=BrownLine}};\n",
        "\\end{scope}\n",
        "%Data\n",
        "\\begin{scope}[local bounding box=DATA1,shift={($(B1)+(0,2.0)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\pic[shift={(0,0)}] at  (0,0){data={scalefac=0.6,picname=1,channelcolor=BlueLine, Linewidth=0.75pt}};\n",
        " \\end{scope}\n",
        " %Person\n",
        "\\begin{scope}[local bounding box=PERSON1,shift={($(DATAFOLDER1)+(-5.75,0.2)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\pic[shift={(0,0)}] at  (0,0){person={scalefac=0.67,picname=1,drawchannelcolor=none,\n",
        "channelcolor=BrownLine, Linewidth=1.0pt}};\n",
        " \\end{scope}\n",
        " %Graph\n",
        "\\begin{scope}[local bounding box=GRAPH1,shift={($(PERSON1)+(-0.75,2.1)$)},\n",
        "scale=1, every node/.append style={transform shape}]\n",
        "\\pic[shift={(0,0)}] at  (0,0){graph={scalefac=0.7,picname=1,channelcolor=RedLine, Linewidth=0.7pt}};\n",
        " \\end{scope}\n",
        " %\n",
        "\\path[red](B3)-|coordinate(WB)(GRAPH);\n",
        "\\node[Box,fill=OliveL!30,draw=OliveLine](B4)at(WB){Webserver};\n",
        "\\draw[Line,-latex,shorten <=4pt,shorten >=4pt](PERSON1)--\n",
        "node[right,pos=0.35]{Monitors DAG runs\\\\ and results}(GRAPH1);\n",
        "\\draw[Line,-latex,shorten <=4pt,shorten >=30pt](PERSON1)--\n",
        "node[above,pos=0.4]{Writes  DAG}(PERSON1-|DATAFOLDER1);\n",
        "\\draw[Line,-latex,shorten <=4pt,shorten >=22pt](B4)--\n",
        "node[right,pos=0.3]{Visualizes runs and results}(B4|-GRAPH1);\n",
        "\\draw[Line,-latex,shorten <=4pt,shorten >=15pt](DATAFOLDER1)--\n",
        "node[right,pos=0.43]{Reads DAGs}(DATAFOLDER1|-B1);\n",
        "\\draw[Line,-latex,shorten <=2pt,shorten >=29pt](B1)--\n",
        "node[right,pos=0.25]{Tracks and syncs tasks}(B1|-DATA1);\n",
        "\\draw[Line,-latex,shorten <=4pt,shorten >=29pt](B3)--\n",
        "node[above,pos=0.33]{Stores results}(B3-|DATA1);\n",
        "\\draw[Line,latex-,shorten <=4pt,shorten >=26pt](B4)--\n",
        "node[above,pos=0.4]{Gets runs and  results}(B4-|DATA1);\n",
        "\\draw[Line,-latex,shorten <=3pt,shorten >=3pt](B1)--\n",
        "node[above,pos=0.5]{Schedules tasks}(B2);\n",
        "\\draw[Line,-latex,shorten <=3pt,shorten >=3pt](B2)--\n",
        "node[right,pos=0.5]{Assigns tasks}(B3);\n",
        "%\n",
        "\\node[above=3pt of DATA1]{\\textbf{Metadata database}};\n",
        "\\node[below=3pt of DATAFOLDER1]{\\textbf{DAG folder}};\n",
        "\\node[below=3pt of PERSON1]{\\textbf{Data engineer}};\n",
        "\\node[right=3pt of GRAPH1]{\\textbf{Airflow UI}};\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**Workflow Orchestration**: Data engineering and machine learning pipelines benefit from orchestration tools like Airflow, which automate task scheduling, distributed execution, and result monitoring for repeatable and scalable model training and deployment. Directed acyclic graphs (DAGs) define these workflows, enabling complex sequences of operations to be managed efficiently as part of a CI/CD system.\n",
        ":::\n",
        "\n",
        "## Major Frameworks {#sec-ai-frameworks-major-frameworks-1925}\n",
        "\n",
        "As we have seen earlier, machine learning frameworks are complicated. Over the years, several machine learning frameworks have emerged, each with its unique strengths and ecosystem, but few have remained as industry standards. Here we examine the mature and major players in the field, starting with a comprehensive look at TensorFlow, followed by PyTorch, JAX, and other notable frameworks.\n",
        "\n",
        "### TensorFlow Ecosystem {#sec-ai-frameworks-tensorflow-ecosystem-a821}\n",
        "\n",
        "TensorFlow was developed by the Google Brain team and was released as an open-source software library on November 9, 2015. It was designed for numerical computation using data flow graphs[^fn-data-flow] and has since become popular for a wide range of machine learning applications.\n",
        "\n",
        "[^fn-data-flow]: A data flow graph is a directed graph where nodes represent operations and edges represent data flowing between operations.\n",
        "\n",
        "TensorFlow is a training and inference framework that provides built-in functionality to handle everything from model creation and training to deployment, as shown in @fig-tensorflow-architecture. Since its initial development, the TensorFlow ecosystem has grown to include many different \"varieties\" of TensorFlow, each intended to allow users to support ML on different platforms.\n",
        "\n",
        "1.  [TensorFlow Core](https://www.tensorflow.org/tutorials): primary package that most developers engage with. It provides a comprehensive, flexible platform for defining, training, and deploying machine learning models. It includes [tf.keras](https://www.tensorflow.org/guide/keras) as its high-level API.\n",
        "\n",
        "2.  [TensorFlow Lite](https://www.tensorflow.org/lite): designed for deploying lightweight models on mobile, embedded, and edge devices. It offers tools to convert TensorFlow models to a more compact format suitable for limited-resource devices and provides optimized pre-trained models for mobile.\n",
        "\n",
        "3.  [TensorFlow Lite Micro](https://www.tensorflow.org/lite/microcontrollers): designed for running machine learning models on microcontrollers with minimal resources. It operates without the need for operating system support, standard C or C++ libraries, or dynamic memory allocation, using only a few kilobytes of memory.\n",
        "\n",
        "4.  [TensorFlow.js](https://www.tensorflow.org/js): JavaScript library that allows training and deployment of machine learning models directly in the browser or on Node.js. It also provides tools for porting pre-trained TensorFlow models to the browser-friendly format.\n",
        "\n",
        "5.  [TensorFlow on Edge Devices (Coral)](https://developers.googleblog.com/2019/03/introducing-coral-our-platform-for.html): platform of hardware components and software tools from Google that allows the execution of TensorFlow models on edge devices, leveraging Edge TPUs for acceleration.\n",
        "\n",
        "6.  [TensorFlow Federated (TFF)](https://www.tensorflow.org/federated): framework for machine learning and other computations on decentralized data. TFF facilitates federated learning,[^fn-fed-learn] allowing model training across many devices without centralizing the data.\n",
        "\n",
        "[^fn-fed-learn]: In federated learning, multiple entities (referred to as clients) train a model on their local datasets which ensures their data remains decentralized. This technique in ML is motivated by issues such as data privacy and data minimization. The assumption that the data is independently and identically distributed is no longer valid in federated learning which may cause biased local models.\n",
        "\n",
        "7.  [TensorFlow Graphics](https://www.tensorflow.org/graphics): library for using TensorFlow to carry out graphics-related tasks, including 3D shapes and point clouds processing, using deep learning.\n",
        "\n",
        "8.  [TensorFlow Hub](https://www.tensorflow.org/hub): repository of reusable machine learning model components to allow developers to reuse pre-trained model components, facilitating transfer learning and model composition.\n",
        "\n",
        "9.  [TensorFlow Serving](https://www.tensorflow.org/tfx/guide/serving): framework designed for serving and deploying machine learning models for inference in production environments. It provides tools for versioning and dynamically updating deployed models without service interruption.\n",
        "\n",
        "10. [TensorFlow Extended (TFX)](https://www.tensorflow.org/tfx): end-to-end platform designed to deploy and manage machine learning pipelines in production settings. TFX encompasses data validation, preprocessing, model training, validation, and serving components.\n",
        "\n",
        "::: {#fig-tensorflow-architecture fig-env=\"figure\" fig-pos=\"htb\"}\n",
        "```{.tikz}\n",
        "\\begin{tikzpicture}[font=\\usefont{T1}{phv}{m}{n}\\small]\n",
        "%\n",
        "\\tikzset{Line/.style={line width=1.0pt,black!50\n",
        "},\n",
        "  Box/.style={align=flush center,\n",
        "    inner xsep=4pt,\n",
        "    node distance=0.8,\n",
        "    draw=BlueLine,\n",
        "    line width=0.75pt,\n",
        "    fill=BlueL,,\n",
        "    minimum height=11mm\n",
        "  },\n",
        "}\n",
        "\n",
        "\\node[Box,text width=70mm,fill= BrownL,\n",
        "            draw= BrownLine](B1){\\textbf{Read \\& Preprocess Data}\\\\ tf.data, feature columns};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,below=of B1.south west,minimum width=20mm,\n",
        "             anchor=north west](B2){\\textbf{tf.keras}};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,below=of B1.south east,,minimum width=20mm,\n",
        "             anchor=north east](B3){\\textbf{Premade}\\\\\\textbf{Estimators}};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,\n",
        "              minimum width=20mm](B4)at($(B2.east)!0.5!(B3.west)$){\\textbf{TensorFlow}\\\\\\textbf{Hub}};\n",
        "%\n",
        "\\node[Box,text width=70mm,fill= BrownL,below=of B4,\n",
        "            draw= BrownLine](B5){\\textbf{Distribution Strategy}};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,below=of B5.south west,minimum width=18mm,\n",
        "             anchor=north west](B6){\\textbf{CPU}};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,below=of B5.south east,minimum width=18mm,\n",
        "             anchor=north east](B7){\\textbf{TPU}};\n",
        "\\node[Box,fill= BrownL,draw= BrownLine,minimum width=18mm](B8)at($(B6.east)!0.5!(B7.west)$){\\textbf{GPU}};\n",
        "%\n",
        "\\node[Box,fill= BlueL,draw= BlueLine,right=1.0 of $(B1.east)!0.5!(B7.east)$](B9){\\textbf{SavedMode}};\n",
        "%\n",
        "\\def\\di{4.35}\n",
        "\\node[Box,text width=50mm,fill= RedL,right=\\di of B1,\n",
        "            draw= RedLine](L1){\\textbf{TensorFlow Serving}\\\\ Cloud, on-prem};\n",
        "\\node[Box,text width=50mm,fill= RedL,right=\\di of B3,\n",
        "            draw= RedLine](L2){\\textbf{TensorFlow Lite}\\\\ Android, iOS, Raspberry Pi};\n",
        "\\node[Box,text width=50mm,fill= RedL,right=\\di of B5,\n",
        "            draw= RedLine](L3){\\textbf{TensorFlow.js}\\\\ Browser and Node Server};\n",
        "\\node[Box,text width=50mm,fill= RedL,right=\\di of B7,\n",
        "            draw= RedLine](L4){\\textbf{Other Language Bindings}\\\\ C, Java, Go, C\\#, Rust, R,\\ldots};\n",
        "%\n",
        "\\node[above=2mm of B1]{\\textbf{TRAINING}};\n",
        "\\node[above=2mm of L1]{\\textbf{DEPLOYMENT}};\n",
        "%\n",
        "\\draw[latex-,Line](B2)--(B1.south-|B2);\n",
        "\\draw[latex-,Line](B3)--(B1.south-|B3);\n",
        "\\draw[-latex,Line](B4)--(B2);\n",
        "\\draw[-latex,Line](B4)--(B3);\n",
        "\\draw[-latex,Line](B2)--(B5.north-|B2);\n",
        "\\draw[-latex,Line](B3)--(B5.north-|B3);\n",
        "\\draw[latex-,Line](B6)--(B5.south-|B6);\n",
        "\\draw[latex-,Line](B7)--(B5.south-|B7);\n",
        "\\draw[latex-,Line](B8)--(B5.south-|B8);\n",
        "\\draw[Line](B6)--++(270:1)-|(B7);\n",
        "\\draw[-latex,Line](B8)-++(270:1.35)-|(B9);\n",
        "\\foreach \\x in {1,2,3,4}\n",
        "\\draw[-latex,Line](B9.east)--(L\\x.west);\n",
        "\\end{tikzpicture}\n",
        "```\n",
        "**TensorFlow 2.0 Architecture**: This diagram outlines TensorFlowâs modular design, separating eager execution from graph construction for increased flexibility and ease of debugging. TensorFlow core provides foundational apis, while Keras serves as its high-level interface for simplified model building and training, supporting deployment across various platforms and hardware accelerators. Source: [TensorFlow.](HTTPS://blog.TensorFlow.org/2019/01/whats-coming-in-TensorFlow-2-0.HTML).\n",
        ":::\n",
        "\n",
        "### PyTorch {#sec-ai-frameworks-pytorch-8b56}\n",
        "\n",
        "PyTorch, developed by Facebook's AI Research lab, has gained significant traction in the machine learning community, particularly among researchers and academics. Its design philosophy emphasizes ease of use, flexibility, and dynamic computation, which aligns well with the iterative nature of research and experimentation.\n",
        "\n",
        "PyTorch's architecture lies its dynamic computational graph system. Unlike the static graphs used in earlier versions of TensorFlow, PyTorch builds the computational graph on-the-fly during execution. This approach, often referred to as \"define-by-run,\" allows for more intuitive model design and easier debugging that we discussed earlier. Moreover, developers can use standard Python control flow statements within their models, and the graph structure can change from iteration to iteration. This flexibility is particularly advantageous when working with variable-length inputs or complex, dynamic neural network architectures.\n",
        "\n",
        "PyTorch's eager execution mode is tightly coupled with its dynamic graph approach. Operations are executed immediately as they are called, rather than being deferred for later execution in a static graph. This immediate execution facilitates easier debugging and allows for more natural integration with Python's native debugging tools. The eager execution model aligns closely with PyTorch's imperative programming style, which many developers find more intuitive and Pythonic.\n",
        "\n",
        "PyTorch's fundamental data structure is the tensor, similar to TensorFlow and other frameworks discussed in earlier sections. PyTorch tensors are conceptually equivalent to multi-dimensional arrays and can be manipulated using a rich set of operations. The framework provides seamless integration with CUDA, much like TensorFlow, enabling efficient GPU acceleration for tensor computations. PyTorch's autograd system automatically tracks all operations performed on tensors, facilitating automatic differentiation for gradient-based optimization algorithms.\n",
        "\n",
        "### JAX {#sec-ai-frameworks-jax-ea57}\n",
        "\n",
        "JAX, developed by Google Research, is a newer entrant in the field of machine learning frameworks. Unlike TensorFlow and PyTorch, which were primarily designed for deep learning, JAX focuses on high-performance numerical computing and advanced machine learning research. Its design philosophy centers around functional programming principles and composition of transformations, offering a fresh perspective on building and optimizing machine learning systems.\n",
        "\n",
        "JAX is built as a NumPy-like library with added capabilities for automatic differentiation and just-in-time compilation. This foundation makes JAX feel familiar to researchers accustomed to scientific computing in Python, while providing powerful tools for optimization and acceleration. Where TensorFlow uses static computational graphs and PyTorch employs dynamic ones, JAX takes a different approach altogether, as it is a system for transforming numerical functions.\n",
        "\n",
        "One of JAX's key features is its powerful automatic differentiation system. Unlike TensorFlow's static graph approach or PyTorch's dynamic computation, JAX can differentiate native Python and NumPy functions, including those with loops, branches, and recursion. This capability extends beyond simple scalar-to-scalar functions, allowing for complex transformations like vectorization and JIT compilation. This flexibility is particularly valuable for researchers exploring novel machine learning techniques and architectures.\n",
        "\n",
        "JAX leverages XLA (Accelerated Linear Algebra) for just-in-time compilation, similar to TensorFlow but with a more central role in its operation. This allows JAX to optimize and compile Python code for various hardware accelerators, including GPUs and TPUs. In contrast to PyTorch's eager execution and TensorFlow's graph optimization, JAX's approach can lead to significant performance improvements, especially for complex computational patterns.\n",
        "\n",
        "Where TensorFlow and PyTorch primarily use object-oriented and imperative programming models, JAX embraces functional programming. This approach encourages the use of pure functions and immutable data, which can lead to more predictable and easier-to-optimize code. It's a significant departure from the stateful models common in other frameworks and can require a shift in thinking for developers accustomed to TensorFlow or PyTorch.\n",
        "\n",
        "JAX introduces a set of composable function transformations that set it apart from both TensorFlow and PyTorch. These include automatic differentiation (grad), just-in-time compilation, automatic vectorization (vmap), and parallel execution across multiple devices (pmap). These transformations can be composed, allowing for powerful and flexible operations that are not as straightforward in other frameworks.\n",
        "\n",
        "### Framework Comparison {#sec-ai-frameworks-framework-comparison-5439}\n",
        "\n",
        "@tbl-mlfm-comparison provides a concise comparison of three major machine learning frameworks: TensorFlow, PyTorch, and JAX. These frameworks, while serving similar purposes, exhibit fundamental differences in their design philosophies and technical implementations.\n",
        "\n",
        "| Aspect | TensorFlow | PyTorch | JAX |\n",
        "|:----------------|:--------------------|:----------------|:----------------|\n",
        "| Graph Type | Static (1.x), Dynamic (2.x) | Dynamic | Functional transformations |\n",
        "| Programming Model | Imperative (2.x), Symbolic (1.x) | Imperative | Functional |\n",
        "| Core Data Structure | Tensor (mutable) | Tensor (mutable) | Array (immutable) |\n",
        "| Execution Mode | Eager (2.x default), Graph | Eager | Just-in-time compilation |\n",
        "| Automatic Differentiation | Reverse mode | Reverse mode | Forward and Reverse mode |\n",
        "| Hardware Acceleration | CPU, GPU, TPU | CPU, GPU | CPU, GPU, TPU |\n",
        "\n",
        ": **Framework Characteristics**: TensorFlow, PyTorch, and JAX differ in their graph constructionâstatic, dynamic, or functionalâwhich influences programming style and execution speed. Core distinctions include data mutabilityâarrays in JAX are immutableâand automatic differentiation capabilities, with JAX supporting both forward and reverse modes. {#tbl-mlfm-comparison .hover .striped}\n",
        "\n",
        "## Framework Specialization {#sec-ai-frameworks-framework-specialization-acb6}\n",
        "\n",
        "Machine learning frameworks have evolved significantly to meet the diverse needs of different computational environments. As ML applications expand beyond traditional data centers to encompass edge devices, mobile platforms, and even tiny microcontrollers, the need for specialized frameworks has become increasingly apparent.\n",
        "\n",
        "Framework specialization refers to the process of tailoring ML frameworks to optimize performance, efficiency, and functionality for specific deployment environments. This specialization is crucial because the computational resources, power constraints, and use cases vary dramatically across different platforms.\n",
        "\n",
        "Machine learning frameworks have addressed interoperability challenges through standardized model formats, with the Open Neural Network Exchange (ONNX) emerging as a widely adopted solution. ONNX defines a common representation for neural network models that enables seamless translation between different frameworks and deployment environments.\n",
        "\n",
        "The ONNX format serves two primary purposes. First, it provides a framework-neutral specification for describing model architecture and parameters. Second, it includes runtime implementations that can execute these models across diverse hardware platforms. This standardization eliminates the need to manually convert or reimplement models when moving between frameworks.\n",
        "\n",
        "In practice, ONNX facilitates important workflow patterns in production machine learning systems. For example, a research team might develop and train a model using PyTorch's dynamic computation graphs, then export it to ONNX for deployment using TensorFlow's production-optimized serving infrastructure. Similarly, models can be converted to ONNX format for execution on edge devices using specialized runtimes like ONNX Runtime. This interoperability, illustrated in @fig-onnx, has become increasingly important as the machine learning ecosystem has expanded. Organizations frequently need to leverage different frameworks' strengths at various stages of the machine learning lifecycle, from research and development.\n",
        "\n",
        "![**Framework Interoperability**: The open neural network exchange (ONNX) format enables model portability across machine learning frameworks, allowing researchers to train models in one framework (e.g., PyTorch) and deploy them using another (e.g., TensorFlow) without code rewriting. This standardization streamlines machine learning workflows and facilitates leveraging specialized runtimes like ONNX runtime for diverse hardware platforms.](images/png/onnx_new.jpg){#fig-onnx fig-pos=\"htb\" width=\"80%\"}\n",
        "\n",
        "Machine learning deployment environments shape how frameworks specialize and evolve. Cloud ML environments leverage high-performance servers that offer abundant computational resources for complex operations. Edge ML operates on devices with moderate computing power, where real-time processing often takes priority. Mobile ML adapts to the varying capabilities and energy constraints of smartphones and tablets. Tiny ML functions within the strict limitations of microcontrollers and other highly constrained devices that possess minimal resources.\n",
        "\n",
        "Each of these environments presents unique challenges that influence framework design. Cloud frameworks prioritize scalability and distributed computing. Edge frameworks focus on low-latency inference and adaptability to diverse hardware. Mobile frameworks emphasize energy efficiency and integration with device-specific features. TinyML frameworks specialize in extreme resource optimization for severely constrained environments.\n",
        "\n",
        "In the following sections, we will explore how ML frameworks adapt to each of these environments. We will examine the specific techniques and design choices that enable frameworks to address the unique challenges of each domain, highlighting the trade-offs and optimizations that characterize framework specialization.\n",
        "\n",
        "### Cloud-Based Frameworks {#sec-ai-frameworks-cloudbased-frameworks-4f3f}\n",
        "\n",
        "Cloud ML frameworks are sophisticated software infrastructures designed to leverage the vast computational resources available in cloud environments. These frameworks specialize in three primary areas: distributed computing architectures, management of large-scale data and models, and integration with cloud-native services.\n",
        "\n",
        "Distributed computing is a fundamental specialization of cloud ML frameworks. These frameworks implement advanced strategies for partitioning and coordinating computational tasks across multiple machines or graphics processing units (GPUs). This capability is essential for training large-scale models on massive datasets. Both TensorFlow and PyTorch, two leading cloud ML frameworks, offer robust support for distributed computing. TensorFlow's graph-based approach (in its 1.x version) was particularly well-suited for distributed execution, while PyTorch's dynamic computational graph allows for more flexible distributed training strategies.\n",
        "\n",
        "The ability to handle large-scale data and models is another key specialization. Cloud ML frameworks are optimized to work with datasets and models that far exceed the capacity of single machines. This specialization is reflected in the data structures of these frameworks. For instance, both TensorFlow and PyTorch use mutable Tensor objects as their primary data structure, allowing for efficient in-place operations on large datasets. JAX, a more recent framework, uses immutable arrays, which can provide benefits in terms of functional programming paradigms and optimization opportunities in distributed settings.\n",
        "\n",
        "Integration with cloud-native services is the third major specialization area. This integration enables automated resource scaling, seamless access to cloud storage, and incorporation of cloud-based monitoring and logging systems. The execution modes of different frameworks play a role here. TensorFlow 2.x and PyTorch both default to eager execution, which allows for easier integration with cloud services and debugging. JAX's just-in-time compilation offers potential performance benefits in cloud environments by optimizing computations for specific hardware.\n",
        "\n",
        "Hardware acceleration is an important aspect of cloud ML frameworks. All major frameworks support CPU and GPU execution, with TensorFlow and JAX also offering native support for Google's TPU. [NVIDIA's TensorRT](https://developer.nvidia.com/tensorrt) is an optimization tool dedicated for GPU-based inference, providing sophisticated optimizations like layer fusion, precision calibration[^fn-frameworks-13], and kernel auto-tuning to maximize throughput on NVIDIA GPUs. These hardware acceleration options allow cloud ML frameworks to efficiently utilize the diverse computational resources available in cloud environments.\n",
        "\n",
        "[^fn-frameworks-13]: A process of adjusting computations to use reduced numerical precision, balancing performance improvements with acceptable losses in accuracy.\n",
        "\n",
        "The automatic differentiation capabilities of these frameworks are particularly important in cloud settings where complex models with millions of parameters are common. While TensorFlow and PyTorch primarily use reverse-mode differentiation, JAX's support for both forward and reverse-mode differentiation can offer advantages in certain large-scale optimization scenarios.\n",
        "\n",
        "These specializations enable cloud ML frameworks to fully utilize the scalability and computational power of cloud infrastructure. However, this capability comes with increased complexity in deployment and management, often requiring specialized knowledge to fully leverage these frameworks. The focus on scalability and integration makes cloud ML frameworks particularly suitable for large-scale research projects, enterprise-level ML applications, and scenarios requiring massive computational resources.\n",
        "\n",
        "### Edge-Based Frameworks {#sec-ai-frameworks-edgebased-frameworks-58dc}\n",
        "\n",
        "Edge ML frameworks are specialized software tools designed to facilitate machine learning operations in edge computing environments, characterized by proximity to data sources, stringent latency requirements, and limited computational resources. Examples of popular edge ML frameworks include [TensorFlow Lite](https://www.tensorflow.org/lite) and [Edge Impulse](https://www.edgeimpulse.com). The specialization of these frameworks addresses three primary challenges: real-time inference optimization, adaptation to heterogeneous hardware, and resource-constrained operation.\n",
        "\n",
        "Real-time inference optimization is a critical feature of edge ML frameworks. This often involves leveraging different execution modes and graph types. For instance, while TensorFlow Lite (the edge-focused version of TensorFlow) uses a static graph approach to optimize inference, frameworks like [PyTorch Mobile](https://pytorch.org/mobile/home/) maintain a dynamic graph capability, allowing for more flexible model structures at the cost of some performance. The choice between static and dynamic graphs in edge frameworks often is a trade-off between optimization potential and model flexibility.\n",
        "\n",
        "Adaptation to heterogeneous hardware is crucial for edge deployments. Edge ML frameworks extend the hardware acceleration capabilities of their cloud counterparts but with a focus on edge-specific hardware. For instance, TensorFlow Lite supports acceleration on mobile GPUs and edge TPUs, while frameworks like [ARM's Compute Library](https://developer.arm.com/solutions/machine-learning-on-arm/developer-material/how-to-guides) optimize for ARM-based processors. This specialization often involves custom operator implementations and low-level optimizations specific to edge hardware.\n",
        "\n",
        "Operating within resource constraints is another aspect of edge ML framework specialization. This is reflected in the data structures and execution models of these frameworks. For instance, many edge frameworks use quantized tensors as their primary data structure, representing values with reduced precision (e.g., 8-bit integers instead of 32-bit floats) to decrease memory usage and computational demands. The automatic differentiation capabilities, while crucial for training in cloud environments, are often stripped down or removed entirely in edge frameworks to reduce model size and improve inference speed.\n",
        "\n",
        "Edge ML frameworks also often include features for model versioning and updates, allowing for the deployment of new models with minimal system downtime. Some frameworks support limited on-device learning, enabling models to adapt to local data without compromising data privacy.\n",
        "\n",
        "The specializations of edge ML frameworks collectively enable high-per&shy;for&shy;mance inference in resource-constrained environments. This capability expands the potential applications of AI in areas with limited cloud connectivity or where real-time processing is crucial. However, effective utilization of these frameworks requires careful consideration of target hardware specifications and application-specific requirements, necessitating a balance between model accuracy and resource utilization.\n",
        "\n",
        "### Mobile-Based Frameworks {#sec-ai-frameworks-mobilebased-frameworks-9715}\n",
        "\n",
        "Mobile ML frameworks are specialized software tools designed for deploying and executing machine learning models on smartphones and tablets. Examples include TensorFlow Lite and [Apple's Core ML](https://developer.apple.com/documentation/coreml/). These frameworks address the unique challenges of mobile environments, including limited computational resources, constrained power consumption, and diverse hardware configurations. The specialization of mobile ML frameworks primarily focuses on on-device inference optimization, energy efficiency, and integration with mobile-specific hardware and sensors.\n",
        "\n",
        "On-device inference optimization in mobile ML frameworks often involves a careful balance between graph types and execution modes. For instance, TensorFlow Lite, also a popular mobile ML framework, uses a static graph approach to optimize inference performance. This contrasts with the dynamic graph capability of PyTorch Mobile, which offers more flexibility at the cost of some performance. The choice between static and dynamic graphs in mobile frameworks is a trade-off between optimization potential and model adaptability, crucial in the diverse and changing mobile environment.\n",
        "\n",
        "The data structures in mobile ML frameworks are optimized for efficient memory usage and computation. While cloud-based frameworks like TensorFlow and PyTorch use mutable tensors, mobile frameworks often employ more specialized data structures. For example, many mobile frameworks use quantized tensors, representing values with reduced precision (e.g., 8-bit integers instead of 32-bit floats) to decrease memory footprint and computational demands. This specialization is critical given the limited RAM and processing power of mobile devices.\n",
        "\n",
        "Energy efficiency, a paramount concern in mobile environments, influences the design of execution modes in mobile ML frameworks. Unlike cloud frameworks that may use eager execution for ease of development, mobile frameworks often prioritize graph-based execution for its potential energy savings. For instance, Apple's Core ML uses a compiled model approach, converting ML models into a form that can be efficiently executed by iOS devices, optimizing for both performance and energy consumption.\n",
        "\n",
        "Integration with mobile-specific hardware and sensors is another key specialization area. Mobile ML frameworks extend the hardware acceleration capabilities of their cloud counterparts but with a focus on mobile-specific processors. For example, TensorFlow Lite can leverage mobile GPUs and neural processing units (NPUs) found in many modern smartphones. Qualcomm's Neural Processing SDK is designed to efficiently utilize the AI accelerators present in Snapdragon SoCs. This hardware-specific optimization often involves custom operator implementations and low-level optimizations tailored for mobile processors.\n",
        "\n",
        "Automatic differentiation, while crucial for training in cloud environments, is often minimized or removed entirely in mobile frameworks to reduce model size and improve inference speed. Instead, mobile ML frameworks focus on efficient inference, with model updates typically performed off-device and then deployed to the mobile application.\n",
        "\n",
        "Mobile ML frameworks also often include features for model updating and versioning, allowing for the deployment of improved models without requiring full app updates. Some frameworks support limited on-device learning, enabling models to adapt to user behavior or environmental changes without compromising data privacy.\n",
        "\n",
        "The specializations of mobile ML frameworks collectively enable the deployment of sophisticated ML models on resource-constrained mobile devices. This expands the potential applications of AI in mobile environments, ranging from real-time image and speech recognition to personalized user experiences. However, effectively utilizing these frameworks requires careful consideration of the target device capabilities, user experience requirements, and privacy implications, necessitating a balance between model performance and resource utilization.\n",
        "\n",
        "### TinyML Frameworks {#sec-ai-frameworks-tinyml-frameworks-5ce5}\n",
        "\n",
        "TinyML frameworks are specialized software infrastructures designed for deploying machine learning models on extremely resource-constrained devices, typically microcontrollers and low-power embedded systems. These frameworks address the severe limitations in processing power, memory, and energy consumption characteristic of tiny devices. The specialization of TinyML frameworks primarily focuses on extreme model compression, optimizations for severely constrained environments, and integration with microcontroller-specific architectures.\n",
        "\n",
        "Extreme model compression in TinyML frameworks takes the quantization techniques mentioned in mobile and edge frameworks to their logical conclusion. While mobile frameworks might use 8-bit quantization, TinyML often employs even more aggressive techniques, such as 4-bit, 2-bit, or even 1-bit (binary) representations of model parameters. Frameworks like TensorFlow Lite Micro[^fn-tflm-sum] exemplify this approach [@david2021tensorflow], pushing the boundaries of model compression to fit within the kilobytes of memory available on microcontrollers.\n",
        "\n",
        "[^fn-tflm-sum]: In 2015, Google released TensorFlow which was primarily designed for the cloud. In response the need for embedded ML frameworks, they released TensorFlow Lite Micro in 2019.\n",
        "\n",
        "The execution model in TinyML frameworks is highly specialized. Unlike the dynamic graph capabilities seen in some cloud and mobile frameworks, TinyML frameworks almost exclusively use static, highly optimized graphs. The just-in-time compilation approach seen in frameworks like JAX is typically not feasible in TinyML due to memory constraints. Instead, these frameworks often employ ahead-of-time compilation techniques to generate highly optimized, device-specific code.\n",
        "\n",
        "Memory management in TinyML frameworks is far more constrained than in other environments. While edge and mobile frameworks might use dynamic memory allocation, TinyML frameworks like [uTensor](https://github.com/uTensor/uTensor) often rely on static memory allocation to avoid runtime overhead and fragmentation. This approach requires careful planning of the memory layout at compile time, a stark contrast to the more flexible memory management in cloud-based frameworks.\n",
        "\n",
        "Hardware integration in TinyML frameworks is highly specific to microcontroller architectures. Unlike the general GPU support seen in cloud frameworks or the mobile GPU/NPU support in mobile frameworks, TinyML frameworks often provide optimizations for specific microcontroller instruction sets. For example, ARM's CMSIS-NN [@lai2018cmsis] provides optimized neural network kernels for Cortex-M series microcontrollers, which are often integrated into TinyML frameworks.\n",
        "\n",
        "The concept of automatic differentiation, central to cloud-based frameworks and present to some degree in edge and mobile frameworks, is typically absent in TinyML frameworks. The focus is almost entirely on inference, with any learning or model updates usually performed off-device due to the severe computational constraints.\n",
        "\n",
        "TinyML frameworks also specialize in power management to a degree not seen in other ML environments. Features like duty cycling and ultra-low-power wake-up capabilities are often integrated directly into the ML pipeline, enabling always-on sensing applications that can run for years on small batteries.\n",
        "\n",
        "The extreme specialization of TinyML frameworks enables ML deployments in previously infeasible environments, from smart dust sensors to implantable medical devices. However, this specialization comes with significant trade-offs in model complexity and accuracy, requiring careful consideration of the balance between ML capabilities and the severe resource constraints of target devices.\n",
        "\n",
        "## Framework Selection {#sec-ai-frameworks-framework-selection-f745}\n",
        "\n",
        "Framework selection builds on our understanding of framework specialization across computing environments. Engineers must evaluate three interdependent factors when choosing a framework: model requirements, hardware constraints, and software dependencies. The TensorFlow ecosystem demonstrates how these factors shape framework design through its variants: TensorFlow, TensorFlow Lite, and TensorFlow Lite Micro.\n",
        "\n",
        "@tbl-tf-comparison illustrates key differences between TensorFlow variants. Each variant represents specific trade-offs between computational capability and resource requirements. These trade-offs manifest in supported operations, binary size, and integration requirements.\n",
        "\n",
        "| Model                | ![](images/png/TensorFlowLogo.png){height=6mm} | ![](images/png/TensorFlowLiteLogo.png){height=6mm}| ![](images/png/TensorFlowLiteMicroLogo.png){height=6mm} |\n",
        "|-------------------------------------|:---------------:|:---------------:|:---------------:|\n",
        "| Training                | Yes   | No     | No      |\n",
        "| Inference   | Yes   | Yes     | Yes     |\n",
        "|                 | (*but inefficient on edge*) | (*and efficient*) | (*and even **more** efficient*) |\n",
        "| How Many Ops                          | ~1400   | ~130    | ~50      |\n",
        "| Native Quantization Tooling + Support | No      | Yes     | Yes      |\n",
        "\n",
        ": **TensorFlow Variant Trade-Offs**: TensorFlow, TensorFlow lite, and TensorFlow lite micro represent a spectrum of design choices balancing model expressiveness, binary size, and resource constraints for diverse deployment scenarios. Supported operations decrease from approximately 1400 in full TensorFlow to 50 in TensorFlow lite micro, reflecting a shift from training capability to efficient inference on edge devices; native quantization tooling enables further optimization for resource-constrained environments. {#tbl-tf-comparison .striped .hover}\n",
        "\n",
        "Engineers analyze three primary aspects when selecting a framework:\n",
        "\n",
        "1.  Model requirements determine which operations and architectures the framework must support\n",
        "2.  Software dependencies define operating system and runtime requirements\n",
        "3.  Hardware constraints establish memory and processing limitations\n",
        "\n",
        "This systematic analysis enables engineers to select frameworks that align with their deployment requirements. As we examine the TensorFlow variants, we will explore how each aspect influences framework selection and shapes the capabilities of deployed machine learning systems.\n",
        "\n",
        "### Model Requirements {#sec-ai-frameworks-model-requirements-804d}\n",
        "\n",
        "Model architecture capabilities vary significantly across TensorFlow variants, with clear trade-offs between functionality and efficiency. @tbl-tf-comparison quantifies these differences across four key dimensions: training capability, inference efficiency, operation support, and quantization features.\n",
        "\n",
        "TensorFlow supports approximately 1,400 operations and enables both training and inference. However, as @tbl-tf-comparison indicates, its inference capabilities are inefficient for edge deployment. TensorFlow Lite reduces the operation count to roughly 130 operations while improving inference efficiency. It eliminates training support but adds native quantization tooling. TensorFlow Lite Micro further constrains the operation set to approximately 50 operations, achieving even higher inference efficiency through these constraints. Like TensorFlow Lite, it includes native quantization support but removes training capabilities.\n",
        "\n",
        "This progressive reduction in operations enables deployment on increasingly constrained devices. The addition of native quantization in both TensorFlow Lite and TensorFlow Lite Micro provides essential optimization capabilities absent in the full TensorFlow framework. Quantization transforms models to use lower precision operations, reducing computational and memory requirements for resource-constrained deployments.\n",
        "\n",
        "### Software Dependencies {#sec-ai-frameworks-software-dependencies-2abf}\n",
        "\n",
        "@tbl-tf-sw-comparison reveals three key software considerations that differentiate TensorFlow variants: operating system requirements, memory management capabilities, and accelerator support. These differences reflect each variant's optimization for specific deployment environments.\n",
        "\n",
        "| **Software**                | ![](images/png/TensorFlowLogo.png){height=6mm} | ![](images/png/TensorFlowLiteLogo.png){height=6mm}| ![](images/png/TensorFlowLiteMicroLogo.png){height=6mm} |\n",
        "|--------------------------------|:-------------------:|:-------------------:|:-------------------:|\n",
        "| **Needs an OS**                | Yes   | Yes     | No      |\n",
        "| **Memory Mapping of Models**   | No    | Yes     | Yes     |\n",
        "| **Delegation to accelerators** | Yes   | Yes     | No      |\n",
        "\n",
        ": **TensorFlow Variant Trade-Offs**: TensorFlow, TensorFlow lite, and TensorFlow lite micro offer different capabilities regarding operating system dependence, memory management, and hardware acceleration, reflecting design choices for diverse deployment scenarios. These distinctions enable developers to select the variant best suited for resource-constrained devices or full-scale server deployments, balancing functionality with efficiency. {#tbl-tf-sw-comparison .striped .hover}\n",
        "\n",
        "Operating system dependencies mark a fundamental distinction between variants. TensorFlow and TensorFlow Lite require an operating system, while TensorFlow Lite Micro operates without OS support. This enables TensorFlow Lite Micro to reduce memory overhead and startup time, though it can still integrate with real-time operating systems like FreeRTOS, Zephyr, and Mbed OS when needed.\n",
        "\n",
        "Memory management capabilities also distinguish the variants. TensorFlow Lite and TensorFlow Lite Micro support model memory mapping, enabling direct model access from flash storage rather than loading into RAM. TensorFlow lacks this capability, reflecting its design for environments with abundant memory resources. Memory mapping becomes increasingly important as deployment moves toward resource-constrained devices.\n",
        "\n",
        "Accelerator delegation capabilities further differentiate the variants. Both TensorFlow and TensorFlow Lite support delegation to accelerators, enabling efficient computation distribution. TensorFlow Lite Micro omits this feature, acknowledging the limited availability of specialized accelerators in embedded systems. This design choice maintains the framework's minimal footprint while matching typical embedded hardware configurations.\n",
        "\n",
        "### Hardware Constraints {#sec-ai-frameworks-hardware-constraints-0b70}\n",
        "\n",
        "@tbl-tf-hw-comparison quantifies the hardware requirements across TensorFlow variants through three metrics: base binary size, memory footprint, and processor architecture support. These metrics demonstrate the progressive optimization for constrained computing environments.\n",
        "\n",
        "| **Hardware**                | ![](images/png/TensorFlowLogo.png){height=6mm} | ![](images/png/TensorFlowLiteLogo.png){height=6mm}| ![](images/png/TensorFlowLiteMicroLogo.png){height=6mm} |\n",
        "|-----------------------------|:--------------:|:-------------------:|:-------------------------:|\n",
        "| **Base Binary Size**        | 3 MB+          | 100 KB              | ~10 KB                    |\n",
        "| **Base Memory Footprint**   | ~5 MB          | 300 KB              | 20 KB                     |\n",
        "| **Optimized Architectures** | X86, TPUs, GPUs| Arm Cortex A, x86   | Arm Cortex M, DSPs, MCUs  |\n",
        "\n",
        ": **TensorFlow Hardware Optimization**: TensorFlow variants exhibit decreasing resource requirementsâbinary size and memory footprintâas they target increasingly constrained hardware architectures, enabling deployment on devices ranging from servers to microcontrollers. Optimized architectures reflect this trend, shifting from general-purpose cpus and gpus to arm cortex-m processors and digital signal processors for resource-limited environments. {#tbl-tf-hw-comparison .striped .hover}\n",
        "\n",
        "Binary size requirements decrease significantly across variants. TensorFlow requires over 3 MB for its base binary, reflecting its comprehensive feature set. TensorFlow Lite reduces this to 100 KB by eliminating training capabilities and unused operations. TensorFlow Lite Micro achieves a remarkable 10 KB binary size through aggressive optimization and feature reduction.\n",
        "\n",
        "Memory footprint follows a similar pattern of reduction. TensorFlow requires approximately 5 MB of base memory, while TensorFlow Lite operates within 300 KB. TensorFlow Lite Micro further reduces memory requirements to 20 KB, enabling deployment on highly constrained devices.\n",
        "\n",
        "Processor architecture support aligns with each variant's intended deployment environment. TensorFlow supports x86 processors and accelerators including TPUs and GPUs, enabling high-performance computing in data centers. TensorFlow Lite targets mobile and edge processors, supporting Arm Cortex-A and x86 architectures. TensorFlow Lite Micro specializes in microcontroller deployment, supporting Arm Cortex-M cores, digital signal processors (DSPs), and various microcontroller units (MCUs) including STM32, NXP Kinetis, and Microchip AVR.\n",
        "\n",
        "### Additional Selection Factors {#sec-ai-frameworks-additional-selection-factors-e5de}\n",
        "\n",
        "Framework selection for embedded systems extends beyond technical specifications of model architecture, hardware requirements, and software dependencies. Additional factors affect development efficiency, maintenance requirements, and deployment success. These factors require systematic evaluation to ensure optimal framework selection.\n",
        "\n",
        "#### Performance Optimization {#sec-ai-frameworks-performance-optimization-c907}\n",
        "\n",
        "Performance in embedded systems encompasses multiple metrics beyond computational speed. Framework evaluation must consider:\n",
        "\n",
        "Inference latency determines system responsiveness and real-time processing capabilities. Memory utilization affects both static storage requirements and runtime efficiency. Power consumption impacts battery life and thermal management requirements. Frameworks must provide optimization tools for these metrics, including quantization, operator fusion, and hardware-specific acceleration.\n",
        "\n",
        "#### Deployment Scalability {#sec-ai-frameworks-deployment-scalability-d2a2}\n",
        "\n",
        "Scalability requirements span both technical capabilities and operational considerations. Framework support must extend across deployment scales and scenarios:\n",
        "\n",
        "Device scaling enables consistent deployment from microcontrollers to more powerful embedded processors. Operational scaling supports the transition from development prototypes to production deployments. Version management facilitates model updates and maintenance across deployed devices. The framework must maintain consistent performance characteristics throughout these scaling dimensions.\n",
        "\n",
        "## Summary {#sec-ai-frameworks-summary-859a}\n",
        "\n",
        "AI frameworks have evolved from basic numerical libraries into sophisticated software systems that shape how we develop and deploy machine learning applications. The progression from early numerical computing to modern deep learning frameworks demonstrates the field's rapid technological advancement.\n",
        "\n",
        "Modern frameworks like TensorFlow, PyTorch, and JAX implement distinct approaches to common challenges in machine learning development. Each framework offers varying tradeoffs between ease of use, performance, and flexibility. TensorFlow emphasizes production deployment, PyTorch focuses on research and experimentation, while JAX prioritizes functional programming patterns.\n",
        "\n",
        "The specialization of frameworks into cloud, edge, mobile, and Tiny ML implementations reflects the diverse requirements of machine learning applications. Cloud frameworks optimize for scalability and distributed computing. Edge and mobile frameworks prioritize model efficiency and reduced resource consumption. TinyML frameworks target constrained environments with minimal computing resources.\n",
        "\n",
        "Understanding framework architecture, from tensor operations to execution models, enables developers to select appropriate tools for specific use cases, optimize application performance, debug complex computational graphs, and deploy models across different computing environments.\n",
        "\n",
        "The continuing evolution of AI frameworks will likely focus on improving developer productivity, hardware acceleration, and deployment flexibility. These advancements will shape how machine learning systems are built and deployed across increasingly diverse computing environments."
      ],
      "id": "c77ef78c"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Zeljko\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}