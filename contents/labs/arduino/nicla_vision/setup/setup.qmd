---
bibliography: setup.bib
---

# Setup {.unnumbered}

![*DALL·E 3 Prompt: Illustration reminiscent of a 1950s cartoon where the Arduino NICLA VISION board, equipped with various sensors including a camera, is the focal point on an old-fashioned desk. In the background, a computer screen with rounded edges displays the Arduino IDE. The code is related to LED configurations and machine learning voice command detection. Outputs on the Serial Monitor explicitly display the words 'yes' and 'no'.*](images/jpg/nicla_sys_ini.jpg)

## Overview {#sec-setup-overview-c549}

The [Arduino Nicla Vision](https://docs.arduino.cc/hardware/nicla-vision) (sometimes called *NiclaV*) is a development board that includes two processors that can run tasks in parallel. It is part of a family of development boards with the same form factor but designed for specific tasks, such as the [Nicla Sense ME](https://www.bosch-sensortec.com/software-tools/tools/arduino-nicla-sense-me/) and the [Nicla Voice](https://store-usa.arduino.cc/products/nicla-voice?_gl=1*l3abc6*_ga*MTQ3NzE4Mjk4Mi4xNjQwMDIwOTk5*_ga_NEXN8H46L5*MTY5NjM0Mzk1My4xMDIuMS4xNjk2MzQ0MjQ1LjAuMC4w). The *Niclas* can efficiently run processes created with TensorFlow Lite. For example, one of the cores of the NiclaV runs a computer vision algorithm on the fly (inference). At the same time, the other executes low-level operations like controlling a motor and communicating or acting as a user interface. The onboard wireless module allows the simultaneous management of WiFi and Bluetooth Low Energy (BLE) connectivity.

\noindent
![](images/png/nicla-1.png){width="70%" fig-align="center"}

## Hardware {#sec-setup-hardware-0767}

### Two Parallel Cores {#sec-setup-two-parallel-cores-674a}

The central processor is the dual-core [STM32H747,](https://content.arduino.cc/assets/Arduino-Portenta-H7_Datasheet_stm32h747xi.pdf?_gl=1*6quciu*_ga*MTQ3NzE4Mjk4Mi4xNjQwMDIwOTk5*_ga_NEXN8H46L5*MTY0NzQ0NTg1My4xMS4xLjE2NDc0NDYzMzkuMA..) including a Cortex M7 at 480 MHz and a Cortex M4 at 240 MHz. The two cores communicate via a Remote Procedure Call mechanism that seamlessly allows calling functions on the other processor. Both processors share all the on-chip peripherals and can run:

- Arduino sketches on top of the Arm Mbed OS

- Native Mbed applications

- MicroPython / JavaScript via an interpreter

- TensorFlow Lite

\noindent
![](./images/png/image-20250409101745233.png){width="80%" fig-align="center"}

### Memory {#sec-setup-memory-59c6}

Memory is crucial for embedded machine learning projects. The NiclaV board can host up to 16 MB of QSPI Flash for storage. However, it is essential to consider that the MCU SRAM is the one to be used with machine learning inferences; the STM32H747 is only 1 MB, shared by both processors. This MCU also has incorporated 2 MB of FLASH, mainly for code storage.

### Sensors {#sec-setup-sensors-3d8a}

- **Camera**: A GC2145 2 MP Color CMOS Camera.

- **Microphone**: The `MP34DT05` is an ultra-compact, low-power, omnidirectional, digital MEMS microphone built with a capacitive sensing element and the IC interface.

- **6-Axis IMU**: 3D gyroscope and 3D accelerometer data from the `LSM6DSOX` 6-axis IMU.

- **Time of Flight Sensor**: The `VL53L1CBV0FY` Time-of-Flight sensor adds accurate and low-power-ranging capabilities to Nicla Vision. The invisible near-infrared VCSEL laser (including the analog driver) is encapsulated with receiving optics in an all-in-one small module below the camera.

## Arduino IDE Installation {#sec-setup-arduino-ide-installation-5569}

Start connecting the board (*micro USB*) to your computer:

\noindent
![](./images/png/image-20250409102015282.png){width="70%" fig-align="center"}

Install the Mbed OS core for Nicla boards in the Arduino IDE. Having the IDE open, navigate to `Tools > Board > Board Manager`, look for Arduino Nicla Vision on the search window, and install the board.

\noindent
![](./images/png/image-20250409102257291.png){width="80%" fig-align="center"}

Next, go to `Tools > Board > Arduino Mbed OS Nicla Boards` and select `Arduino Nicla Vision`. Having your board connected to the USB, you should see the Nicla on Port and select it.

> Open the Blink sketch on Examples/Basic and run it using the IDE Upload button. You should see the Built-in LED (green RGB) blinking, which means the Nicla board is correctly installed and functional!

### Testing the Microphone {#sec-setup-testing-microphone-ca66}

On Arduino IDE, go to `Examples > PDM > PDMSerialPlotter`, open it, and run the sketch. Open the Plotter and see the audio representation from the microphone:

\noindent
![](./images/png/image-20250409102641908.png){width="80%" fig-align="center"}

> Vary the frequency of the sound you generate and confirm that the mic is working correctly.

### Testing the IMU {#sec-setup-testing-imu-df6d}

Before testing the IMU, it will be necessary to install the LSM6DSOX library. To do so, go to Library Manager and look for LSM6DSOX. Install the library provided by Arduino:

\noindent
![](./images/png/image-20250409102416745.png){width="95%" fig-align="center"}

Next, go to `Examples > Arduino_LSM6DSOX > SimpleAccelerometer` and run the accelerometer test (you can also run Gyro and board temperature):

\clearpage
\noindent
![](./images/png/image-20250409102531451.png){width="70%" fig-pos="htb" fig-align="center"}

### Testing the ToF (Time of Flight) Sensor {#sec-setup-testing-tof-time-flight-sensor-7c8e}

As we did with IMU, installing the VL53L1X ToF library is necessary. To do that, go to Library Manager and look for VL53L1X. Install the library provided by Pololu:

\noindent
![](./images/png/image-20250409102838852.png){width="80%" fig-align="center"}

Next, run the sketch [proximity_detection.ino](https://github.com/Mjrovai/Arduino_Nicla_Vision/blob/main/Arduino-IDE/proximity_detection/proximity_detection.ino):

\noindent
![](./images/png/image-20250409102943336.png){width="70%" fig-align="center"}

On the Serial Monitor, you will see the distance from the camera to an object in front of it (max of 4 m).

\noindent
![](images/jpg/image13.jpg){width="70%" fig-align="center"}

### Testing the Camera {#sec-setup-testing-camera-8ca3}

We can also test the camera using, for example, the code provided on `Examples > Camera > CameraCaptureRawBytes`. We cannot see the image directly, but we can get the raw image data generated by the camera.

We can use the [`Web Serial Camera`](https://labs.arduino.cc/en/labs/web-serial-camera)  ([API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API)) to see the image generated by the camera. This web application streams the camera image over Web Serial from camera-equipped Arduino boards.

The Web Serial Camera example shows you how to send image data over the wire from your Arduino board and how to unpack the data in JavaScript for rendering. In addition, in the [source code](https://github.com/arduino/ArduinoCore-mbed/tree/main/libraries/Camera/extras/WebSerialCamera) of the web application, we can find some example image filters that show us how to manipulate pixel data to achieve visual effects.

The **Arduino sketch** (CameraCaptureWebSerial) for sending the camera image data can be found [here](https://github.com/arduino/ArduinoCore-mbed/tree/main/libraries/Camera/examples/CameraCaptureWebSerial) and is also directly available from the “`Examples→Camera`” menu in the Arduino IDE when selecting the Nicla board.

The **web application** for displaying the camera image can be accessed [here](https://arduino.github.io/labs-pages/web-serial-camera/). We may also look at [this tutorial, which explains the setup in more detail.

\noindent
![](./images/png/image-20250409111811623.png){width="70%" fig-align="center"}

## Installing the OpenMV IDE {#sec-setup-installing-openmv-ide-d391}

OpenMV IDE is the premier integrated development environment with OpenMV cameras, similar to the Nicla Vision. It features a powerful text editor, debug terminal, and frame buffer viewer with a histogram display. We will use MicroPython to program the camera.

Go to the [OpenMV IDE page](https://openmv.io/pages/download), download the correct version for your Operating System, and follow the instructions for its installation on your computer.

\noindent
![](./images/png/image-20250409103159216.png){width="70%" fig-align="center"}

The IDE should open, defaulting to the helloworld_1.py code on its Code Area. If not, you can open it from `Files > Examples > HelloWord > helloword.py`

\noindent
![](./images/png/image-20250409104108038.png){width="75%" fig-align="center"}

Any messages sent through a serial connection (using print() or error messages) will be displayed on the **Serial Terminal** during run time. The image captured by a camera will be displayed in the **Camera Viewer** Area (or Frame Buffer) and in the Histogram area, immediately below the Camera Viewer.

#### Updating the Bootloader {#sec-setup-updating-bootloader-04f8}

Before connecting the Nicla to the OpenMV IDE, ensure you have the latest bootloader version. Go to your Arduino IDE, select the Nicla board, and open the sketch on `Examples > STM_32H747_System STM32H747_manageBootloader`. Upload the code to your board. The Serial Monitor will guide you.

#### Installing the Firmware {#sec-setup-installing-firmware-9cad}

**After updating the bootloader**, put the Nicla Vision in bootloader mode by double-pressing the reset button on the board. The built-in green LED will start fading in and out. Now return to the OpenMV IDE and click on the connect icon (Left ToolBar):

\noindent
![](images/jpg/image23.jpg){width="65%" fig-align="center"}

A pop-up will tell you that a board in DFU mode was detected and ask how you would like to proceed. First, select `Install the latest release firmware (vX.Y.Z)`. This action will install the latest OpenMV firmware on the Nicla Vision.

\noindent
![](./images/png/image-20250409103401388.png){width="65%" fig-align="center"}

You can leave the option `Erase internal file system` unselected and click `[OK]`.

Nicla's green LED will start flashing while the OpenMV firmware is uploaded to the board, and a terminal window will then open, showing the flashing progress.

\noindent
![](./images/png/image-20250409103828014.png){width="70%" fig-align="center"}

Wait until the green LED stops flashing and fading. When the process ends, you will see a message saying, "DFU firmware update complete!". Press `[OK]`.

\noindent
![](./images/png/image-20250409103900709.png){width="45%" fig-align="center"}

A green play button appears when the Nicla Vison connects to the Tool Bar.

\noindent
![](images/jpg/image18.jpg){width="70%" fig-align="center"}

Also, note that a drive named "NO NAME" will appear on your computer.

\noindent
![](./images/png/image-20250409104030018.png){width="80%" fig-align="center"}

Every time you press the `[RESET]` button on the board, the main.py script stored on it automatically executes. You can load the [main.py](https://github.com/Mjrovai/Arduino_Nicla_Vision/blob/main/Micropython/main.py) code on the IDE (`File > Open File...`).

\noindent
![](images/png/image16.png){width="70%" fig-align="center"}

> This code is the "Blink" code, confirming that the HW is OK.

#### Testing the Camera {#sec-setup-testing-camera-276c}

To test the camera, let's run *helloword_1.py*. For that, select the script on `File > Examples > HelloWorld > helloword.py`,

When clicking the green play button, the MicroPython script (*hellowolrd.py*) on the Code Area will be uploaded and run on the Nicla Vision. On-Camera Viewer, you will start to see the video streaming. The Serial Monitor will show us the FPS (Frames per second), which should be around 27fps.

\noindent
![](./images/png/image-20250409104755106.png){width="80%" fig-align="center"}

Here is the `helloworld.py` script:

``` python
import sensor, time

sensor.reset()                      # Reset and initialize
                                    # the sensor.
sensor.set_pixformat(sensor.RGB565) # Set pixel format to RGB565
                                    # (or GRAYSCALE)
sensor.set_framesize(sensor.QVGA)   # Set frame size to
                                    # QVGA (320x240)
sensor.skip_frames(time = 2000)     # Wait for settings take
                                    # effect.
clock = time.clock()                # Create a clock object
                                    # to track the FPS.

while(True):
    clock.tick()                    # Update the FPS clock.
    img = sensor.snapshot()         # Take a picture and return
                                    # the image.
    print(clock.fps())
```

In [GitHub](https://github.com/Mjrovai/Arduino_Nicla_Vision), you can find the Python scripts used here.

The code can be split into two parts:

- **Setup**: Where the libraries are imported, initialized and the variables are defined and initiated.

- **Loop**: (while loop) part of the code that runs continually. The image (*img* variable) is captured (one frame). Each of those frames can be used for inference in Machine Learning Applications.

To interrupt the program execution, press the red `[X]` button.

> Note: OpenMV Cam runs about half as fast when connected to the IDE. The FPS should increase once disconnected.

In the [GitHub](https://github.com/Mjrovai/Arduino_Nicla_Vision/tree/main/Micropython), You can find other Python scripts. Try to test the onboard sensors.

## Connecting the Nicla Vision to Edge Impulse Studio {#sec-setup-connecting-nicla-vision-edge-impulse-studio-c7b1}

We will need the Edge Impulse Studio later in other labs. [Edge Impulse](https://www.edgeimpulse.com/) is a leading development platform for machine learning on edge devices.

Edge Impulse officially supports the Nicla Vision. So, to start, please create a new project on the Studio and connect the Nicla to it. For that, follow the steps:

- Download the [Arduino CLI](https://arduino.github.io/arduino-cli/1.2/installation/) for your specific computer architecture (OS)
- Download the most updated [EI Firmware](https://cdn.edgeimpulse.com/firmware/arduino-nicla-vision.zip).
- Unzip both files and place all the files in the same folder.
- Put the Nicla-Vision on Boot Mode, pressing the reset button twice.
- Run the uploader (EI FW) corresponding to your OS:

\noindent
![](./images/png/image-20250409105305899.png){width="75%" fig-align="center"}

- Executing the specific batch code for your OS will upload the binary *arduino-nicla-vision.bin* to your board.

> Using `Chrome`, WebUSB can be used to connect the Nicla to the EI Studio. **The EI CLI is not needed.**

Go to your project on the Studio, and on the `Data Acquisition tab`, select `WebUSB` (1). A window will pop up; choose the option that shows that the `Nicla is paired` (2) and press `[Connect]` (3).

\noindent
![](./images/png/image-20250409105410404.png){width="75%" fig-align="center"}

You can choose which sensor data to pick in the Collect Data section on the Data Acquisition tab.

\noindent
![](./images/png/image-20250409105512940.png){width="75%" fig-align="center"}

For example. `IMU data (inercial)`:

\noindent
![](./images/png/image-20250409105557518.png){width="75%" fig-align="center"}

Or Image (`Camera`):

\noindent
![](./images/png/image-20250409105630839.png){width="75%" fig-align="center"}

You can also test an external sensor connected to the `ADC` (Nicla pin 0) and the other onboard sensors, such as the `built-in microphone`, the `ToF (Proximity)` or a combination of sensors (`fusion`).

## Expanding the Nicla Vision Board (optional) {#sec-setup-expanding-nicla-vision-board-optional-1058}

A last item to explore is that sometimes, during prototyping, it is essential to experiment with external sensors and devices. An excellent expansion to the Nicla is the [Arduino MKR Connector Carrier (Grove compatible)](https://store-usa.arduino.cc/products/arduino-mkr-connector-carrier-grove-compatible).

The shield has 14 Grove connectors: five single analog inputs (A0-A5), one double analog input (A5/A6), five single digital I/Os (D0-D4), one double digital I/O (D5/D6), one I2C (TWI), and one UART (Serial). All connectors are 5V compatible.

> Note that all 17 Nicla Vision pins will be connected to the Shield Groves, but some Grove connections remain disconnected.

\noindent
![](images/jpg/image20.jpg){width="45%" fig-align="center"}

This shield is MKR compatible and can be used with the Nicla Vision and Portenta.

\noindent
![](images/jpg/image26.jpg){width="55%" fig-align="center"}

For example, suppose that on a TinyML project, you want to send inference results using a LoRaWAN device and add information about local luminosity. Often, with offline operations, a local low-power display such as an OLED is advised. This setup can be seen here:

\noindent
![](images/jpg/image11.jpg){width="70%" fig-align="center"}

The [Grove Light Sensor](https://wiki.seeedstudio.com/Grove-Light_Sensor/) would be connected to one of the single Analog pins (A0/PC4), the [LoRaWAN device](https://wiki.seeedstudio.com/Grove_LoRa_E5_New_Version/) to the UART, and the [OLED](https://wiki.seeedstudio.com/Grove-OLED-Display-0.96-SSD1315/) to the I2C connector.

The Nicla Pins 3 (Tx) and 4 (Rx) are connected with the Serial Shield connector. The UART communication is used with the LoRaWan device. Here is a simple code to use the UART:

``` python
# UART Test - By: marcelo_rovai - Sat Sep 23 2023

import time
from pyb import UART
from pyb import LED

redLED = LED(1) # built-in red LED

# Init UART object.
# Nicla Vision's UART (TX/RX pins) is on "LP1"
uart = UART("LP1", 9600)

while(True):
    uart.write("Hello World!\r\n")
    redLED.toggle()
    time.sleep_ms(1000)
```

To verify that the UART is working, you should, for example, connect another device as the Arduino UNO, displaying "Hello Word" on the Serial Monitor. Here is the [code](https://github.com/Mjrovai/Arduino_Nicla_Vision/blob/main/Arduino-IDE/teste_uart_UNO/teste_uart_UNO.ino).

\noindent
![](images/jpg/image24.jpg){width="50%" fig-align="center"}

Below is the *Hello World code* to be used with the I2C OLED. The MicroPython SSD1306 OLED driver (ssd1306.py), created by Adafruit, should also be uploaded to the Nicla (the ssd1306.py script can be found in [GitHub](https://github.com/Mjrovai/Arduino_Nicla_Vision/blob/main/Micropython/ssd1306.py)).

``` python
# Nicla_OLED_Hello_World - By: marcelo_rovai - Sat Sep 30 2023

#Save on device: MicroPython SSD1306 OLED driver,
# I2C and SPI interfaces created by Adafruit
import ssd1306

from machine import I2C
i2c = I2C(1)

oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)

oled.text('Hello, World', 10, 10)
oled.show()
```

Finally, here is a simple script to read the ADC value on pin "PC4" (Nicla pin A0):

``` python

# Light Sensor (A0) - By: marcelo_rovai - Wed Oct 4 2023

import pyb
from time import sleep

adc = pyb.ADC(pyb.Pin("PC4"))   # create an analog object
                                # from a pin
val = adc.read()                # read an analog value

while (True):

    val = adc.read()
    print ("Light={}".format (val))
    sleep (1)
```

The ADC can be used for other sensor variables, such as [Temperature](https://wiki.seeedstudio.com/Grove-Temperature_Sensor_V1.2/).

> Note that the above scripts ([downloaded from Github](https://github.com/Mjrovai/Arduino_Nicla_Vision/tree/main/Micropython)) introduce only how to connect external devices with the Nicla Vision board using MicroPython.

## Conclusion {#sec-setup-conclusion-9415}

The Arduino Nicla Vision is an excellent *tiny device* for industrial and professional uses! However, it is powerful, trustworthy, low power, and has suitable sensors for the most common embedded machine learning applications such as vision, movement, sensor fusion, and sound.

> On the [GitHub repository,](https://github.com/Mjrovai/Arduino_Nicla_Vision/tree/main) you will find the last version of all the code used or commented on in this hands-on lab.

## Resources {#sec-setup-resources-dde0}

- [Micropython codes](https://github.com/Mjrovai/Arduino_Nicla_Vision/tree/main/Micropython)

- [Arduino Codes](https://github.com/Mjrovai/Arduino_Nicla_Vision/tree/main/Arduino-IDE)
