name: 'Update Changelog'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

on:
  workflow_call:
  workflow_dispatch:

jobs:
  update-changelog:
    name: 📝 Update Changelog
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for changelog generation
      
      - name: 🔄 Fetch all branches
        run: |
          # Fetch all branches
          git fetch --all --tags --force
          
          # Explicitly fetch the branches needed for changelog generation
          git fetch origin gh-pages:refs/remotes/origin/gh-pages || echo "No gh-pages branch found yet"
          git fetch origin dev:refs/remotes/origin/dev || echo "No dev branch found"
          
          # Show branches for debugging
          echo "Available branches:"
          git branch -a
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Ensure pip cache directory exists
        run: |
          mkdir -p ~/.cache/pip
          echo "Created pip cache directory at ~/.cache/pip"

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: 🔍 Find changelog script
        id: find-script
        run: |
          # Check potential script locations
          if [ -f ".github/scripts/update_changelog.py" ]; then
            echo "script_path=.github/scripts/update_changelog.py" >> $GITHUB_OUTPUT
            echo "Found script at .github/scripts/update_changelog.py"
          elif [ -f "scripts/update-changelog.py" ]; then
            echo "script_path=scripts/update-changelog.py" >> $GITHUB_OUTPUT
            echo "Found script at scripts/update-changelog.py"
          elif [ -f "scripts/update_changelog.py" ]; then
            echo "script_path=scripts/update_changelog.py" >> $GITHUB_OUTPUT
            echo "Found script at scripts/update_changelog.py"
          else
            echo "Error: Could not find changelog update script"
            find . -name "*.py" | grep -i changelog
            exit 1
          fi
      
      - name: 🔄 Run Changelog Update
        id: update
        run: |
          # Make changelog script executable
          chmod +x ${{ steps.find-script.outputs.script_path }}
          
          # Run update script
          python3 ${{ steps.find-script.outputs.script_path }}
          
          # Check for changes
          if [ -n "$(git status --porcelain CHANGELOG.md)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "Changes detected in CHANGELOG.md"
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "No changes to CHANGELOG.md"
          fi
            
      - name: 💾 Commit & Push Changes
        if: steps.update.outputs.changes_made == 'true'
        run: |
          # Determine the correct branch to push to
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # For pull requests
          if [ -n "$GITHUB_HEAD_REF" ]; then
            TARGET_BRANCH=$GITHUB_HEAD_REF
          # For direct pushes
          else
            TARGET_BRANCH=$CURRENT_BRANCH
          fi
          
          echo "Committing changes to branch: $TARGET_BRANCH"
          
          # Try to pull first to integrate any remote changes
          git pull --rebase origin $TARGET_BRANCH || echo "Could not pull latest changes, continuing anyway"
          
          git add CHANGELOG.md
          git commit -m "🤖 Auto-update changelog [skip ci]"
          
          # Try pushing up to 3 times with exponential backoff
          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" != "true" ]; do
            echo "Push attempt $ATTEMPT of $MAX_ATTEMPTS"
            if git push origin HEAD:$TARGET_BRANCH; then
              SUCCESS=true
              echo "Push successful!"
            else
              SLEEP_TIME=$(( 2 ** $ATTEMPT ))
              echo "Push failed. Retrying in $SLEEP_TIME seconds..."
              sleep $SLEEP_TIME
              # Pull again before retry
              git pull --rebase origin $TARGET_BRANCH || echo "Could not pull latest changes before retry"
              ATTEMPT=$(( ATTEMPT + 1 ))
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "Failed to push changes after $MAX_ATTEMPTS attempts"
            exit 1
          fi