name: '💯 Validate Dev'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7
  # Centralized Container Configuration - Single Source of Truth
  CONTAINER_REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  CONTAINER_TAG: ${{ inputs.container_tag || 'latest' }}
  LINUX_CONTAINER_NAME: ${{ inputs.linux_container_name || 'quarto-linux' }}
  WINDOWS_CONTAINER_NAME: ${{ inputs.windows_container_name || 'quarto-windows' }}
  # Computed full image names
  LINUX_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.linux_container_name || 'quarto-linux' }}:${{ inputs.container_tag || 'latest' }}
  WINDOWS_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.windows_container_name || 'quarto-windows' }}:${{ inputs.container_tag || 'latest' }}

# Cancel duplicate builds on same branch
concurrency:
  group: enhanced-manager-${{ github.ref }}
  cancel-in-progress: true

# Development validation with smart container handling
# Triggers automatically on dev branch pushes
# Can be tested manually from any branch using workflow_dispatch
on:
  # DISABLED: Auto-trigger while working on containers
  # push:
  #   branches: [dev]  # 🚀 Auto-trigger for dev branch validation
  workflow_dispatch:  # 🚦 Manual trigger for testing
    inputs:
      force_container_rebuild:
        description: 'Force container rebuild even if up-to-date'
        required: false
        default: false
        type: boolean
      no_cache:
        description: 'Disable Docker build cache (fresh container builds)'
        required: false
        default: false
        type: boolean
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      build_format:
        description: 'Format to build for testing'
        required: false
        default: 'html'
        type: choice
        options:
          - html
          - pdf
          - all
      build_os:
        description: 'Operating systems to build on'
        required: false
        default: 'linux'
        type: choice
        options:
          - linux
          - windows
          - both
      use_containers:
        description: 'Use pre-built containers for faster builds'
        required: false
        default: false
        type: boolean
      linux_container_name:
        description: 'Linux container image name'
        required: false
        default: 'quarto-linux'
        type: string
      windows_container_name:
        description: 'Windows container image name'
        required: false
        default: 'quarto-windows'
        type: string
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to use'
        required: false
        default: 'latest'
        type: string
  workflow_call:  # 📞 Called by publish-live workflow
    inputs:
      build_format:
        required: false
        type: string
        default: 'all'
        description: 'Format to build (html/pdf/all)'
      build_os:
        required: false
        type: string
        default: 'linux'
        description: 'Operating systems to build on (linux/windows/both)'
      use_containers:
        required: false
        type: boolean
        default: true
        description: 'Use pre-built containers for faster builds'
      test_branch:
        required: false
        type: string
        default: ''
        description: 'Branch to test (empty for current branch)'
      force_container_rebuild:
        required: false
        type: boolean
        default: false
        description: 'Force container rebuild even if up-to-date'
      no_cache:
        required: false
        type: boolean
        default: false
        description: 'Disable Docker build cache (fresh container builds)'
      linux_container_name:
        required: false
        type: string
        default: 'quarto-linux'
        description: 'Linux container image name'
      windows_container_name:
        required: false
        type: string
        default: 'quarto-windows'
        description: 'Windows container image name'
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to use'

jobs:
  # Step 1: Pre-commit checks
  pre-commit:
    name: 🔍 Pre-commit Checks
    runs-on: ubuntu-latest
    outputs:
      linux-container-available: ${{ steps.check.outputs.linux-available }}
      windows-container-available: ${{ steps.check.outputs.windows-available }}
      containers-need-rebuild: ${{ steps.check.outputs.need-rebuild }}
      container-strategy: ${{ steps.check.outputs.strategy }}
      # Container naming outputs for other jobs
      linux-image-name: ${{ env.LINUX_IMAGE }}
      windows-image-name: ${{ env.WINDOWS_IMAGE }}
      container-registry: ${{ env.CONTAINER_REGISTRY }}
      linux-container-name: ${{ env.LINUX_CONTAINER_NAME }}
      windows-container-name: ${{ env.WINDOWS_CONTAINER_NAME }}
      container-tag: ${{ env.CONTAINER_TAG }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
          fetch-depth: 0

      - name: 🔍 Check container availability and freshness
        id: check
        env:
          LINUX_IMAGE: ${{ env.LINUX_IMAGE }}
          WINDOWS_IMAGE: ${{ env.WINDOWS_IMAGE }}
        run: |
          echo "🔍 Checking container availability..."
          echo "📊 Container Configuration:"
          echo "  Registry: ${{ env.CONTAINER_REGISTRY }}"
          echo "  Linux Image: $LINUX_IMAGE"
          echo "  Windows Image: $WINDOWS_IMAGE"
          echo "  Tag: ${{ env.CONTAINER_TAG }}"
          
          # Function to check if container exists and get its age
          check_container() {
            local image=$1
            local name=$2
            
            echo "📊 Checking $name container: $image"
            
            # Try to pull container info (without actually pulling the large image)
            if docker manifest inspect "$image" >/dev/null 2>&1; then
              echo "✅ $name container exists"
              
              # Get container creation date
              CREATED=$(docker manifest inspect "$image" | jq -r '.config.created // empty' 2>/dev/null || echo "")
              if [ -n "$CREATED" ]; then
                echo "📅 $name container created: $CREATED"
                echo "$name-exists=true" >> $GITHUB_OUTPUT
                echo "$name-created=$CREATED" >> $GITHUB_OUTPUT
              else
                echo "⚠️ Could not determine $name container age"
                echo "$name-exists=true" >> $GITHUB_OUTPUT
                echo "$name-created=unknown" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ $name container not found"
              echo "$name-exists=false" >> $GITHUB_OUTPUT
            fi
          }
          
          # Check both containers
          check_container "$LINUX_IMAGE" "linux"
          check_container "$WINDOWS_IMAGE" "windows"
          
          # Get last dependency change
          echo "📊 Checking dependency freshness..."
          DEPS_CHANGED=$(git log -1 --format="%ct" -- tools/dependencies/ docker/ 2>/dev/null || echo "0")
          echo "📅 Dependencies last changed: $(date -d @$DEPS_CHANGED 2>/dev/null || date -r $DEPS_CHANGED 2>/dev/null || echo 'unknown')"
          
          # Determine if rebuild needed
          FORCE_REBUILD="${{ inputs.force_container_rebuild }}"
          NEED_REBUILD="false"
          
          if [ "$FORCE_REBUILD" = "true" ]; then
            echo "🔧 Force rebuild requested"
            NEED_REBUILD="true"
          elif [ "$(echo ${{ steps.check.outputs.linux-exists }})" != "true" ] || [ "$(echo ${{ steps.check.outputs.windows-exists }})" != "true" ]; then
            echo "🚧 One or more containers missing"
            NEED_REBUILD="true"
          else
            echo "✅ Containers exist, checking freshness..."
            # Add more sophisticated age checking here if needed
          fi
          
          echo "need-rebuild=$NEED_REBUILD" >> $GITHUB_OUTPUT
          echo "linux-available=$(echo ${{ steps.check.outputs.linux-exists }} 2>/dev/null || echo false)" >> $GITHUB_OUTPUT
          echo "windows-available=$(echo ${{ steps.check.outputs.windows-exists }} 2>/dev/null || echo false)" >> $GITHUB_OUTPUT
          
          # Determine build strategy
          if [ "$(echo ${{ steps.check.outputs.linux-exists }})" = "true" ]; then
            STRATEGY="hybrid"  # Use containers where available, traditional where not
          else
            STRATEGY="traditional"  # Fall back to traditional builds
          fi
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          
          echo "📊 Container Health Summary:"
          echo "  Linux container: $(echo ${{ steps.check.outputs.linux-exists }} || echo 'checking...')"
          echo "  Windows container: $(echo ${{ steps.check.outputs.windows-exists }} || echo 'checking...')"
          echo "  Rebuild needed: $NEED_REBUILD"
          echo "  Build strategy: $STRATEGY"

  # Step 2: Build containers if needed
  ensure-linux-container:
    name: 🐳 Ensure Linux Container
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-linux-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ needs.container-health-check.outputs.container-registry }}
      container_name: ${{ needs.container-health-check.outputs.linux-container-name }}
      container_tag: ${{ needs.container-health-check.outputs.container-tag }}

  ensure-windows-container:
    name: 🐳 Ensure Windows Container  
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-windows-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ needs.container-health-check.outputs.container-registry }}
      container_name: ${{ needs.container-health-check.outputs.windows-container-name }}
      container_tag: ${{ needs.container-health-check.outputs.container-tag }}

  # Step 3: Pre-flight checks (keeping existing quality gates)
  pre-commit:
    name: 🧹 Pre-commit Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: Install system dependencies for pre-commit hooks
        run: |
          python -m pip install yamllint
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run pre-commit hooks
        run: |
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 4: Smart build orchestration
  # Step 4: Build HTML for preview (Linux only for dev previews)
  build-html-preview:
    name: '🔨 Build HTML Preview'
    needs: [pre-commit]
    if: github.ref == 'refs/heads/dev' || inputs.build_format == 'html' || inputs.build_format == 'all'
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.container-build.outputs.build_success || steps.baremetal-build.outputs.build_success }}
      html_artifact: ${{ steps.container-build.outputs.html_artifact || steps.baremetal-build.outputs.html_artifact }}
      build_method: ${{ steps.container-build.outputs.build_success && 'container' || 'baremetal' }}
    
    steps:
      - name: 🚀 Try Container Build First
        id: container-build
        continue-on-error: true
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: ubuntu-latest
          format: html
          target: dev

      - name: 🖥️ Fallback to Baremetal Build
        id: baremetal-build
        if: steps.container-build.outputs.build_success != 'true'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: ubuntu-latest
          format: html
          target: dev

  # Step 5: Deploy preview to staging
  deploy-preview:
    name: '🚀 Deploy Preview'
    needs: [build-html-preview]
    if: always() && needs.build-html-preview.outputs.build_success == 'true' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/
      
    steps:
      - name: 📥 Download HTML artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-html-preview.outputs.html_artifact }}
          path: ./preview-site
          
      - name: 🚀 Deploy to GitHub Pages (dev path)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-site
          destination_dir: dev
          keep_files: false
          commit_message: |
            🚀 Deploy dev preview from ${{ github.sha }}
            
            Built using: ${{ needs.build-html-preview.outputs.build_method }}
            Artifact: ${{ needs.build-html-preview.outputs.html_artifact }}

  # Step 6: Results and reporting  
  build-report:
    name: 📊 Build Report
    if: always()
    needs: [pre-commit, build-html-preview, deploy-preview]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Generate comprehensive report
        run: |
          echo "# 🧠 Enhanced Build Manager Report" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Status" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Container: ${{ needs.container-health-check.outputs.linux-container-available == 'true' && '✅ Available' || '❌ Not Available' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Container: ${{ needs.container-health-check.outputs.windows-container-available == 'true' && '✅ Available' || '❌ Not Available' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rebuild Needed: ${{ needs.container-health-check.outputs.containers-need-rebuild == 'true' && '🔧 Yes' || '✅ No' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Strategy: ${{ needs.container-health-check.outputs.container-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Container Building" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Build: ${{ needs.ensure-linux-container.result == 'success' && '✅ Success' || needs.ensure-linux-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Build: ${{ needs.ensure-windows-container.result == 'success' && '✅ Success' || needs.ensure-windows-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🏗️ Content Building" >> $GITHUB_STEP_SUMMARY
          echo "- Smart Build: ${{ needs.smart-build.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit: ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 📈 Performance Benefits" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.container-health-check.outputs.linux-container-available }}" = "true" ]; then
            echo "- ⚡ Using fast container builds (5-10 min)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🐌 Using traditional builds (45 min)" >> $GITHUB_STEP_SUMMARY
          fi
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Completed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
