name: '📚 Quarto Build (Container)'

# Cancel duplicate builds for same target+ref combination
concurrency:
  group: quarto-build-container-${{ inputs.target }}-${{ github.ref }}
  cancel-in-progress: true

# This workflow uses pre-built containers with all dependencies installed
# Matrix approach: 4 parallel jobs for maximum speed
on:
  workflow_dispatch:
    inputs:
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      target:
        description: 'Target branch (dev/main)'
        required: false
        type: choice
        default: 'dev'
        options:
          - dev
          - main
  workflow_call:
    inputs:
      build_linux:
        required: false
        type: boolean
        default: true
      build_windows:
        required: false
        type: boolean
        default: true
      build_html:
        required: false
        type: boolean
        default: true
      build_pdf:
        required: false
        type: boolean
        default: true
      target:
        required: false
        type: string
        default: 'dev'
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
      container_tag:
        required: false
        type: string
        default: 'latest'
    outputs:
      build_success:
        description: "Whether all builds completed successfully"
        value: ${{ jobs.collect-outputs.outputs.build_success }}
      linux_html_artifact:
        description: "Linux HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_html_artifact }}
      linux_pdf_artifact:
        description: "Linux PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_pdf_artifact }}
      windows_html_artifact:
        description: "Windows HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_html_artifact }}
      windows_pdf_artifact:
        description: "Windows PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_pdf_artifact }}

permissions:
  contents: read
  packages: read

jobs:
  build:
    name: '${{ matrix.platform_emoji }} Build ${{ matrix.platform_name }} (${{ matrix.format_emoji }} ${{ matrix.format_name }})'
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - platform: linux
            platform_name: Linux
            platform_emoji: '🐧'
            runner: ubuntu-latest
            format_name: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_linux && inputs.build_html }}
            artifact_name: ${{ inputs.target }}-html-linux
          - platform: linux
            platform_name: Linux
            platform_emoji: '🐧'
            runner: ubuntu-latest
            format_name: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_linux && inputs.build_pdf }}
            artifact_name: ${{ inputs.target }}-pdf-linux
          # Windows builds  
          - platform: windows
            platform_name: Windows
            platform_emoji: '🪟'
            runner: windows-latest
            format_name: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_windows && inputs.build_html }}
            artifact_name: ${{ inputs.target }}-html-windows
          - platform: windows
            platform_name: Windows
            platform_emoji: '🪟'
            runner: windows-latest
            format_name: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_windows && inputs.build_pdf }}
            artifact_name: ${{ inputs.target }}-pdf-windows
    
    outputs:
      platform: ${{ matrix.platform }}
      format: ${{ matrix.format_name }}
      artifact_name: ${{ matrix.artifact_name }}

    # Only Linux runs in containers
    container: ${{ matrix.platform == 'linux' && format('{0}/{1}/quarto-{2}:{3}', inputs.container_registry, github.repository, matrix.platform, inputs.container_tag) || null }}
    
    env:
      CONTAINER_IMAGE: ${{ format('{0}/{1}/quarto-{2}:{3}', inputs.container_registry || 'ghcr.io', github.repository, matrix.platform, inputs.container_tag || 'latest') }}

    steps:
      - name: 🛑 Skip build
        if: "!matrix.enabled"
        run: echo "Build skipped because matrix.enabled is false"

      - name: 📥 Checkout repository
        if: matrix.enabled
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 💾 Cache Docker Images
        if: matrix.enabled
        uses: actions/cache@v4
        id: cache-docker-images
        with:
          path: |
            ~/.docker
            ~/AppData/Local/Docker/wsl/data
          key: docker-${{ matrix.platform }}-${{ env.CONTAINER_IMAGE }}-${{ hashFiles('docker/**') }}
          restore-keys: |
            docker-${{ matrix.platform }}-${{ env.CONTAINER_IMAGE }}-
            docker-${{ matrix.platform }}-

      - name: 🐳 Pull Linux Container
        if: matrix.platform == 'linux' && matrix.enabled
        shell: bash
        run: |
          echo "🐳 Pulling Linux container..."
          echo "📦 Image: ${{ env.CONTAINER_IMAGE }}"
          echo "💾 Cache Status: ${{ steps.cache-docker-images.outputs.cache-hit == 'true' && '✅ HIT - faster pull expected' || '❌ MISS - full pull required' }}"
          
          # Check if image already exists locally (from cache)
          if docker image inspect ${{ env.CONTAINER_IMAGE }} >/dev/null 2>&1; then
            echo "✅ Container image found locally - skipping pull"
          else
            echo "📥 Pulling container image..."
            docker pull ${{ env.CONTAINER_IMAGE }}
            echo "✅ Container pulled successfully"
          fi

      - name: 🐳 Pull Windows Container
        if: matrix.platform == 'windows' && matrix.enabled
        shell: pwsh
        run: |
          Write-Output "🐳 Pulling Windows container..."
          Write-Output "📦 Image: ${{ env.CONTAINER_IMAGE }}"
          $cacheHit = "${{ steps.cache-docker-images.outputs.cache-hit }}"
          if ($cacheHit -eq 'true') {
            Write-Output "💾 Cache Status: ✅ HIT - faster pull expected"
          } else {
            Write-Output "💾 Cache Status: ❌ MISS - full pull required"
          }
          
          # Check if image already exists locally (from cache)
          $imageExists = docker image inspect ${{ env.CONTAINER_IMAGE }}
          if ($LASTEXITCODE -eq 0) {
            Write-Output "✅ Container image found locally - skipping pull"
          } else {
            Write-Output "📥 Pulling container image..."
            docker pull ${{ env.CONTAINER_IMAGE }}
            Write-Output "✅ Container pulled successfully"
          }

      - name: 🔨 Build ${{ matrix.format }} (Linux)
        if: matrix.platform == 'linux' && matrix.enabled
        working-directory: quarto
        run: |
          echo "🔨 Building ${{ matrix.format }} on Linux container..."
          cp config/${{ matrix.config }} _quarto.yml
          quarto render --to ${{ matrix.render_target }}
          echo "✅ ${{ matrix.format }} build completed"

      - name: 🔨 Build ${{ matrix.format }} (Windows)
        if: matrix.platform == 'windows' && matrix.enabled
        shell: pwsh
        working-directory: quarto
        run: |
          Write-Host "🔨 Building ${{ matrix.format }} on Windows container..."
          docker run --rm -v "${PWD}:C:\workspace" -w "C:\workspace" ${{ env.CONTAINER_IMAGE }} powershell -Command "
            Copy-Item 'config\${{ matrix.config }}' '_quarto.yml'
            quarto render --to ${{ matrix.render_target }}
          "
          Write-Host "✅ ${{ matrix.format }} build completed"

      - name: 📉 Compress PDF (Linux)
        if: matrix.platform == 'linux' && matrix.format == 'pdf' && matrix.enabled
        working-directory: build/pdf
        run: |
          if [ -f "Machine-Learning-Systems.pdf" ]; then
            echo "📉 Compressing PDF..."
            gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook \
               -dNOPAUSE -dQUIET -dBATCH \
               -sOutputFile="compressed.pdf" "Machine-Learning-Systems.pdf"
            mv compressed.pdf Machine-Learning-Systems.pdf
          fi

      - name: 📉 Compress PDF (Windows)
        if: matrix.platform == 'windows' && matrix.format == 'pdf' && matrix.enabled
        shell: pwsh
        working-directory: build/pdf
        run: |
          if (Test-Path "Machine-Learning-Systems.pdf") {
            Write-Host "📉 Compressing PDF..."
            & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook `
                       -dNOPAUSE -dBATCH `
                       -sOutputFile="compressed.pdf" "Machine-Learning-Systems.pdf"
            if (Test-Path "compressed.pdf") { 
              Move-Item -Force "compressed.pdf" "Machine-Learning-Systems.pdf" 
            }
          }

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.enabled
        with:
          name: ${{ matrix.artifact_name }}
          path: build/${{ matrix.format }}

  collect-outputs:
    name: '📊 Collect Outputs'
    needs: build
    runs-on: ubuntu-latest
    if: always()
    outputs:
      build_success: ${{ steps.collect.outputs.build_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
    
    steps:
      - name: 📊 Collect results
        id: collect
        run: |
          # Determine overall build success
          if [[ "${{ needs.build.result }}" == "success" || "${{ needs.build.result }}" == "skipped" ]]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="✅ Success"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="❌ Failure"
          fi

          # Extract artifact names from build job outputs using jq
          outputs_json='${{ toJSON(needs.build.outputs) }}'
          
          # Helper function to extract artifact name
          extract_artifact() {
            local platform=$1
            local format=$2
            # The .[] iterates over the values of the top-level object
            echo "$outputs_json" | jq -r --arg p "$platform" --arg f "$format" \
              '.[] | select(.platform==$p and .format==$f) | .artifact_name'
          }

          # Set artifact names for requested builds if they were generated
          if [[ "${{ inputs.build_linux && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "html")
            echo "linux_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_linux && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "pdf")
            echo "linux_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "html")
            echo "windows_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "pdf")
            echo "windows_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Results collected - Status: $BUILD_SUCCESS_MSG"