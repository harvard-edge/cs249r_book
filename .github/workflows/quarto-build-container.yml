name: '📚 Quarto Build (Container)'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds for same target+ref combination
concurrency:
  group: quarto-build-${{ inputs.target }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

# This workflow uses pre-built containers with all dependencies installed
# Containers include fixed versions of Quarto, R, Python, TeX Live, etc.
# This is the primary workflow for fast, consistent builds
on:
  workflow_dispatch:
    inputs:
      os:
        required: false
        type: choice
        default: 'ubuntu-latest'
        description: 'Operating system to run on'
        options:
          - ubuntu-latest
          - windows-latest
      target:
        required: false
        type: choice
        default: 'dev'
        description: 'Target branch (dev/main) - determines build behavior'
        options:
          - dev
          - main
      html_format:
        required: false
        type: boolean
        default: true
        description: 'Build HTML format'
      pdf_format:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format'
      quarto-log-level:
        required: false
        type: choice
        default: 'INFO'
        description: 'Quarto log level'
        options:
          - INFO
          - DEBUG
      artifact_name_template:
        required: false
        type: string
        default: '{prefix}-{format}-{os}'
        description: 'Artifact name template. Use {prefix}, {format} for html/pdf, and {os} for linux/windows'
  workflow_call:
    inputs:
      # Matrix configuration inputs - determines what gets built
      build_linux:
        required: false
        type: boolean
        default: true
        description: 'Build on Linux'
      build_windows:
        required: false
        type: boolean
        default: false
        description: 'Build on Windows'
      build_html:
        required: false
        type: boolean
        default: true
        description: 'Build HTML format'
      build_pdf:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format'
      
      # Build configuration
      target:
        required: false
        type: string
        default: 'dev'
        description: 'Target branch (dev/main) - determines build behavior'
      
      # Container configuration
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to use'
      
      # Legacy inputs for backward compatibility
      os:
        required: false
        type: string
        default: ''
        description: 'LEGACY: Operating system (use build_linux/build_windows instead)'
      format:
        required: false
        type: string
        default: ''
        description: 'LEGACY: Format to build (use build_html/build_pdf instead)'
      html_format:
        required: false
        type: boolean
        default: false
        description: 'LEGACY: Build HTML format'
      pdf_format:
        required: false
        type: boolean
        default: false
        description: 'LEGACY: Build PDF format'
    # Matrix-aware outputs for calling workflows
  outputs:
    build_success:
      description: "Whether all builds completed successfully"
      value: ${{ jobs.collect-results.outputs.build_success }}
    linux_html_artifact:
      description: "Linux HTML artifact name"
      value: ${{ jobs.collect-results.outputs.linux_html_artifact }}
    linux_pdf_artifact:
      description: "Linux PDF artifact name"
      value: ${{ jobs.collect-results.outputs.linux_pdf_artifact }}
    windows_html_artifact:
      description: "Windows HTML artifact name"
      value: ${{ jobs.collect-results.outputs.windows_html_artifact }}
    windows_pdf_artifact:
      description: "Windows PDF artifact name"
      value: ${{ jobs.collect-results.outputs.windows_pdf_artifact }}
    target:
      description: "Build target (dev/main)"
      value: ${{ inputs.target }}
    formats_built:
      description: "Comma-separated list of formats built"
      value: ${{ jobs.collect-results.outputs.formats_built }}

permissions:
  contents: write
  pages: write

jobs:
  # Generate dynamic matrix based on inputs
  generate-matrix:
    name: '🎯 Generate Build Matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
      
    steps:
      - name: 🎯 Generate Build Matrix
        id: generate
        run: |
          echo "🎯 Generating build matrix from inputs..."
          
          # Handle legacy inputs for backward compatibility
          BUILD_LINUX="${{ inputs.build_linux }}"
          BUILD_WINDOWS="${{ inputs.build_windows }}"
          BUILD_HTML="${{ inputs.build_html }}"
          BUILD_PDF="${{ inputs.build_pdf }}"
          
          # Legacy format input conversion
          if [ -n "${{ inputs.format }}" ] && [ "${{ inputs.format }}" != "" ]; then
            echo "🔄 Converting legacy format input: ${{ inputs.format }}"
            case "${{ inputs.format }}" in
              "html") BUILD_HTML="true"; BUILD_PDF="false" ;;
              "pdf") BUILD_HTML="false"; BUILD_PDF="true" ;;
              "all") BUILD_HTML="true"; BUILD_PDF="true" ;;
            esac
          fi
          
          # Legacy OS input conversion
          if [ -n "${{ inputs.os }}" ] && [ "${{ inputs.os }}" != "" ]; then
            echo "🔄 Converting legacy OS input: ${{ inputs.os }}"
            case "${{ inputs.os }}" in
              "ubuntu-latest") BUILD_LINUX="true"; BUILD_WINDOWS="false" ;;
              "windows-latest") BUILD_LINUX="false"; BUILD_WINDOWS="true" ;;
            esac
          fi
          
          # Legacy boolean format inputs
          if [ "${{ inputs.html_format }}" = "true" ]; then BUILD_HTML="true"; fi
          if [ "${{ inputs.pdf_format }}" = "true" ]; then BUILD_PDF="true"; fi
          
          # Start with empty matrix
          MATRIX='{"include":[]}'
          
          # Linux builds
          if [ "$BUILD_LINUX" = "true" ]; then
            if [ "$BUILD_HTML" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "ubuntu-latest", "os_name": "linux", "container_name": "quarto-linux", "format": "html", "artifact": "${{ inputs.target }}-html-linux"}]')
            fi
            if [ "$BUILD_PDF" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "ubuntu-latest", "os_name": "linux", "container_name": "quarto-linux", "format": "pdf", "artifact": "${{ inputs.target }}-pdf-linux"}]')
            fi
          fi
          
          # Windows builds  
          if [ "$BUILD_WINDOWS" = "true" ]; then
            if [ "$BUILD_HTML" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "windows-latest", "os_name": "windows", "container_name": "quarto-windows", "format": "html", "artifact": "${{ inputs.target }}-html-windows"}]')
            fi
            if [ "$BUILD_PDF" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "windows-latest", "os_name": "windows", "container_name": "quarto-windows", "format": "pdf", "artifact": "${{ inputs.target }}-pdf-windows"}]')
            fi
          fi
          
          echo "📊 Generated matrix:"
          echo "$MATRIX" | jq '.'
          
          # Check if matrix is empty
          BUILD_COUNT=$(echo "$MATRIX" | jq '.include | length')
          if [ "$BUILD_COUNT" -eq 0 ]; then
            echo "❌ No builds selected! At least one OS and format must be enabled."
            exit 1
          fi
          
          echo "✅ Matrix generated with $BUILD_COUNT build jobs"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # Dynamic matrix build job
  build:
    name: '🚀 ${{ matrix.os_name }} ${{ matrix.format }}'
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    if: needs.generate-matrix.outputs.matrix != ''
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    container: ${{ format('{0}/{1}/{2}:{3}', inputs.container_registry, github.repository, matrix.container_name, inputs.container_tag) }}
    env:
      QUARTO_LOG_LEVEL: ${{ inputs.quarto-log-level || 'INFO' }}
      OS_NAME: ${{ matrix.os_name }}
      PYTHONIOENCODING: utf-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
      - name: 🚀 Build Matrix Job
        shell: bash
        run: |
          echo "🚀 Building ${{ matrix.format }} on ${{ matrix.os_name }}..."
          echo "📊 Build configuration:"
          echo "  OS: ${{ matrix.os_name }}"
          echo "  Format: ${{ matrix.format }}"
          echo "  Container: ${{ matrix.container_name }}"
          echo "  Artifact: ${{ matrix.artifact }}"

      - name: 🚦 Set Initial Build Status
        shell: bash
        run: |
          echo "🚦 Setting initial build status to pending..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Quarto build started (${{ matrix.os_name }} container)\",
              \"context\": \"ci/quarto-build-${{ matrix.os }}-${{ inputs.format }}\"
            }"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Container Environment Info
        shell: bash
        run: |
          echo "🔄 Container build environment information..."
          echo "📊 Container Configuration:"
          echo "  Registry: ${{ inputs.container_registry }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  Container: ${{ matrix.container_name }}"
          echo "  Tag: ${{ inputs.container_tag }}"
          echo "  Full Image: ${{ format('{0}/{1}/{2}:{3}', inputs.container_registry, github.repository, matrix.container_name, inputs.container_tag) }}"
          echo "  OS: ${{ matrix.os_name }}"
          echo ""
          echo "📊 Pre-installed versions:"
          echo "  Quarto: $(quarto --version)"
          echo "  Python: $(python3 --version)"
          echo "  R: $(R --version | head -1)"
          echo "  TeX Live: $(lualatex --version | head -1)"
          echo "📊 System resources:"
          echo "  Disk space: $(df -h . | tail -1)"
          echo "  Memory: $(free -h | grep Mem)"

      - name: 🔨 Build HTML (copy config and render)
        if: matrix.format == 'html'
        shell: bash
        run: |
          echo "🚀 Setting up HTML configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-html.yml _quarto.yml
          echo "✅ Configuration set to HTML"
          
          echo "🔨 Building HTML..."
          echo "⏰ HTML build started at: $(date)"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building HTML content (${{ matrix.os_name }} container)\",
              \"context\": \"ci/quarto-build-${{ matrix.os }}-html\"
            }"
          
          quarto render --to html
          echo "✅ HTML build completed at: $(date)"
        
      - name: 🔨 Build PDF (copy config and render)
        if: matrix.format == 'pdf'
        shell: bash
        run: |
          echo "🚀 Setting up PDF configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-pdf.yml _quarto.yml
          echo "✅ Configuration set to PDF"
          
          echo "🔨 Building PDF..."
          echo "⏰ PDF build started at: $(date)"
          echo "📊 This should be much faster with pre-installed dependencies"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building PDF content (${{ matrix.os_name }} container) - optimized\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-pdf\"
            }"
          
          quarto render --to titlepage-pdf
          echo "✅ PDF build completed at: $(date)"

      - name: 📉 Compress PDF with Ghostscript (Linux)
        if: matrix.format == 'pdf' && runner.os == 'Linux'
        shell: bash
        run: |
          if [ -f "build/pdf/Machine-Learning-Systems.pdf" ]; then
            echo "📉 Compressing PDF using Ghostscript (Linux)..."
            gs \
              -sDEVICE=pdfwrite \
              -dCompatibilityLevel=1.4 \
              -dPDFSETTINGS=/ebook \
              -dNOPAUSE \
              -dQUIET \
              -dBATCH \
              -sOutputFile="./build/pdf/ebook.pdf" \
              "./build/pdf/Machine-Learning-Systems.pdf"

            mv ./build/pdf/ebook.pdf ./build/pdf/Machine-Learning-Systems.pdf
          else
            echo "⚠️ PDF file not found for compression"
          fi

      - name: 📉 Compress PDF with Ghostscript (Windows)
        if: matrix.format == 'pdf' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $input = "./build/pdf/Machine-Learning-Systems.pdf"
          $output = "./build/pdf/ebook.pdf"

          if (!(Test-Path $input)) {
            Write-Warning "⚠️ Input PDF not found! Skipping compression..."
            exit 0
          }

          Write-Output "📉 Compressing PDF using Ghostscript (Windows)..."
          & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel:1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile="$output" "$input"

          if (Test-Path $output) {
            Move-Item -Force $output $input
          } else {
            Write-Warning "⚠️ Compression failed but continuing"
          }

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build/${{ matrix.format }}

      - name: 🎯 Set Final Build Status
        if: always()
        shell: bash
        run: |
          echo "🎯 Setting final build status..."
          
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="${{ matrix.format }} build completed successfully (${{ matrix.os_name }} container)"
          else
            STATE="failure"
            DESCRIPTION="${{ matrix.format }} build failed (${{ matrix.os_name }} container)"
          fi
          
          echo "📊 Final status: $STATE"
          echo "📝 Description: $DESCRIPTION"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"ci/quarto-build-${{ matrix.os_name }}-${{ matrix.format }}\"
            }"
          
          echo "✅ Commit status updated successfully"

  # Collect results from all matrix builds
  collect-results:
    name: '📊 Collect Results'
    needs: [generate-matrix, build]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      build_success: ${{ steps.collect.outputs.build_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
      formats_built: ${{ steps.collect.outputs.formats_built }}
      
    steps:
      - name: 📊 Collect Matrix Results
        id: collect
        run: |
          echo "📊 Collecting results from matrix builds..."
          
          # Parse the matrix to determine what was built
          MATRIX='${{ needs.generate-matrix.outputs.matrix }}'
          echo "📋 Matrix: $MATRIX"
          
          # Initialize outputs
          LINUX_HTML=""
          LINUX_PDF=""
          WINDOWS_HTML=""
          WINDOWS_PDF=""
          FORMATS_BUILT=()
          
          # Collect artifact names based on successful builds
          echo "$MATRIX" | jq -r '.include[] | "\(.os_name) \(.format) \(.artifact)"' | while IFS=' ' read -r OS_NAME FORMAT ARTIFACT; do
            if [ "${{ needs.build.result }}" = "success" ]; then
              case "${OS_NAME}_${FORMAT}" in
                "linux_html")
                  echo "linux_html_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "linux_pdf")
                  echo "linux_pdf_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "windows_html")
                  echo "windows_html_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "windows_pdf")
                  echo "windows_pdf_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
              esac
              FORMATS_BUILT+=("$FORMAT")
            fi
          done
          
          # Determine overall success
          if [ "${{ needs.build.result }}" = "success" ]; then
            BUILD_SUCCESS="true"
          else
            BUILD_SUCCESS="false"
          fi
          
          # Join formats built (remove duplicates)
          FORMATS_LIST=$(printf '%s\n' "${FORMATS_BUILT[@]}" | sort -u | tr '\n' ',' | sed 's/,$//')
          
          echo "build_success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "formats_built=$FORMATS_LIST" >> $GITHUB_OUTPUT
          
          echo "✅ Results collected:"
          echo "  Success: $BUILD_SUCCESS"
          echo "  Formats: $FORMATS_LIST"

 