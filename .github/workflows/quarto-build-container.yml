name: '📚 Quarto Build (Container)'

# Allow parallel builds with different format combinations
concurrency:
  group: quarto-build-container-${{ inputs.target }}-${{ github.ref }}-${{ inputs.build_html }}-${{ inputs.build_pdf }}-${{ inputs.build_epub }}-${{ inputs.build_linux }}-${{ inputs.build_windows }}
  cancel-in-progress: true

# This workflow uses pre-built containers with all dependencies installed
# Matrix approach: 4 parallel jobs for maximum speed
on:
  workflow_dispatch:
    inputs:
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      build_epub:
        description: '📚 Build EPUB format'
        required: false
        default: true
        type: boolean
      target:
        description: 'Target branch (dev/main)'
        required: false
        type: choice
        default: 'dev'
        options:
          - dev
          - main
      container_registry:
        description: 'Container registry (e.g., ghcr.io)'
        required: false
        type: string
        default: 'ghcr.io'
      container_tag:
        description: 'Container tag (e.g., latest)'
        required: false
        type: string
        default: 'latest'
  workflow_call:
    inputs:
      build_linux:
        required: false
        type: boolean
        default: true
      build_windows:
        required: false
        type: boolean
        default: true
      build_html:
        required: false
        type: boolean
        default: true
      build_pdf:
        required: false
        type: boolean
        default: true
      build_epub:
        required: false
        type: boolean
        default: true
      target:
        required: false
        type: string
        default: 'dev'
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
      container_tag:
        required: false
        type: string
        default: 'latest'
    outputs:
      build_success:
        description: "Whether all builds completed successfully"
        value: ${{ jobs.collect-outputs.outputs.build_success }}
      linux_html_artifact:
        description: "Linux HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_html_artifact }}
      linux_pdf_artifact:
        description: "Linux PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_pdf_artifact }}
      windows_html_artifact:
        description: "Windows HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_html_artifact }}
      windows_pdf_artifact:
        description: "Windows PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_pdf_artifact }}
      linux_epub_artifact:
        description: "Linux EPUB artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_epub_artifact }}
      windows_epub_artifact:
        description: "Windows EPUB artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_epub_artifact }}

permissions:
  contents: read
  packages: read

jobs:
  build:
    name: '${{ matrix.platform_emoji }} Build ${{ matrix.platform_name }} (${{ matrix.format_emoji }} ${{ matrix.format_name }})'
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - platform: linux
            platform_name: Linux
            platform_emoji: '🐧'
            runner: ubuntu-latest
            format_name: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_linux && inputs.build_html }}
            artifact_name: ${{ inputs.target }}-html-linux
            output_dir: _build/html
          - platform: linux
            platform_name: Linux
            platform_emoji: '🐧'
            runner: ubuntu-latest
            format_name: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_linux && inputs.build_pdf }}
            artifact_name: ${{ inputs.target }}-pdf-linux
            output_dir: _build/pdf
          # Windows builds  
          - platform: windows
            platform_name: Windows
            platform_emoji: '🪟'
            runner: windows-latest
            format_name: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_windows && inputs.build_html }}
            artifact_name: ${{ inputs.target }}-html-windows
            output_dir: _build/html
          - platform: windows
            platform_name: Windows
            platform_emoji: '🪟'
            runner: windows-latest
            format_name: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_windows && inputs.build_pdf }}
            artifact_name: ${{ inputs.target }}-pdf-windows
            output_dir: _build/pdf
          # EPUB builds
          - platform: linux
            platform_name: Linux
            platform_emoji: '🐧'
            runner: ubuntu-latest
            format_name: EPUB
            format_emoji: '📚'
            config: _quarto-epub.yml
            render_target: epub
            enabled: ${{ inputs.build_linux && inputs.build_epub }}
            artifact_name: ${{ inputs.target }}-epub-linux
            output_dir: _build/epub
          - platform: windows
            platform_name: Windows
            platform_emoji: '🪟'
            runner: windows-latest
            format_name: EPUB
            format_emoji: '📚'
            config: _quarto-epub.yml
            render_target: epub
            enabled: ${{ inputs.build_windows && inputs.build_epub }}
            artifact_name: ${{ inputs.target }}-epub-windows
            output_dir: _build/epub
    
    outputs:
      platform: ${{ matrix.platform }}
      format: ${{ matrix.format_name }}
      artifact_name: ${{ matrix.artifact_name }}
      output_dir: ${{ matrix.output_dir }}

    # Only Linux runs in containers
    container: ${{ matrix.platform == 'linux' && format('{0}/{1}/quarto-{2}:{3}', inputs.container_registry || 'ghcr.io', github.repository, matrix.platform, inputs.container_tag || 'latest') || null }}
    
    env:
      CONTAINER_IMAGE: ${{ format('{0}/{1}/quarto-{2}:{3}', inputs.container_registry || 'ghcr.io', github.repository, matrix.platform, inputs.container_tag || 'latest') }}
      DOCKERFILE_PATH: ./docker/${{ matrix.platform }}/dockerfile

    steps:
      - name: 🛑 Skip build
        if: "!matrix.enabled"
        run: echo "Build skipped because matrix.enabled is false"

      - name: 📥 Checkout repository
        if: matrix.enabled
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 Log in to GitHub Container Registry
        if: matrix.platform == 'windows' && matrix.enabled
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Pull Docker Image
        if: matrix.platform == 'windows' && matrix.enabled
        run: docker pull ${{ env.CONTAINER_IMAGE }}

      - name: 🔨 Build ${{ matrix.format_name }} (Linux)
        if: matrix.platform == 'linux' && matrix.enabled
        working-directory: quarto
        run: |
          echo "🔨 Building ${{ matrix.format_name }} on Linux container..."
          rm -f _quarto.yml
          cp config/${{ matrix.config }} _quarto.yml
          quarto render --to ${{ matrix.render_target }} --output-dir "${{ matrix.output_dir }}"
          echo "✅ ${{ matrix.format_name }} build completed"

      - name: 🔨 Build ${{ matrix.format_name }} (Windows)
        if: matrix.platform == 'windows' && matrix.enabled
        shell: pwsh
        run: |
          Write-Host "🔨 Building ${{ matrix.format_name }} on Windows container..."
          docker run --rm -v "$($PWD.Path):C:\workspace" -w "C:\workspace\quarto" ${{ env.CONTAINER_IMAGE }} powershell -Command "
            if (Test-Path '_quarto.yml') { Remove-Item '_quarto.yml' -Force }
            Copy-Item 'config\${{ matrix.config }}' '_quarto.yml' -Force
            quarto render --to ${{ matrix.render_target }} --output-dir '${{ matrix.output_dir }}'
          "
          Write-Host "✅ ${{ matrix.format_name }} build completed"

      - name: 📉 Compress PDF (Linux)
        if: matrix.platform == 'linux' && matrix.format_name == 'PDF' && matrix.enabled
        working-directory: quarto/${{ matrix.output_dir }}
        run: |
          if [ -f "Machine-Learning-Systems.pdf" ]; then
            echo "📉 Compressing PDF..."
            gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook \
               -dNOPAUSE -dQUIET -dBATCH \
               -sOutputFile="compressed.pdf" "Machine-Learning-Systems.pdf"
            mv compressed.pdf Machine-Learning-Systems.pdf
          fi

      - name: 📉 Compress PDF (Windows)
        if: matrix.platform == 'windows' && matrix.format_name == 'PDF' && matrix.enabled
        shell: pwsh
        run: |
          Write-Host "🔨 Compressing PDF on Windows container..."
          docker run --rm -v "$($PWD.Path):C:\workspace" -w "C:\workspace\quarto\${{ matrix.output_dir }}" ${{ env.CONTAINER_IMAGE }} powershell -Command "
            if (Test-Path 'Machine-Learning-Systems.pdf') {
              Write-Host '📉 Compressing PDF...'
              & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile='compressed.pdf' 'Machine-Learning-Systems.pdf'
              if (Test-Path 'compressed.pdf') {
                Move-Item -Force 'compressed.pdf' 'Machine-Learning-Systems.pdf'
              }
            } else {
              Write-Warning '⚠️ Machine-Learning-Systems.pdf not found for compression.'
            }
          "
          Write-Host "✅ PDF compression completed."

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.enabled
        with:
          name: ${{ matrix.artifact_name }}
          path: quarto/${{ matrix.output_dir }}

  collect-outputs:
    name: '📊 Collect Outputs'
    needs: build
    runs-on: ubuntu-latest
    if: always()
    outputs:
      build_success: ${{ steps.collect.outputs.build_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      linux_epub_artifact: ${{ steps.collect.outputs.linux_epub_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
      windows_epub_artifact: ${{ steps.collect.outputs.windows_epub_artifact }}
    
    steps:
      - name: 📊 Collect results
        id: collect
        run: |
          # Determine overall build success
          if [[ "${{ needs.build.result }}" == "success" || "${{ needs.build.result }}" == "skipped" ]]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="✅ Success"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="❌ Failure"
          fi

          # Extract artifact names from build job outputs using jq
          outputs_json='${{ toJSON(needs.build.outputs) }}'
          
          # Helper function to extract artifact name
          extract_artifact() {
            local platform=$1
            local format=$2
            # Robustly handle either a single output object or an object of output objects.
            # Also, convert matrix platform and format to lowercase for case-insensitive matching.
            echo "$outputs_json" | jq -r --arg p "$platform" --arg f "$format" \
              '(if .platform then . else .[] end) | select((.platform | ascii_downcase) == $p and (.format | ascii_downcase) == $f) | .artifact_name'
          }

          # Set artifact names for requested builds if they were generated
          if [[ "${{ inputs.build_linux && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "html")
            echo "linux_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_linux && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "pdf")
            echo "linux_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "html")
            echo "windows_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "pdf")
            echo "windows_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_linux && inputs.build_epub }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "epub")
            echo "linux_epub_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_epub }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "epub")
            echo "windows_epub_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Results collected - Status: $BUILD_SUCCESS_MSG"