name: '📚 Quarto Build (Container)'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds for same target+os+format combination
concurrency:
  group: quarto-build-${{ inputs.target }}-${{ inputs.os }}-${{ inputs.format }}-${{ github.sha }}
  cancel-in-progress: true

# This workflow uses pre-built containers with all dependencies installed
# Containers include fixed versions of Quarto, R, Python, TeX Live, etc.
# This is the primary workflow for fast, consistent builds
on:
  workflow_dispatch:
    inputs:
      os:
        required: false
        type: choice
        default: 'ubuntu-latest'
        description: 'Operating system to run on'
        options:
          - ubuntu-latest
          - windows-latest
      target:
        required: false
        type: choice
        default: 'dev'
        description: 'Target branch (dev/main) - determines build behavior'
        options:
          - dev
          - main
      html_format:
        required: false
        type: boolean
        default: true
        description: 'Build HTML format'
      pdf_format:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format'
      quarto-log-level:
        required: false
        type: choice
        default: 'INFO'
        description: 'Quarto log level'
        options:
          - INFO
          - DEBUG
      artifact_name_template:
        required: false
        type: string
        default: '{prefix}-{format}-{os}'
        description: 'Artifact naming pattern. Example: "book-html-linux" (prefix=book, format=html, os=linux)'
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      format:
        required: false
        type: string
        default: 'html'
        description: 'Format to build (html/pdf/all)'
      target:
        required: false
        type: string
        default: ''
        description: 'Target branch (dev/main) - determines build behavior'
      # Container configuration (optional overrides)
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to use'
      # Legacy inputs for backward compatibility (if needed)
      html_format:
        required: false
        type: boolean
        default: false
        description: 'Build HTML format (legacy - use format instead)'
      pdf_format:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format (legacy - use format instead)'

    outputs:
      html-artifact-name:
        description: "Name of uploaded HTML artifact (if built)"
        value: ${{ jobs.build.outputs.html-artifact-name }}
      pdf-artifact-name:
        description: "Name of uploaded PDF artifact (if built)"
        value: ${{ jobs.build.outputs.pdf-artifact-name }}
      build-status:
        description: "Overall build status (success/failure/skipped)"
        value: ${{ jobs.build.outputs.build-status }}
      formats-built:
        description: "Comma-separated list of formats that were built"
        value: ${{ jobs.build.outputs.formats-built }}

permissions:
  contents: write
  pages: write

jobs:
  # Unified build job using matrix strategy (filtered by input)
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
            container_name: quarto-linux
          - os: windows-latest
            os_name: windows
            container_name: quarto-windows
    container: ${{ format('{0}/{1}/{2}:{3}', inputs.container_registry, github.repository, matrix.container_name, inputs.container_tag) }}
    timeout-minutes: 120
    # Matrix job will run for both OS options, filtering handled in steps
    outputs:
      html-artifact-name: ${{ steps.upload-html-artifacts.outputs.artifact-id }}
      pdf-artifact-name: ${{ steps.upload-pdf-artifacts.outputs.artifact-id }}
      build-status: ${{ steps.build-summary.outputs.status }}
      formats-built: ${{ steps.build-summary.outputs.formats }}
    env:
      QUARTO_LOG_LEVEL: ${{ inputs.quarto-log-level || 'INFO' }}
      OS_NAME: ${{ matrix.os_name }}
      PYTHONIOENCODING: utf-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
      - name: 🎯 Check if this matrix job should run
        id: should-run
        shell: bash
        run: |
          # Only run if inputs.os matches matrix.os or if inputs.os is empty
          if [ "${{ inputs.os }}" = "${{ matrix.os }}" ] || [ "${{ inputs.os }}" = "" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Running build for ${{ matrix.os_name }} (matches input: '${{ inputs.os }}')"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping build for ${{ matrix.os_name }} (input specified: '${{ inputs.os }}')"
          fi

      - name: 🔧 Convert Format Input to Flags
        id: format-flags
        if: steps.should-run.outputs.should-run == 'true'
        shell: bash
        run: |
          echo "🔧 Converting format input to build flags..."
          
          # Determine which formats to build based on input
          if [ "${{ inputs.format }}" = "html" ] || [ "${{ inputs.html_format }}" = "true" ]; then
            BUILD_HTML="true"
          else
            BUILD_HTML="false"
          fi
          
          if [ "${{ inputs.format }}" = "pdf" ] || [ "${{ inputs.pdf_format }}" = "true" ]; then
            BUILD_PDF="true"
          else
            BUILD_PDF="false"
          fi
          
          if [ "${{ inputs.format }}" = "all" ]; then
            BUILD_HTML="true"
            BUILD_PDF="true"
          fi
          
          echo "📊 Build configuration:"
          echo "  Format input: '${{ inputs.format }}'"
          echo "  HTML format: $BUILD_HTML"
          echo "  PDF format: $BUILD_PDF"
          echo "  OS: ${{ matrix.os_name }}"
          
          echo "html_format=$BUILD_HTML" >> $GITHUB_OUTPUT
          echo "pdf_format=$BUILD_PDF" >> $GITHUB_OUTPUT

      - name: 🚦 Set Initial Build Status
        if: steps.should-run.outputs.should-run == 'true'
        shell: bash
        run: |
          echo "🚦 Setting initial build status to pending..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Quarto build started (${{ matrix.os_name }} container)\",
              \"context\": \"ci/quarto-build-${{ matrix.os }}-${{ inputs.format }}\"
            }"

      - name: 📥 Checkout repository
        if: steps.should-run.outputs.should-run == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Container Environment Info
        if: steps.should-run.outputs.should-run == 'true'
        shell: bash
        run: |
          echo "🔄 Container build environment information..."
          echo "📊 Container Configuration:"
          echo "  Registry: ${{ inputs.container_registry }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  Container: ${{ matrix.container_name }}"
          echo "  Tag: ${{ inputs.container_tag }}"
          echo "  Full Image: ${{ format('{0}/{1}/{2}:{3}', inputs.container_registry, github.repository, matrix.container_name, inputs.container_tag) }}"
          echo "  OS: ${{ matrix.os_name }}"
          echo ""
          echo "📊 Pre-installed versions:"
          echo "  Quarto: $(quarto --version)"
          echo "  Python: $(python3 --version)"
          echo "  R: $(R --version | head -1)"
          echo "  TeX Live: $(lualatex --version | head -1)"
          echo "📊 System resources:"
          echo "  Disk space: $(df -h . | tail -1)"
          echo "  Memory: $(free -h | grep Mem)"

      - name: 🔨 Build HTML (copy config and render)
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.html_format == 'true'
        shell: bash
        run: |
          echo "🚀 Setting up HTML configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-html.yml _quarto.yml
          echo "✅ Configuration set to HTML"
          
          echo "🔨 Building HTML..."
          echo "⏰ HTML build started at: $(date)"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building HTML content (${{ matrix.os_name }} container)\",
              \"context\": \"ci/quarto-build-${{ matrix.os }}-html\"
            }"
          
          quarto render --to html
          echo "✅ HTML build completed at: $(date)"
        
      - name: 🔨 Build PDF (copy config and render)
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.pdf_format == 'true'
        shell: bash
        run: |
          echo "🚀 Setting up PDF configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-pdf.yml _quarto.yml
          echo "✅ Configuration set to PDF"
          
          echo "🔨 Building PDF..."
          echo "⏰ PDF build started at: $(date)"
          echo "📊 This should be much faster with pre-installed dependencies"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building PDF content (${{ matrix.os_name }} container) - optimized\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-pdf\"
            }"
          
          quarto render --to titlepage-pdf
          echo "✅ PDF build completed at: $(date)"

      - name: 📉 Compress PDF with Ghostscript (Linux)
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.pdf_format == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          if [ -f "build/pdf/Machine-Learning-Systems.pdf" ]; then
            echo "📉 Compressing PDF using Ghostscript (Linux)..."
            gs \
              -sDEVICE=pdfwrite \
              -dCompatibilityLevel=1.4 \
              -dPDFSETTINGS=/ebook \
              -dNOPAUSE \
              -dQUIET \
              -dBATCH \
              -sOutputFile="./build/pdf/ebook.pdf" \
              "./build/pdf/Machine-Learning-Systems.pdf"

            mv ./build/pdf/ebook.pdf ./build/pdf/Machine-Learning-Systems.pdf
          else
            echo "⚠️ PDF file not found for compression"
          fi

      - name: 📉 Compress PDF with Ghostscript (Windows)
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.pdf_format == 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $input = "./build/pdf/Machine-Learning-Systems.pdf"
          $output = "./build/pdf/ebook.pdf"

          if (!(Test-Path $input)) {
            Write-Warning "⚠️ Input PDF not found! Skipping compression..."
            exit 0
          }

          Write-Output "📉 Compressing PDF using Ghostscript (Windows)..."
          & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel:1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile="$output" "$input"

          if (Test-Path $output) {
            Move-Item -Force $output $input
          } else {
            Write-Warning "⚠️ Compression failed but continuing"
          }

      - name: 📤 Upload HTML artifacts
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.html_format == 'true'
        id: upload-html-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('{0}-html-{1}', inputs.target, env.OS_NAME) }}
          path: build/html

      - name: 📤 Upload PDF artifacts
        if: steps.should-run.outputs.should-run == 'true' && steps.format-flags.outputs.pdf_format == 'true'
        id: upload-pdf-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('{0}-pdf-{1}', inputs.target, env.OS_NAME) }}
          path: build/pdf

      - name: 📋 Build Declaration
        if: steps.should-run.outputs.should-run == 'true'
        run: |
          HTML_ARTIFACT="${{ format('{0}-html-{1}', inputs.target, env.OS_NAME) }}"
          PDF_ARTIFACT="${{ format('{0}-pdf-{1}', inputs.target, env.OS_NAME) }}"
          echo "📦 Build Declaration: Successfully created artifacts"
          echo "📊 HTML Artifact: '$HTML_ARTIFACT' (enabled: ${{ steps.format-flags.outputs.html_format }})"
          echo "📊 PDF Artifact: '$PDF_ARTIFACT' (enabled: ${{ steps.format-flags.outputs.pdf_format }})"
          echo "📊 OS: ${{ inputs.os }}"
          echo "📊 Target: ${{ inputs.target }}"
          echo "📊 Method: Fast Container Build ($OS_NAME)"
          echo "📝 Note: This workflow only builds artifacts - deployment handled by publish-live workflow"
          echo "html_artifact=$HTML_ARTIFACT" >> $GITHUB_OUTPUT
          echo "pdf_artifact=$PDF_ARTIFACT" >> $GITHUB_OUTPUT

      - name: 🎯 Set Final Build Status
        if: always()
        shell: bash
        run: |
          echo "🎯 Setting final build status..."
          
          # Check if this job was supposed to run
          if [ "${{ steps.should-run.outputs.should-run }}" = "true" ]; then
            if [ "${{ job.status }}" = "success" ]; then
              STATE="success"
              DESCRIPTION="Build completed successfully (${{ matrix.os_name }} container)"
            else
              STATE="failure"
              DESCRIPTION="Build failed (${{ matrix.os_name }} container)"
            fi
            
            echo "📊 Final status: $STATE"
            echo "📝 Description: $DESCRIPTION"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -d "{
                \"state\": \"$STATE\",
                \"description\": \"$DESCRIPTION\",
                \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
              }"
            
            echo "✅ Commit status updated successfully"
          else
            echo "⏭️ Skipped matrix job for ${{ matrix.os_name }} (not requested)"
          fi

      - name: 📋 Build summary outputs
        id: build-summary
        if: always()
        shell: bash
        run: |
          # Determine build status and formats built
          if [ "${{ steps.should-run.outputs.should-run }}" = "true" ]; then
            # Check if builds were successful
            HTML_SUCCESS="${{ steps.build-html.outcome }}"
            PDF_SUCCESS="${{ steps.build-pdf.outcome }}"
            
            FORMATS_BUILT=""
            if [ "${{ steps.format-flags.outputs.html_format }}" = "true" ] && [ "$HTML_SUCCESS" = "success" ]; then
              FORMATS_BUILT="html"
            fi
            if [ "${{ steps.format-flags.outputs.pdf_format }}" = "true" ] && [ "$PDF_SUCCESS" = "success" ]; then
              if [ -n "$FORMATS_BUILT" ]; then
                FORMATS_BUILT="${FORMATS_BUILT},pdf"
              else
                FORMATS_BUILT="pdf"
              fi
            fi
            
            # Overall status
            if [ -n "$FORMATS_BUILT" ]; then
              BUILD_STATUS="success"
            else
              BUILD_STATUS="failure"
            fi
          else
            BUILD_STATUS="skipped"
            FORMATS_BUILT=""
          fi
          
          echo "status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "formats=$FORMATS_BUILT" >> $GITHUB_OUTPUT
          
          echo "📊 Build Status: $BUILD_STATUS"
          echo "📦 Formats Built: $FORMATS_BUILT"

 