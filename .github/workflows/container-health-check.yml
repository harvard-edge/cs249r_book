name: üíä Container Health Check

# Comprehensive health validation for build containers
# Tests essential Quarto build tools and functionality
# Runs daily to ensure container reliability

on:
  workflow_dispatch:
    inputs:
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to test'
        required: false
        default: 'latest'
        type: string
      test_linux:
        description: 'Test Linux container'
        required: false
        default: true
        type: boolean
      test_windows:
        description: 'Test Windows container'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to test'
        required: false
        default: 'latest'
        type: string
      test_linux:
        description: 'Test Linux container'
        required: false
        default: true
        type: boolean
      test_windows:
        description: 'Test Windows container'
        required: false
        default: true
        type: boolean
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

# Centralized Container Configuration - Single Source of Truth
env:
  REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  CONTAINER_TAG: ${{ inputs.container_tag || 'latest' }}
  LINUX_CONTAINER_NAME: 'quarto-linux'
  WINDOWS_CONTAINER_NAME: 'quarto-windows'
  # Computed full image names
  LINUX_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/quarto-linux:${{ inputs.container_tag || 'latest' }}
  WINDOWS_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/quarto-windows:${{ inputs.container_tag || 'latest' }}

jobs:
  # Matrix strategy for both container platforms
  container-health-check:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false  # Test both containers even if one fails
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            container_name: quarto-linux
            shell: bash
          - os: windows-latest
            platform: windows  
            container_name: quarto-windows
            shell: pwsh
    
    env:
      CONTAINER_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ matrix.container_name }}:${{ inputs.container_tag || 'latest' }}
      PLATFORM: ${{ matrix.platform }}
      
    steps:
      - name: üíæ Cache Docker Images
        if: |
          (matrix.platform == 'linux' && inputs.test_linux != false) ||
          (matrix.platform == 'windows' && inputs.test_windows != false)
        uses: actions/cache@v4
        id: cache-docker-images
        with:
          path: |
            ~/.docker
            ~/AppData/Local/Docker/wsl/data
          key: docker-${{ matrix.platform }}-${{ env.CONTAINER_IMAGE }}-${{ hashFiles('docker/**') }}
          restore-keys: |
            docker-${{ matrix.platform }}-${{ env.CONTAINER_IMAGE }}-
            docker-${{ matrix.platform }}-

      - name: üê≥ Pull Linux Container
        if: matrix.platform == 'linux' && inputs.test_linux != false
        shell: bash
        run: |
          echo "üê≥ Pulling Linux container..."
          echo "üì¶ Image: ${{ env.CONTAINER_IMAGE }}"
          echo "üíæ Cache Status: ${{ steps.cache-docker-images.outputs.cache-hit == 'true' && '‚úÖ HIT - faster pull expected' || '‚ùå MISS - full pull required' }}"
          
          # Check if image already exists locally (from cache)
          if docker image inspect ${{ env.CONTAINER_IMAGE }} >/dev/null 2>&1; then
            echo "‚úÖ Container image found locally - skipping pull"
          else
            echo "üì• Pulling container image..."
            docker pull ${{ env.CONTAINER_IMAGE }}
            echo "‚úÖ Container pulled successfully"
          fi

      - name: üê≥ Pull Windows Container
        if: matrix.platform == 'windows' && inputs.test_windows != false
        shell: pwsh
        run: |
          Write-Output "üê≥ Pulling Windows container..."
          Write-Output "üì¶ Image: ${{ env.CONTAINER_IMAGE }}"
          $cacheHit = "${{ steps.cache-docker-images.outputs.cache-hit }}"
          if ($cacheHit -eq 'true') {
            Write-Output "üíæ Cache Status: ‚úÖ HIT - faster pull expected"
          } else {
            Write-Output "üíæ Cache Status: ‚ùå MISS - full pull required"
          }
          
          # Check if image already exists locally (from cache)
          $imageExists = docker image inspect ${{ env.CONTAINER_IMAGE }}
          if ($LASTEXITCODE -eq 0) {
            Write-Output "‚úÖ Container image found locally - skipping pull"
          } else {
            Write-Output "üì• Pulling container image..."
            docker pull ${{ env.CONTAINER_IMAGE }}
            Write-Output "‚úÖ Container pulled successfully"
          }

      - name: üìä Container Information
        if: |
          (matrix.platform == 'linux' && inputs.test_linux != false) ||
          (matrix.platform == 'windows' && inputs.test_windows != false)
        run: |
          echo "üìä === CONTAINER INFORMATION ==="
          echo "üìã Platform: ${{ matrix.platform }}"
          echo "üìã Image: ${{ env.CONTAINER_IMAGE }}"
          echo "üìã Container Details:"
          docker images ${{ env.CONTAINER_IMAGE }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
          
          echo ""
          echo "üìä Container Size Analysis:"
          docker images ${{ env.CONTAINER_IMAGE }} --format "{{.Size}}"

      - name: üêß Linux Container - Tool Version Check
        if: matrix.platform == 'linux' && inputs.test_linux != false
        run: |
          echo "üêß === LINUX CONTAINER TOOL VERSIONS ==="
          echo "üìã Testing Linux tools with version capture:"
          echo "============================================"
          
          docker run --rm ${{ env.CONTAINER_IMAGE }} bash -c "
            echo 'üîç === LINUX CONTAINER TOOL VERSIONS ==='
            echo ''
            
            echo 'üìä QUARTO:'
            echo '----------'
            if command -v quarto >/dev/null 2>&1; then
              echo 'üìç Location: $(which quarto)'
              echo 'üìã Version: $(quarto --version 2>&1 | head -1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üìä PYTHON:'
            echo '-----------'
            if command -v python3 >/dev/null 2>&1; then
              echo 'üìç Location: $(which python3)'
              echo 'üìã Version: $(python3 --version 2>&1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üìä R:'
            echo '------'
            if command -v R >/dev/null 2>&1; then
              echo 'üìç Location: $(which R)'
              echo 'üìã Version: $(R --version 2>&1 | head -1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üìä LUALATEX:'
            echo '------------'
            if command -v lualatex >/dev/null 2>&1; then
              echo 'üìç Location: $(which lualatex)'
              echo 'üìã Version: $(lualatex --version 2>&1 | head -1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üìä GHOSTSCRIPT:'
            echo '---------------'
            if command -v gs >/dev/null 2>&1; then
              echo 'üìç Location: $(which gs)'
              echo 'üìã Version: $(gs --version 2>&1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üìä INKSCAPE:'
            echo '------------'
            if command -v inkscape >/dev/null 2>&1; then
              echo 'üìç Location: $(which inkscape)'
              echo 'üìã Version: $(inkscape --version 2>&1 | head -1)'
              echo '‚úÖ Status: OK'
            else
              echo '‚ùå Status: NOT FOUND'
            fi
            echo ''
            
            echo 'üéØ === LINUX TOOL CHECK COMPLETE ==='
            echo ''
            
            # Summary of all tool statuses
            echo 'üìã LINUX TOOL STATUS SUMMARY:'
            echo '=============================='
            
            # Check each tool and show status
            if command -v quarto >/dev/null 2>&1; then
              echo '‚úÖ Quarto: AVAILABLE'
            else
              echo '‚ùå Quarto: MISSING'
            fi
            
            if command -v python3 >/dev/null 2>&1; then
              echo '‚úÖ Python: AVAILABLE'
            else
              echo '‚ùå Python: MISSING'
            fi
            
            if command -v R >/dev/null 2>&1; then
              echo '‚úÖ R: AVAILABLE'
            else
              echo '‚ùå R: MISSING'
            fi
            
            if command -v lualatex >/dev/null 2>&1; then
              echo '‚úÖ LuaLaTeX: AVAILABLE'
            else
              echo '‚ùå LuaLaTeX: MISSING'
            fi
            
            if command -v gs >/dev/null 2>&1; then
              echo '‚úÖ Ghostscript: AVAILABLE'
            else
              echo '‚ùå Ghostscript: MISSING'
            fi
            
            if command -v inkscape >/dev/null 2>&1; then
              echo '‚úÖ Inkscape: AVAILABLE'
            else
              echo '‚ùå Inkscape: MISSING'
            fi
            
            echo ''
            
            # Check if any tools are missing and fail if so
            FAILED_TOOLS=0
            
            if ! command -v quarto >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if ! command -v python3 >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if ! command -v R >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if ! command -v lualatex >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if ! command -v gs >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if ! command -v inkscape >/dev/null 2>&1; then
              FAILED_TOOLS=$((FAILED_TOOLS + 1))
            fi
            
            if [ $FAILED_TOOLS -eq 0 ]; then
              echo 'üéØ ‚úÖ Linux container tool validation: PASSED'
              echo 'All essential Quarto build tools are available!'
            else
              echo \"üéØ ‚ùå Linux container tool validation: FAILED\"
              echo \"$FAILED_TOOLS essential tool(s) are missing!\"
              echo 'This container is NOT ready for Quarto builds.'
              exit 1
            fi
          " | tee linux-tool-versions.log
          
          echo "üìã Linux tool versions saved to linux-tool-versions.log"

      - name: ü™ü Windows Container - Tool Version Check
        if: matrix.platform == 'windows' && inputs.test_windows != false
        run: |
          Write-Output "ü™ü === WINDOWS CONTAINER TOOL VERSIONS ==="
          Write-Output "üìã Testing Windows tools with version capture:"
          Write-Output "=============================================="
          
          docker run --rm ${{ env.CONTAINER_IMAGE }} pwsh -Command "
            Write-Output 'üîç === WINDOWS CONTAINER TOOL VERSIONS ==='
            Write-Output ''
            
            # Check Scoop environment
            Write-Output 'üì¶ SCOOP ENVIRONMENT:'
            Write-Output '--------------------'
            if (Test-Path 'C:\Users\ContainerAdministrator\scoop') {
              Write-Output '‚úÖ Scoop directory found'
              if (Test-Path 'C:\Users\ContainerAdministrator\scoop\shims') {
                `$shimCount = (Get-ChildItem 'C:\Users\ContainerAdministrator\scoop\shims' -File | Measure-Object).Count
                Write-Output `"üìÅ Scoop shims directory: `$shimCount files`"
              }
            } else {
              Write-Output '‚ùå Scoop directory not found'
            }
            Write-Output ''
            
            Write-Output 'üìä QUARTO:'
            Write-Output '----------'
            try {
              `$quartoPath = Get-Command quarto -ErrorAction Stop
              Write-Output `"üìç Location: `$(`$quartoPath.Source)`"
              # Check if it's a Scoop shim
              if (`$quartoPath.Source -like '*scoop*') {
                Write-Output `"üì¶ Package Manager: Scoop`"
              }
              `$quartoVersion = & quarto --version 2>&1
              Write-Output `"üìã Version: `$quartoVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              Write-Output '‚ùå Status: NOT FOUND'
            }
            Write-Output ''
            
            Write-Output 'üìä PYTHON:'
            Write-Output '-----------'
            try {
              `$pythonPath = Get-Command python -ErrorAction Stop
              Write-Output `"üìç Location: `$(`$pythonPath.Source)`"
              # Check if it's a Scoop shim
              if (`$pythonPath.Source -like '*scoop*') {
                Write-Output `"üì¶ Package Manager: Scoop`"
              }
              `$pythonVersion = & python --version 2>&1
              Write-Output `"üìã Version: `$pythonVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              Write-Output '‚ùå Status: NOT FOUND'
            }
            Write-Output ''
            
            Write-Output 'üìä R:'
            Write-Output '------'
            try {
              # Try R.exe first, then R
              `$rPath = `$null
              try {
                `$rPath = Get-Command R.exe -ErrorAction Stop
              } catch {
                `$rPath = Get-Command R -ErrorAction Stop
              }
              Write-Output `"üìç Location: `$(`$rPath.Source)`"
              # Check if it's a Scoop shim
              if (`$rPath.Source -like '*scoop*') {
                Write-Output `"üì¶ Package Manager: Scoop`"
                Write-Output `"üìÅ Scoop Shim: `$(`$rPath.Source)`"
              }
              `$rVersion = & `$rPath.Name --version 2>&1 | Select-Object -First 1
              Write-Output `"üìã Version: `$rVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              Write-Output '‚ùå Status: NOT FOUND'
              # Debug: Check if Scoop directory exists
              if (Test-Path 'C:\Users\ContainerAdministrator\scoop\shims\R.exe') {
                Write-Output 'üîç Debug: Found R.exe in Scoop shims but Get-Command failed'
              }
            }
            Write-Output ''
            
            Write-Output 'üìä LUALATEX:'
            Write-Output '------------'
            try {
              `$lualatexPath = Get-Command lualatex -ErrorAction Stop
              Write-Output `"üìç Location: `$(`$lualatexPath.Source)`"
              `$lualatexVersion = & lualatex --version 2>&1 | Select-Object -First 1
              Write-Output `"üìã Version: `$lualatexVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              Write-Output '‚ùå Status: NOT FOUND'
            }
            Write-Output ''
            
            Write-Output 'üìä GHOSTSCRIPT:'
            Write-Output '---------------'
            try {
              `$gsPath = Get-Command gswin64c -ErrorAction Stop
              Write-Output `"üìç Location: `$(`$gsPath.Source)`"
              `$gsVersion = & gswin64c --version 2>&1
              Write-Output `"üìã Version: `$gsVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              try {
                `$gsPath = Get-Command gs -ErrorAction Stop
                Write-Output `"üìç Location: `$(`$gsPath.Source)`"
                `$gsVersion = & gs --version 2>&1
                Write-Output `"üìã Version: `$gsVersion`"
                Write-Output '‚úÖ Status: OK'
              } catch {
                Write-Output '‚ùå Status: NOT FOUND'
              }
            }
            Write-Output ''
            
            Write-Output 'üìä INKSCAPE:'
            Write-Output '------------'
            try {
              `$inkscapePath = Get-Command inkscape -ErrorAction Stop
              Write-Output `"üìç Location: `$(`$inkscapePath.Source)`"
              `$inkscapeVersion = & inkscape --version 2>&1 | Select-Object -First 1
              Write-Output `"üìã Version: `$inkscapeVersion`"
              Write-Output '‚úÖ Status: OK'
            } catch {
              Write-Output '‚ùå Status: NOT FOUND'
            }
            Write-Output ''
            
            Write-Output 'üéØ === WINDOWS TOOL CHECK COMPLETE ==='
            Write-Output ''
            
            # Summary of all tool statuses
            Write-Output 'üìã WINDOWS TOOL STATUS SUMMARY:'
            Write-Output '==============================='
            
            # Check each tool and show status
            try {
              Get-Command quarto -ErrorAction Stop | Out-Null
              Write-Output '‚úÖ Quarto: AVAILABLE'
            } catch {
              Write-Output '‚ùå Quarto: MISSING'
            }
            
            try {
              Get-Command python -ErrorAction Stop | Out-Null
              Write-Output '‚úÖ Python: AVAILABLE'
            } catch {
              Write-Output '‚ùå Python: MISSING'
            }
            
            try {
              if (Get-Command R.exe -ErrorAction SilentlyContinue) {
                Write-Output '‚úÖ R: AVAILABLE'
              } elseif (Get-Command R -ErrorAction SilentlyContinue) {
                Write-Output '‚úÖ R: AVAILABLE'
              } else {
                Write-Output '‚ùå R: MISSING'
              }
            } catch {
              Write-Output '‚ùå R: MISSING'
            }
            
            try {
              Get-Command lualatex -ErrorAction Stop | Out-Null
              Write-Output '‚úÖ LuaLaTeX: AVAILABLE'
            } catch {
              Write-Output '‚ùå LuaLaTeX: MISSING'
            }
            
            try {
              if (Get-Command gswin64c -ErrorAction SilentlyContinue) {
                Write-Output '‚úÖ Ghostscript: AVAILABLE'
              } elseif (Get-Command gs -ErrorAction SilentlyContinue) {
                Write-Output '‚úÖ Ghostscript: AVAILABLE'
              } else {
                Write-Output '‚ùå Ghostscript: MISSING'
              }
            } catch {
              Write-Output '‚ùå Ghostscript: MISSING'
            }
            
            try {
              Get-Command inkscape -ErrorAction Stop | Out-Null
              Write-Output '‚úÖ Inkscape: AVAILABLE'
            } catch {
              Write-Output '‚ùå Inkscape: MISSING'
            }
            
            Write-Output ''
            
            # Check if any tools are missing and fail if so
            `$FailedTools = 0
            
            try {
              Get-Command quarto -ErrorAction Stop | Out-Null
            } catch {
              `$FailedTools++
            }
            
            try {
              Get-Command python -ErrorAction Stop | Out-Null
            } catch {
              `$FailedTools++
            }
            
            try {
              if (-not (Get-Command R.exe -ErrorAction SilentlyContinue) -and -not (Get-Command R -ErrorAction SilentlyContinue)) {
                `$FailedTools++
              }
            } catch {
              `$FailedTools++
            }
            
            try {
              Get-Command lualatex -ErrorAction Stop | Out-Null
            } catch {
              `$FailedTools++
            }
            
            try {
              if (-not (Get-Command gswin64c -ErrorAction SilentlyContinue) -and -not (Get-Command gs -ErrorAction SilentlyContinue)) {
                `$FailedTools++
              }
            } catch {
              `$FailedTools++
            }
            
            try {
              Get-Command inkscape -ErrorAction Stop | Out-Null
            } catch {
              `$FailedTools++
            }
            
            if (`$FailedTools -eq 0) {
              Write-Output 'üéØ ‚úÖ Windows container tool validation: PASSED'
              Write-Output 'All essential Quarto build tools are available!'
            } else {
              Write-Output 'üéØ ‚ùå Windows container tool validation: FAILED'
              Write-Output \"Missing `$FailedTools essential tools - container not ready!\"
              Write-Output 'This container is NOT ready for Quarto builds.'
              exit 1
            }
            Write-Output ''
            
            # List all Scoop apps for debugging
            Write-Output 'üì¶ SCOOP INSTALLED APPS:'
            Write-Output '------------------------'
            if (Get-Command scoop -ErrorAction SilentlyContinue) {
              try {
                `$scoopApps = & scoop list 2>&1
                Write-Output `$scoopApps
              } catch {
                Write-Output 'Failed to list Scoop apps'
              }
            } else {
              Write-Output 'Scoop command not found'
            }
          " | Tee-Object -FilePath "windows-tool-versions.log"
          
          Write-Output "üìã Windows tool versions saved to windows-tool-versions.log"

      - name: üêß Linux Container - Quarto Check
        if: matrix.platform == 'linux' && inputs.test_linux != false
        continue-on-error: true  # Don't fail workflow if quarto check fails
        run: |
          echo "üêß === LINUX QUARTO CHECK (COMPREHENSIVE) ==="
          echo "üìã Running quarto check to validate full installation:"
          echo "===================================================="
          
          docker run --rm ${{ env.CONTAINER_IMAGE }} bash -c "
            echo 'üîç Running quarto check with enhanced raw output capture...'
            echo 'üìã Capturing full output for debugging...'
            echo ''
            
            # Set maximum verbosity for raw output
            export QUARTO_LOG_LEVEL=DEBUG
            export QUARTO_PRINT_STACK=true
            
            echo '‚è∞ Quarto check started at:' \$(date '+%Y-%m-%d %H:%M:%S')
            echo '--- RAW QUARTO CHECK OUTPUT START ---'
            echo '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'
            
            # Capture and display raw output with error handling
            if quarto check 2>&1 | while IFS= read -r line; do echo \"‚îÇ \$line\"; done; then
              QUARTO_EXIT_CODE=0
            else
              QUARTO_EXIT_CODE=\$?
            fi
            
            echo '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'
            echo '--- RAW QUARTO CHECK OUTPUT END ---'
            echo '‚è∞ Quarto check completed at:' \$(date '+%Y-%m-%d %H:%M:%S')
            echo ''
            
            # Determine final status
            if [ \$QUARTO_EXIT_CODE -eq 0 ]; then
              echo ''
              echo '‚úÖ Quarto check: PASSED - All components verified!'
              QUARTO_STATUS='PASSED'
            else
              echo ''
              echo '‚ùå Quarto check: FAILED - Issues detected!'
              echo 'üîç This indicates potential container configuration issues.'
              echo 'üìã Check the full output above for specific error details.'
              QUARTO_STATUS='FAILED'
            fi
            
            echo ''
            echo \"üìä QUARTO CHECK SUMMARY: \$QUARTO_STATUS\"
          " | tee linux-quarto-check.log
          
          echo "üìã Linux quarto check results saved to linux-quarto-check.log"
          
          # Also extract just the raw quarto check output for easy viewing
          if [ -f "linux-quarto-check.log" ]; then
            echo "üìÑ Extracting raw Quarto output..."
            grep -A 1000 "RAW QUARTO CHECK OUTPUT START" linux-quarto-check.log | \
            grep -B 1000 "RAW QUARTO CHECK OUTPUT END" | \
            sed '1d;$d' > linux-quarto-raw-output.txt || echo "Could not extract raw output"
            
            if [ -f "linux-quarto-raw-output.txt" ]; then
              echo "üìÑ Raw Quarto output extracted to linux-quarto-raw-output.txt"
              echo "üìä Raw output preview (first 10 lines):"
              head -10 linux-quarto-raw-output.txt | sed 's/^/    /'
            fi
          fi

      - name: ü™ü Windows Container - Quarto Check
        if: matrix.platform == 'windows' && inputs.test_windows != false
        continue-on-error: true  # Don't fail workflow if quarto check fails
        run: |
          Write-Output "ü™ü === WINDOWS QUARTO CHECK (COMPREHENSIVE) ==="
          Write-Output "üìã Running quarto check to validate full installation:"
          Write-Output "====================================================="

          # 1) Emit the inner script to a file (no escaping headaches)
          $inner = @'
          Write-Output "üîç Running enhanced Quarto diagnostics..."
          Write-Output "üìã Capturing comprehensive diagnostic information..."
          Write-Output ""

          Write-Output '--- SYSTEM DIAGNOSTIC INFO START ---'
          Write-Output 'üîß Environment Variables:'
          Write-Output ("PATH: {0}" -f $env:PATH)
          Write-Output ("QUARTO_LOG_LEVEL: {0}" -f $env:QUARTO_LOG_LEVEL)
          Write-Output ""

          Write-Output 'üîß Visual C++ Redistributable DLLs:'
          Get-ChildItem 'C:\Windows\System32' -Filter 'msvcp*.dll' -ErrorAction SilentlyContinue |
            Select-Object Name, Length |
            Format-Table -AutoSize | Out-String | Write-Output
          Get-ChildItem 'C:\Windows\System32' -Filter 'vcruntime*.dll' -ErrorAction SilentlyContinue |
            Select-Object Name, Length |
            Format-Table -AutoSize | Out-String | Write-Output
          Write-Output ""

          Write-Output 'üîß Quarto Installation Info:'
          try {
            $quartoCmd = Get-Command quarto.exe -ErrorAction Stop
            Write-Output ("Quarto.exe location: {0}" -f $quartoCmd.Source)
            Write-Output ("Quarto.exe file size: {0} bytes" -f (Get-Item $quartoCmd.Source).Length)
          } catch {
            Write-Output 'quarto.exe not found in PATH'
          }
          Write-Output '--- SYSTEM DIAGNOSTIC INFO END ---'
          Write-Output ""

                      # Run quarto check with enhanced error handling and raw output capture
            $quartoExitCode = 0
            try {
              Write-Output '--- QUARTO CHECK OUTPUT START ---'
              Write-Output 'üîç Setting maximum verbosity for raw output capture...'
              $env:QUARTO_LOG_LEVEL = 'DEBUG'
              $env:QUARTO_PRINT_STACK = 'true'
              
              # Capture raw output with timestamps
              Write-Output "‚è∞ Quarto check started at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
              $rawOutput = & quarto.exe check 2>&1
              $quartoExitCode = $LASTEXITCODE
              Write-Output "‚è∞ Quarto check completed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
              
              # Display raw output line by line with prefixes for clarity
              Write-Output 'üìã RAW QUARTO CHECK OUTPUT:'
              Write-Output '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'
              foreach ($line in $rawOutput) {
                Write-Output "‚îÇ $line"
              }
              Write-Output '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'
              
              Write-Output '--- QUARTO CHECK OUTPUT END ---'
            } catch {
            Write-Output '--- QUARTO CHECK EXCEPTION ---'
            Write-Output ("Exception Type: {0}" -f $($_.Exception.GetType().FullName))
            Write-Output ("Exception Message: {0}" -f $($_.Exception.Message))
            if ($_.Exception.InnerException) {
              Write-Output ("Inner Exception: {0}" -f $($_.Exception.InnerException.Message))
            }
            Write-Output '--- QUARTO CHECK EXCEPTION END ---'
            $quartoExitCode = 1
          }

          Write-Output ""
          if ($quartoExitCode -eq 0) {
            Write-Output '‚úÖ Quarto check: PASSED - All components verified!'
            $QuartoStatus = 'PASSED'
          } else {
            Write-Output '‚ùå Quarto check: FAILED - Issues detected!'
            Write-Output 'üîç This indicates potential container configuration issues.'
            Write-Output 'üìã Check the diagnostic information above for details.'
            Write-Output ("üìä Exit Code: {0}" -f $quartoExitCode)
            switch ($quartoExitCode) {
              -1073741515 { Write-Output 'üîç Exit code -1073741515 (0xC0000135): DLL not found - Missing Visual C++ Runtime or dependencies' }
              1            { Write-Output 'üîç Exit code 1: General error - Check Quarto dependencies' }
              default      { Write-Output ("üîç Exit code {0}: Unknown error - Check logs above" -f $quartoExitCode) }
            }
            $QuartoStatus = 'FAILED'
          }

          Write-Output ""
          Write-Output ("üìä QUARTO CHECK SUMMARY: {0}" -f $QuartoStatus)
          '@

          $scriptPath = Join-Path $PWD 'windows-quarto-check.ps1'
          Set-Content -Path $scriptPath -Value $inner -Encoding UTF8

          # 2) Run it inside the Windows container and tee the output
          docker run --rm `
            -v "${PWD}:C:\work" `
            ${{ env.CONTAINER_IMAGE }} `
            pwsh -NoProfile -ExecutionPolicy Bypass -File "C:\work\windows-quarto-check.ps1" `
          | Tee-Object -FilePath "windows-quarto-check.log"

          Write-Output "üìã Windows quarto check results saved to windows-quarto-check.log"
          
          # Also save just the raw quarto check output to a separate file for easy viewing
          if (Test-Path "windows-quarto-check.log") {
            $logContent = Get-Content "windows-quarto-check.log" -Raw
            if ($logContent -match 'üìã RAW QUARTO CHECK OUTPUT:(.*?)--- QUARTO CHECK OUTPUT END ---') {
              $rawOutput = $matches[1].Trim()
              $rawOutput | Out-File "windows-quarto-raw-output.txt" -Encoding UTF8
              Write-Output "üìÑ Raw Quarto output extracted to windows-quarto-raw-output.txt"
            }
          }

      - name: üìä Linux Container Analysis
        if: matrix.platform == 'linux' && inputs.test_linux != false
        run: |
          echo "LINUX CONTAINER TEST SUMMARY"
          echo "‚úÖ Container pulled successfully"
          echo "‚úÖ Essential tools validated with pass/fail status (Quarto, Python, R, LaTeX, Ghostscript, Inkscape)"
          echo "‚úÖ Quarto check completed"
          echo "‚úÖ Container size displayed"
          echo "‚úÖ Tool validation enforced - will FAIL if any essential tool missing"
          echo "LINUX CONTAINER TESTS COMPLETE"

      - name: üìä Windows Container Analysis
        if: matrix.platform == 'windows' && inputs.test_windows != false
        run: |
          Write-Output "WINDOWS CONTAINER TEST SUMMARY"
          Write-Output "‚úÖ Container pulled successfully"
          Write-Output "‚úÖ Essential tools validated with pass/fail status (Quarto, Python, R, LaTeX, Ghostscript, Inkscape)"
          Write-Output "‚úÖ Quarto check completed"
          Write-Output "‚úÖ Container size displayed"
          Write-Output "‚úÖ Tool validation enforced - will FAIL if any essential tool missing"
          Write-Output "WINDOWS CONTAINER TESTS COMPLETE"

      - name: üì§ Upload Test Artifacts
        if: always() && ((matrix.platform == 'linux' && inputs.test_linux != false) || (matrix.platform == 'windows' && inputs.test_windows != false))
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-container-test-results
          path: |
            ${{ matrix.platform == 'linux' && 'linux-tool-versions.log' || 'windows-tool-versions.log' }}
            ${{ matrix.platform == 'linux' && 'linux-quarto-check.log' || 'windows-quarto-check.log' }}
            ${{ matrix.platform == 'linux' && 'linux-quarto-raw-output.txt' || 'windows-quarto-raw-output.txt' }}
            ${{ matrix.platform == 'windows' && 'windows-quarto-check.ps1' || '' }}
          retention-days: 30
          if-no-files-found: warn

  # Final summary job
  final-summary:
    needs: container-health-check
    runs-on: ubuntu-latest
    if: always()  # Always run to provide summary
    
    steps:
      - name: üéØ Final Container Health Summary
        run: |
          echo "üéØ === FINAL CONTAINER HEALTH SUMMARY ==="
          echo "=========================================="
          echo ""
          
          # Get container sizes
          LINUX_IMAGE="${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/quarto-linux:${{ inputs.container_tag || 'latest' }}"
          WINDOWS_IMAGE="${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/quarto-windows:${{ inputs.container_tag || 'latest' }}"
          LINUX_SIZE=$(docker images "$LINUX_IMAGE" --format "{{.Size}}" 2>/dev/null || echo "Not available")
          WINDOWS_SIZE=$(docker images "$WINDOWS_IMAGE" --format "{{.Size}}" 2>/dev/null || echo "Not available")
          
          echo "üì¶ CONTAINER SIZES:"
          echo "------------------"
          echo "üêß Linux:   $LINUX_SIZE"
          echo "ü™ü Windows: $WINDOWS_SIZE"
          echo ""
          
          echo "üîç TEST RESULTS:"
          echo "---------------"
          echo "‚úÖ Container health checks completed"
          echo "‚úÖ All test artifacts uploaded"
          echo ""
          
          echo "üéØ FINAL STATUS:"
          echo "---------------"
          echo "üü¢ CONTAINER TESTING: COMPLETED SUCCESSFULLY ‚úÖ"
          echo "üìã Containers validated and ready for production use"
          echo "üìä Detailed logs available in artifacts"
          echo "========================================"