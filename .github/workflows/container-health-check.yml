name: 'üíä Container Health Check'

# Comprehensive health check for Quarto build containers  
# Tests that all critical tools (R, Quarto, Inkscape, TeX Live, etc.) are properly installed
# Used by other workflows to determine optimal build strategy

on:
  workflow_dispatch:  # üöÄ Manual trigger for testing and debugging
    inputs:
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to check'
      linux_container_name:
        required: false
        type: string
        default: 'quarto-linux'
        description: 'Linux container name'
      windows_container_name:
        required: false
        type: string
        default: 'quarto-windows'
        description: 'Windows container name'

      test_linux:
        required: false
        type: boolean
        default: true
        description: 'Test Linux container'
      test_windows:
        required: false
        type: boolean
        default: true
        description: 'Test Windows container'
  workflow_call:  # üìû Called by other workflows
    inputs:
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to check'
      linux_container_name:
        required: false
        type: string
        default: 'quarto-linux'
        description: 'Linux container name'
      windows_container_name:
        required: false
        type: string
        default: 'quarto-windows'
        description: 'Windows container name'
      test_linux:
        required: false
        type: boolean
        default: true
        description: 'Test Linux container'
      test_windows:
        required: false
        type: boolean
        default: true
        description: 'Test Windows container'

    outputs:
      linux-container-healthy:
        description: "Whether Linux container is healthy and ready"
        value: ${{ jobs.check-containers.outputs.container-healthy }}
      windows-container-healthy:
        description: "Whether Windows container is healthy and ready"
        value: ${{ jobs.check-containers.outputs.container-healthy }}
      containers-need-rebuild:
        description: "Whether containers need rebuilding"
        value: ${{ jobs.health-summary.outputs.need-rebuild }}
      container-strategy:
        description: "Recommended build strategy"
        value: ${{ jobs.health-summary.outputs.strategy }}
      linux-tools-status:
        description: "Linux container tools status"
        value: ${{ jobs.check-containers.outputs.tools-status }}
      windows-tools-status:
        description: "Windows container tools status"
        value: ${{ jobs.check-containers.outputs.tools-status }}

env:
  REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  LINUX_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.linux_container_name || 'quarto-linux' }}:${{ inputs.container_tag || 'latest' }}
  WINDOWS_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.windows_container_name || 'quarto-windows' }}:${{ inputs.container_tag || 'latest' }}

jobs:
  check-containers:
    name: üîç ${{ matrix.platform_name }} Container Health Check
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    # Run check if called by workflow_call OR if manual dispatch (platform filtering happens at step level)
    if: github.event_name == 'workflow_call' || github.event_name == 'workflow_dispatch'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            platform_name: üêß Linux
            runner: ubuntu-latest
            container_image_env: LINUX_IMAGE
            gs_command: gs
            shell: bash
          - platform: windows
            platform_name: ü™ü Windows
            runner: windows-latest
            container_image_env: WINDOWS_IMAGE
            gs_command: gswin64c
            shell: pwsh
    
    outputs:
      # Each platform's results will be captured in the health-summary job
      container-healthy: ${{ steps.health-check.outputs.healthy }}
      tools-status: ${{ steps.tool-check.outputs.status }}
      container-available: ${{ steps.availability.outputs.available }}
      platform: ${{ matrix.platform }}

    steps:
      - name: üéØ Check if platform should run
        id: should-run
        shell: bash
        run: |
          # For workflow_call, always run
          if [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Running via workflow_call - all platforms enabled"
          # For workflow_dispatch, check platform-specific inputs
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ inputs.test_linux }}" = "true" ]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Linux platform enabled for manual dispatch"
            elif [ "${{ matrix.platform }}" = "windows" ] && [ "${{ inputs.test_windows }}" = "true" ]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Windows platform enabled for manual dispatch"
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è ${{ matrix.platform }} platform disabled for manual dispatch"
            fi
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "‚ùå Unsupported event type: ${{ github.event_name }}"
          fi

      - name: üîç Check Linux container availability
        id: availability-linux
        if: steps.should-run.outputs.should_run == 'true' && matrix.platform == 'linux'
        shell: bash
        timeout-minutes: 15
        run: |
          echo "üîç Checking Linux container availability..."
          echo "üìä Image: ${{ env.LINUX_IMAGE }}"
          
          if docker manifest inspect "${{ env.LINUX_IMAGE }}" >/dev/null 2>&1; then
            echo "‚úÖ Linux container found"
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Linux container not found"
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      - name: üîç Check Windows container availability
        id: availability-windows
        if: steps.should-run.outputs.should_run == 'true' && matrix.platform == 'windows'
        shell: pwsh
        timeout-minutes: 15
        run: |
          Write-Output "üîç Checking Windows container availability..."
          Write-Output "üìä Image: ${{ env.WINDOWS_IMAGE }}"
          
          try {
            docker manifest inspect "${{ env.WINDOWS_IMAGE }}" | Out-Null
            Write-Output "‚úÖ Windows container manifest found"
            
            # Pre-pull the container to avoid timeout during tool testing
            Write-Output "üì¶ Pre-pulling Windows container (this may take a while for large containers)..."
            docker pull "${{ env.WINDOWS_IMAGE }}"
            Write-Output "‚úÖ Windows container pulled successfully"
            "available=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } catch {
            Write-Output "‚ùå Windows container not available or pull failed: $_"
            "available=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: üìä Set availability output
        id: availability
        if: steps.should-run.outputs.should_run == 'true'
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            echo "available=${{ steps.availability-linux.outputs.available }}" >> $GITHUB_OUTPUT
          else
            echo "available=${{ steps.availability-windows.outputs.available }}" >> $GITHUB_OUTPUT
          fi

      - name: üõ†Ô∏è Test critical tools (Linux)
        id: tool-check-linux
        if: steps.should-run.outputs.should_run == 'true' && steps.availability.outputs.available == 'true' && matrix.platform == 'linux'
        shell: bash
        timeout-minutes: 15
        run: |
            echo "üõ†Ô∏è Testing critical tools in Linux container..."
            
            # Test actual build commands used in workflows
            docker run --rm ${{ env.LINUX_IMAGE }} bash -c "
              echo '=== QUARTO ECOSYSTEM HEALTH CHECK ==='
              
              # Test Quarto version and check
              echo 'üîç Testing Quarto...'
              if quarto --version >/dev/null 2>&1; then
                echo 'üìç Quarto location: \$(which quarto)'
                echo '‚úÖ Quarto version: \$(quarto --version | head -1)'
                
                # Test quarto check (most important test!)
                echo 'üîç Running quarto check...'
                if quarto check; then
                  echo '‚úÖ Quarto check: PASSED'
                else
                  echo '‚ùå Quarto check: FAILED'
                  exit 1
                fi
              else
                echo '‚ùå Quarto: NOT INSTALLED'
                exit 1
              fi
              
              # Test Python (required for code execution)
              echo 'üîç Testing Python...'
              if python3 --version; then
                echo 'üìç Python location: \$(which python3)'
                echo '‚úÖ Python: WORKING'
              else
                echo '‚ùå Python: FAILED'
                exit 1
              fi
              
              # Test R (required for R code execution)
              echo 'üîç Testing R...'
              if R --version; then
                echo 'üìç R location: \$(which R)'
                echo '‚úÖ R: WORKING'
              else
                echo '‚ùå R: FAILED'
                exit 1
              fi
              
              # Test LaTeX (lualatex specifically for PDF builds)
              echo 'üîç Testing LaTeX...'
              if lualatex --version; then
                echo '‚úÖ LuaLaTeX: INSTALLED'
                
                # Test actual LaTeX compilation capability
                echo 'üîç Testing LaTeX compilation...'
                echo '\documentclass{article}\begin{document}Test\end{document}' > test.tex
                if lualatex -interaction=nonstopmode test.tex; then
                  echo '‚úÖ LaTeX compilation: WORKING'
                  rm -f test.tex test.pdf test.log test.aux
                else
                  echo '‚ùå LaTeX compilation: FAILED'
                  exit 1
                fi
              else
                echo '‚ùå LuaLaTeX: NOT INSTALLED'
                exit 1
              fi
              
              # Test Ghostscript (for PDF compression)
              echo 'üîç Testing Ghostscript...'
              if gs --version; then
                echo '‚úÖ Ghostscript: INSTALLED'
                
                # Test PDF compression with actual command used in builds
                echo 'üîç Testing PDF compression with real workflow command...'
                # Create a minimal test PDF first
                echo '\documentclass{article}\begin{document}Test PDF for compression\end{document}' > test-compress.tex
                if lualatex -interaction=nonstopmode test-compress.tex >/dev/null 2>&1; then
                  echo 'üìÑ Created test PDF for compression test'
                  
                  # Test the exact gs command used in quarto-build-container.yml
                  if gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=test-compressed.pdf test-compress.pdf; then
                    echo '‚úÖ Ghostscript PDF compression: WORKING (real workflow command)'
                    rm -f test-compress.* test-compressed.pdf
                  else
                    echo '‚ùå Ghostscript PDF compression: FAILED'
                    exit 1
                  fi
                else
                  echo '‚ö†Ô∏è Could not create test PDF, testing basic gs command...'
                  if gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dQUIET; then
                    echo '‚úÖ Ghostscript basic test: WORKING'
                  else
                    echo '‚ùå Ghostscript basic test: FAILED'
                    exit 1
                  fi
                fi
              else
                echo '‚ùå Ghostscript: NOT INSTALLED'
                exit 1
              fi
              
              # Test Inkscape (for SVG processing in books)
              echo 'üîç Testing Inkscape...'
              if inkscape --version; then
                echo '‚úÖ Inkscape: WORKING'
              else
                echo '‚ùå Inkscape: NOT INSTALLED'
                exit 1
              fi
              
              echo '‚úÖ All Quarto ecosystem tools are working!'
            " && echo "status=healthy" >> $GITHUB_OUTPUT || echo "status=unhealthy" >> $GITHUB_OUTPUT

      - name: üõ†Ô∏è Test critical tools (Windows)
        id: tool-check-windows
        if: steps.should-run.outputs.should_run == 'true' && steps.availability.outputs.available == 'true' && matrix.platform == 'windows'
        shell: pwsh
        timeout-minutes: 15
        run: |
          Write-Output "üõ†Ô∏è Testing critical tools in Windows container..."
            
            try {
              docker run --rm ${{ env.WINDOWS_IMAGE }} pwsh -Command "
                Write-Output '=== QUARTO ECOSYSTEM HEALTH CHECK (WINDOWS) ==='
                
                # Test Quarto version and check
                Write-Output 'üîç Testing Quarto...'
                try {
                  Write-Output ('üìç Quarto location: ' + (where.exe quarto))
                  quarto --version
                  Write-Output '‚úÖ Quarto: INSTALLED'
                  
                  # Test quarto check (most important test!)
                  Write-Output 'üîç Running quarto check...'
                  quarto check
                  Write-Output '‚úÖ Quarto check: PASSED'
                } catch {
                  Write-Output '‚ùå Quarto: FAILED'
                  exit 1
                }
                
                # Test Python (required for code execution)
                Write-Output 'üîç Testing Python...'
                try {
                  Write-Output ('üìç Python location: ' + (where.exe python3))
                  python3 --version
                  Write-Output '‚úÖ Python: WORKING'
                } catch {
                  Write-Output '‚ùå Python: FAILED'
                  exit 1
                }
                
                # Test R (required for R code execution)
                Write-Output 'üîç Testing R...'
                try {
                  Write-Output ('üìç R location: ' + (where.exe R))
                  & R --version
                  Write-Output '‚úÖ R: WORKING'
                } catch {
                  Write-Output '‚ùå R: FAILED'
                  exit 1
                }
                
                # Test LaTeX (lualatex specifically for PDF builds)
                Write-Output 'üîç Testing LaTeX...'
                try {
                  Write-Output ('üìç LuaLaTeX location: ' + (where.exe lualatex))
                  lualatex --version
                  Write-Output '‚úÖ LuaLaTeX: INSTALLED'
                  
                  # Test actual LaTeX compilation capability
                  Write-Output 'üîç Testing LaTeX compilation...'
                  '\documentclass{article}\begin{document}Test\end{document}' | Out-File -FilePath 'test.tex' -Encoding UTF8
                  lualatex -interaction=nonstopmode test.tex
                  Write-Output '‚úÖ LaTeX compilation: WORKING'
                  Remove-Item -Path 'test.*' -Force -ErrorAction SilentlyContinue
                } catch {
                  Write-Output '‚ùå LaTeX: FAILED'
                  exit 1
                }
                
                # Test Ghostscript (for PDF compression - Windows uses gswin64c)
                Write-Output 'üîç Testing Ghostscript...'
                try {
                  Write-Output ('üìç Ghostscript location: ' + (where.exe gswin64c))
                  gswin64c --version
                  Write-Output '‚úÖ Ghostscript: INSTALLED'
                  
                  # Test PDF compression with actual command used in builds
                  Write-Output 'üîç Testing PDF compression with real workflow command...'
                  # Create a minimal test PDF first
                  '\documentclass{article}\begin{document}Test PDF for compression\end{document}' | Out-File -FilePath 'test-compress.tex' -Encoding UTF8
                  try {
                    \$null = lualatex -interaction=nonstopmode test-compress.tex 2>\$null
                    Write-Output 'üìÑ Created test PDF for compression test'
                    
                    # Test the exact gswin64c command used in quarto-build-container.yml
                    gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel:1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile=test-compressed.pdf test-compress.pdf
                    Write-Output '‚úÖ Ghostscript PDF compression: WORKING (real workflow command)'
                    Remove-Item -Path 'test-compress.*', 'test-compressed.pdf' -Force -ErrorAction SilentlyContinue
                  } catch {
                    Write-Output '‚ö†Ô∏è Could not create test PDF, testing basic gswin64c command...'
                    gswin64c -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dQUIET
                    Write-Output '‚úÖ Ghostscript basic test: WORKING'
                  }
                } catch {
                  Write-Output '‚ùå Ghostscript: FAILED'
                  exit 1
                }
                
                Write-Output '‚úÖ All Quarto ecosystem tools are working!'
              "
              "status=healthy" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } catch {
              "status=unhealthy" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            }

      - name: üìä Set tool check output
        id: tool-check
        if: steps.should-run.outputs.should_run == 'true'
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            echo "status=${{ steps.tool-check-linux.outputs.status }}" >> $GITHUB_OUTPUT
          else
            echo "status=${{ steps.tool-check-windows.outputs.status }}" >> $GITHUB_OUTPUT
          fi

      - name: üéØ ${{ matrix.platform_name }} container health summary
        id: health-check
        if: always()
        shell: bash
        run: |
          # Check if platform should run
          if [ "${{ steps.should-run.outputs.should_run }}" != "true" ]; then
            echo "healthy=skipped" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è ${{ matrix.platform_name }} platform was skipped"
            exit 0
          fi
          
          # Linux/Bash version
          if [ "${{ matrix.platform }}" = "linux" ]; then
            if [ "${{ steps.availability.outputs.available }}" = "true" ] && [ "${{ steps.tool-check.outputs.status }}" = "healthy" ]; then
              echo "healthy=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Linux container is healthy and ready"
            else
              echo "healthy=false" >> $GITHUB_OUTPUT
              echo "‚ùå Linux container health check failed"
            fi
          fi
          
          # Windows version (using bash syntax)
          if [ "${{ matrix.platform }}" = "windows" ]; then
            if [ "${{ steps.availability.outputs.available }}" = "true" ] && [ "${{ steps.tool-check.outputs.status }}" = "healthy" ]; then
              echo "healthy=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Windows container is healthy and ready"
            else
              echo "healthy=false" >> $GITHUB_OUTPUT
              echo "‚ùå Windows container health check failed"
            fi
          fi

  health-summary:
    name: üìä Health Summary  
    needs: [check-containers]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      need-rebuild: ${{ steps.summary.outputs.need-rebuild }}
      strategy: ${{ steps.summary.outputs.strategy }}
    
    steps:
      - name: üìä Generate health summary
        id: summary
        run: |
          echo "üìä Container Health Summary"
          echo "=========================="
          
          # Extract results from matrix job
          LINUX_RESULT="${{ toJson(needs.check-containers.result) }}"
          WINDOWS_RESULT="${{ toJson(needs.check-containers.result) }}"
          
          # Get outputs from each matrix job - need to parse the matrix outputs
          # For now, we'll check if the overall job succeeded and parse from there
          MATRIX_OUTPUTS='${{ toJson(needs.check-containers.outputs) }}'
          
          # Default values
          LINUX_HEALTHY="unknown"
          WINDOWS_HEALTHY="unknown"
          LINUX_SKIPPED="false" 
          WINDOWS_SKIPPED="false"
          LINUX_FAILED="false"
          WINDOWS_FAILED="false"
          LINUX_CANCELLED="false"
          WINDOWS_CANCELLED="false"
          
          # Check overall job status
          if [ "${{ needs.check-containers.result }}" = "skipped" ]; then
            LINUX_SKIPPED="true"
            WINDOWS_SKIPPED="true"
          elif [ "${{ needs.check-containers.result }}" = "failure" ]; then
            LINUX_FAILED="true"
            WINDOWS_FAILED="true"
          elif [ "${{ needs.check-containers.result }}" = "cancelled" ]; then
            LINUX_CANCELLED="true" 
            WINDOWS_CANCELLED="true"
          elif [ "${{ needs.check-containers.result }}" = "success" ]; then
            # Assume healthy if job succeeded (simplified for now)
            LINUX_HEALTHY="true"
            WINDOWS_HEALTHY="true"
          fi
          
          # Create detailed status table
          echo ""
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
          echo "‚îÇ                   üè• CONTAINER HEALTH STATUS                   ‚îÇ"
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
          echo "‚îÇ Platform ‚îÇ Status    ‚îÇ Available ‚îÇ Tools ‚îÇ Result          ‚îÇ"
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
          
          # Linux status
          if [ "$LINUX_SKIPPED" = "true" ]; then
            echo "‚îÇ üêß Linux  ‚îÇ ‚è≠Ô∏è SKIP    ‚îÇ    ‚è≠Ô∏è      ‚îÇ  ‚è≠Ô∏è   ‚îÇ Not tested      ‚îÇ"
            LINUX_HEALTHY="skipped"
          elif [ "$LINUX_CANCELLED" = "true" ]; then
            echo "‚îÇ üêß Linux  ‚îÇ ‚èπÔ∏è CANCEL  ‚îÇ    ‚ùì      ‚îÇ  ‚ùì   ‚îÇ Cancelled       ‚îÇ"
            LINUX_HEALTHY="cancelled"
          elif [ "$LINUX_FAILED" = "true" ]; then
            echo "‚îÇ üêß Linux  ‚îÇ ‚ùå FAIL    ‚îÇ    ‚ùì      ‚îÇ  ‚ùì   ‚îÇ Failed          ‚îÇ"
            LINUX_HEALTHY="failed"
          elif [ "$LINUX_HEALTHY" = "true" ]; then
            echo "‚îÇ üêß Linux  ‚îÇ ‚úÖ HEALTHY ‚îÇ    ‚úÖ      ‚îÇ  ‚úÖ   ‚îÇ All tools OK    ‚îÇ"
          else
            echo "‚îÇ üêß Linux  ‚îÇ ‚ùå UNHEALTHY‚îÇ   ‚ùì      ‚îÇ  ‚ùå   ‚îÇ Tool issues     ‚îÇ"
          fi
          
          # Windows status
          if [ "$WINDOWS_SKIPPED" = "true" ]; then
            echo "‚îÇ ü™ü Windows‚îÇ ‚è≠Ô∏è SKIP    ‚îÇ    ‚è≠Ô∏è      ‚îÇ  ‚è≠Ô∏è   ‚îÇ Not tested      ‚îÇ"
            WINDOWS_HEALTHY="skipped"
          elif [ "$WINDOWS_CANCELLED" = "true" ]; then
            echo "‚îÇ ü™ü Windows‚îÇ ‚èπÔ∏è CANCEL  ‚îÇ    ‚ùì      ‚îÇ  ‚ùì   ‚îÇ Timeout/Cancel  ‚îÇ"
            WINDOWS_HEALTHY="cancelled"
          elif [ "$WINDOWS_FAILED" = "true" ]; then
            echo "‚îÇ ü™ü Windows‚îÇ ‚ùå FAIL    ‚îÇ    ‚ùì      ‚îÇ  ‚ùì   ‚îÇ Failed          ‚îÇ"
            WINDOWS_HEALTHY="failed"
          elif [ "$WINDOWS_HEALTHY" = "true" ]; then
            echo "‚îÇ ü™ü Windows‚îÇ ‚úÖ HEALTHY ‚îÇ    ‚úÖ      ‚îÇ  ‚úÖ   ‚îÇ All tools OK    ‚îÇ"
          else
            echo "‚îÇ ü™ü Windows‚îÇ ‚ùå UNHEALTHY‚îÇ   ‚ùì      ‚îÇ  ‚ùå   ‚îÇ Tool issues     ‚îÇ"
          fi
          
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
          echo ""
          
          # Tool status breakdown  
          echo "üõ†Ô∏è Tool Status Breakdown:"
          echo "========================"
          # Matrix jobs make it complex to extract individual platform results
          # For now, we'll use the overall status to determine tool health
          
          if [ "$LINUX_HEALTHY" = "true" ]; then
            echo "üêß Linux Container Tools:"
            echo "  ‚úÖ Quarto (with quarto check)"
            echo "  ‚úÖ Python3" 
            echo "  ‚úÖ R"
            echo "  ‚úÖ LuaLaTeX (with compilation test)"
            echo "  ‚úÖ Ghostscript (with PDF compression test)"
            echo "  ‚úÖ Inkscape"
          elif [ "$LINUX_HEALTHY" = "skipped" ]; then
            echo "üêß Linux Container: ‚è≠Ô∏è Skipped - no tool data"
          elif [ "$LINUX_HEALTHY" = "cancelled" ]; then
            echo "üêß Linux Container: ‚èπÔ∏è Cancelled - no tool data"
          else
            echo "üêß Linux Container: ‚ùå Failed health check - some tools may be missing"
          fi
          
          echo ""
          
          if [ "$WINDOWS_HEALTHY" = "true" ]; then
            echo "ü™ü Windows Container Tools:"
            echo "  ‚úÖ Quarto (with quarto check)"
            echo "  ‚úÖ Python3"
            echo "  ‚úÖ R" 
            echo "  ‚úÖ LuaLaTeX (with compilation test)"
            echo "  ‚úÖ Ghostscript/gswin64c (with PDF compression test)"
          elif [ "$WINDOWS_HEALTHY" = "skipped" ]; then
            echo "ü™ü Windows Container: ‚è≠Ô∏è Skipped - no tool data"
          elif [ "$WINDOWS_HEALTHY" = "cancelled" ]; then
            echo "ü™ü Windows Container: ‚èπÔ∏è Cancelled/Timeout - container may be too large or slow"
          else
            echo "ü™ü Windows Container: ‚ùå Failed health check - some tools may be missing"
          fi
          
          echo ""
          
          # Determine strategy based on what was tested and results
          HEALTHY_COUNT=0
          TOTAL_TESTED=0
          
          # Count healthy and tested containers
          if [ "$LINUX_HEALTHY" = "true" ]; then
            HEALTHY_COUNT=$((HEALTHY_COUNT + 1))
          fi
          if [ "$WINDOWS_HEALTHY" = "true" ]; then
            HEALTHY_COUNT=$((HEALTHY_COUNT + 1))
          fi
          if [ "$LINUX_HEALTHY" != "skipped" ]; then
            TOTAL_TESTED=$((TOTAL_TESTED + 1))
          fi
          if [ "$WINDOWS_HEALTHY" != "skipped" ]; then
            TOTAL_TESTED=$((TOTAL_TESTED + 1))
          fi
          
          # Determine strategy
          echo "üéØ Build Strategy Recommendation:"
          echo "================================="
          if [ "$HEALTHY_COUNT" -gt 0 ] && [ "$TOTAL_TESTED" -gt 0 ] && [ "$HEALTHY_COUNT" -eq "$TOTAL_TESTED" ]; then
            STRATEGY="container"
            NEED_REBUILD="false"
            if [ "$TOTAL_TESTED" -eq 1 ]; then
              echo "‚úÖ RESULT: Use container builds (tested container is healthy)"
            else
              echo "‚úÖ RESULT: Use container builds (all tested containers healthy)"
            fi
            echo "üöÄ Action: Use existing containers for fast builds"
          elif [ "$HEALTHY_COUNT" -gt 0 ]; then
            STRATEGY="hybrid"
            NEED_REBUILD="false"
            echo "‚ö° RESULT: Use hybrid approach (some containers healthy)"
            echo "üîÑ Action: Use healthy containers where possible, fallback for others"
          elif [ "$TOTAL_TESTED" -eq 0 ]; then
            STRATEGY="unknown"
            NEED_REBUILD="true"
            echo "‚ùì RESULT: Cannot determine strategy (no containers tested)"
            echo "üîç Action: Run health check with containers enabled"
          else
            STRATEGY="baremetal" 
            NEED_REBUILD="true"
            echo "üîß RESULT: Use baremetal builds (no healthy containers)"
            echo "üèóÔ∏è Action: Rebuild containers or use GitHub runners directly"
          fi
          
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "need-rebuild=$NEED_REBUILD" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìã Summary:"
          echo "  Strategy: $STRATEGY"
          echo "  Rebuild needed: $NEED_REBUILD"
          echo "  Tested: $TOTAL_TESTED containers"
          echo "  Healthy: $HEALTHY_COUNT containers"
