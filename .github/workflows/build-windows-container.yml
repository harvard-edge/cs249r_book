name: '🐳 Build Windows Container'

# This workflow builds the Windows Quarto build container
# Windows containers are more complex but provide performance benefits

# Prevent multiple builds running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean
      no_cache:
        description: 'Disable Docker build cache (fresh build)'
        required: false
        default: false
        type: boolean
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_name:
        description: 'Container image name'
        required: false
        default: 'quarto-windows'
        type: string
      container_tag:
        description: 'Container tag'
        required: false
        default: 'latest'
        type: string
  workflow_call:
    inputs:
      force_rebuild:
        required: false
        default: false
        type: boolean
      no_cache:
        required: false
        default: false
        type: boolean
      container_registry:
        required: false
        default: 'ghcr.io'
        type: string
      container_name:
        required: false
        default: 'quarto-windows'
        type: string
      container_tag:
        required: false
        default: 'latest'
        type: string
        
    outputs:
      build-status:
        description: "Container build status (success/failure/skipped)"
        value: ${{ jobs.build.outputs.build-status }}
      image-name:
        description: "Full container image name with registry"
        value: ${{ jobs.build.outputs.image-name }}
      image-digest:
        description: "Container image digest (SHA256)"
        value: ${{ jobs.build.outputs.image-digest }}
      cache-hit:
        description: "Whether build used cache (true/false)"
        value: ${{ jobs.build.outputs.cache-hit }}
        
  # Re-enable automatic triggers
  schedule:
    - cron: '0 2 * * 0'  # Weekly rebuild (Sunday at 2am - after Linux container)
  push:
    paths:
      - 'tools/dependencies/**'
      - 'docker/windows/**'
      - '.github/workflows/build-windows-container.yml'

env:
  # Container Registry Configuration (configurable via inputs)
  REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ github.repository }}/${{ inputs.container_name || 'quarto-windows' }}
  CONTAINER_TAG: ${{ inputs.container_tag || 'latest' }}
  
  # Container Build Configuration
  DOCKERFILE_PATH: ./docker/windows/Dockerfile
  CONTEXT_PATH: .

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180 # takes about 2 hours to build on Windows
    permissions:
      contents: read
      packages: write

    outputs:
      build-status: ${{ steps.build.outputs.build-status }}
      image-name: ${{ steps.build.outputs.image-name }}
      image-digest: ${{ steps.build.outputs.image-digest }}
      cache-hit: ${{ steps.build.outputs.cache-hit }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.CONTAINER_TAG }}

      - name: 🐳 Build and Push Windows container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: ${{ inputs.no_cache }}

      - name: 📊 Build Summary
        id: build-summary
        if: always()
        run: |
          # Determine build status
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            BUILD_STATUS="success"
          else
            BUILD_STATUS="failure"
          fi
          
          # Extract build information
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }}"
          IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
          CACHE_HIT="${{ steps.build.outputs.cache-hit }}"
          
          echo "build-status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image-digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "cache-hit=$CACHE_HIT" >> $GITHUB_OUTPUT
          
          echo "📊 Build Status: $BUILD_STATUS"
          echo "🐳 Image: $IMAGE_NAME"
          echo "🔍 Digest: $IMAGE_DIGEST"
          echo "💾 Cache Hit: $CACHE_HIT"
