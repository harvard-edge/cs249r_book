name: '🐳 Build Windows Container'

# This workflow builds the Windows Quarto build container
# Windows containers are more complex but provide performance benefits

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean
      no_cache:
        description: 'Disable Docker build cache (fresh build)'
        required: false
        default: false
        type: boolean
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_name:
        description: 'Container image name'
        required: false
        default: 'quarto-windows'
        type: string
      container_tag:
        description: 'Container tag'
        required: false
        default: 'latest'
        type: string
  workflow_call:
    inputs:
      force_rebuild:
        required: false
        default: false
        type: boolean
      no_cache:
        required: false
        default: false
        type: boolean
      container_registry:
        required: false
        default: 'ghcr.io'
        type: string
      container_name:
        required: false
        default: 'quarto-windows'
        type: string
      container_tag:
        required: false
        default: 'latest'
        type: string
  # DISABLED: Automatic triggers while working on containers
  # schedule:
  #   - cron: '0 2 * * 0'  # Weekly rebuild (Sunday at 2am - after Linux container)
  # push:
  #   paths:
  #     - 'tools/dependencies/**'
  #     - 'docker/build-quarto-windows/**'
  #     - '.github/workflows/build-windows-container.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: harvard-edge/cs249r_book/quarto-windows
  CONTAINER_TAG: latest
  DOCKERFILE_PATH: ./docker/build-quarto-windows/Dockerfile
  CONTEXT_PATH: .

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.CONTAINER_TAG }}

      - name: 🐳 Build Windows container locally for testing
        run: |
          echo "🚀 Building Windows container locally..."
          $useNoCache = "${{ inputs.no_cache }}" -eq "true"
          if ($useNoCache) {
            echo "📊 Cache mode: DISABLED (fresh build - manual trigger or no_cache=true)"
            echo "🔄 Building with --no-cache flag (fresh build)..."
            docker build --no-cache -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }} -f ${{ env.DOCKERFILE_PATH }} ${{ env.CONTEXT_PATH }}
          } else {
            echo "📊 Cache mode: ENABLED (faster build - called via build manager)" 
            echo "🔄 Building with cache enabled (faster build)..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }} -f ${{ env.DOCKERFILE_PATH }} ${{ env.CONTEXT_PATH }}
          }
          
          echo "✅ Local container build completed"
          echo "📊 Verifying local image exists..."
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }}

      - name: 🐳 Push Windows container to registry
        run: |
          echo "📦 Pushing container to registry..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }}
          
          echo "✅ Container push completed"

      - name: Note: Make container public manually
        run: |
          echo "📝 Note: Container has been pushed to registry"
          echo "📝 To make it public, visit: https://github.com/orgs/harvard-edge/packages"
          echo "📝 Or run: gh api -X PATCH /orgs/harvard-edge/packages/container/${{ env.IMAGE_NAME }}/visibility -f visibility=public"

      - name: Build Complete
        run: |
          echo "✅ Windows container build completed successfully!"
          echo "📊 Container pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }}"

      - name: Container Info
        run: |
          echo "✅ Container built and tested successfully"
          echo "📊 Registry: ${{ env.REGISTRY }}"
          echo "📊 Image: ${{ env.IMAGE_NAME }}"
          echo "📊 Tag: ${{ env.CONTAINER_TAG }}"
          LOCAL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CONTAINER_TAG }}"
          echo "📊 Size: $(docker images $LOCAL_IMAGE --format '{{.Size}}')"
          
          echo ""
          echo "🚀 Usage in workflows:"
          echo "container:"
          echo "  image: $LOCAL_IMAGE"
          echo "  options: --user root"
          
          echo ""
          echo "🧪 Tests performed:"
          echo "✅ Quarto functionality"
          echo "✅ Python packages (all from requirements.txt)"
          echo "✅ R packages (all from install_packages.R)"
          echo "✅ TeX Live and LaTeX engines"
          echo "✅ Inkscape SVG to PDF conversion"
          echo "✅ Ghostscript PDF compression"
          echo "✅ Fonts and graphics libraries"
          echo "✅ Quarto render test"
          echo "✅ TikZ compilation test"
          echo "✅ System resources check"
