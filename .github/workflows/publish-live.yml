name: '🚀 Publish Live'

# Manual trigger only - big red button!
on:
  workflow_dispatch:
    inputs:
      description:
        description: 'What are you publishing? (brief description)'
        required: true
        default: ''
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor' 
          - 'major'
        default: 'minor'
      dev_commit:
        description: 'Specific dev commit to publish (required)'
        required: true
        default: ''
      confirm:
        description: 'Type "PUBLISH" to confirm'
        required: true
        default: ''
      ai_model:
        description: 'AI model for release notes (default: gemma2:9b)'
        required: false
        default: 'gemma2:9b'

permissions:
  contents: write
  actions: read

jobs:
  validate-and-publish:
    name: '🔍 Validate & Publish'
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Validate dev commit
        run: |
          echo "🔍 Validating dev commit..."
          
          # Get the commit to validate
          COMMIT_SHA="${{ github.event.inputs.dev_commit }}"
          echo "📌 Using specified commit: $COMMIT_SHA"
          
          # Verify commit exists and is from dev branch
          if ! git cat-file -e "$COMMIT_SHA" 2>/dev/null; then
            echo "❌ Commit $COMMIT_SHA does not exist!"
            exit 1
          fi
          
          if ! git merge-base --is-ancestor "$COMMIT_SHA" origin/dev; then
            echo "❌ Commit $COMMIT_SHA is not in dev branch!"
            exit 1
          fi
          
          echo "✅ Commit $COMMIT_SHA is valid and from dev branch"
          echo "✅ Ready to publish (workflow validation skipped)"

      - name: 🏷️ Calculate Next Version
        id: version
        run: |
          echo "🔄 Getting latest release version..."
          
          # Use provided previous version or auto-detect
          if [ -n "${{ github.event.inputs.previous_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.previous_version }}"
            echo "📌 Using provided previous version: $LATEST_VERSION"
          else
            # Get latest release version, default to v0.0.0 if no releases exist
            LATEST_VERSION=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
              | jq -r '.tag_name // "v0.0.0"')
            echo "📊 Auto-detected latest version: $LATEST_VERSION"
          fi
          
          # Remove 'v' prefix for calculation
          VERSION_NUM=${LATEST_VERSION#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          
          # Handle empty or invalid versions
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          echo "📊 Previous version components: $MAJOR.$MINOR.$PATCH"
          
          # Calculate new version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "🎯 New version: $NEW_VERSION (${{ github.event.inputs.release_type }} release)"
          echo "📋 Description: ${{ github.event.inputs.description }}"
          
          # Export for other steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "previous_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: 🔄 Merge dev to main
        run: |
          echo "🔄 Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "🔄 Switching to main branch..."
          git checkout main
          git pull origin main
          
          echo "🔍 Checking for potential merge conflicts..."
          # Test merge without committing
          if ! git merge --no-commit --no-ff origin/dev 2>/dev/null; then
            echo "❌ MERGE CONFLICTS DETECTED!"
            echo "🛑 Automated merge cannot proceed due to conflicts."
            echo "📋 Please resolve conflicts manually:"
            echo "   1. git checkout main"
            echo "   2. git pull origin main" 
            echo "   3. git merge dev"
            echo "   4. Resolve conflicts and commit"
            echo "   5. git push origin main"
            git merge --abort
            exit 1
          fi
          git reset --hard HEAD  # Clean up test merge
          
          echo "✅ No conflicts detected. Proceeding with merge..."
          echo "🔄 Merging dev into main..."
          
          # Determine which commit to merge
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            MERGE_COMMIT="${{ github.event.inputs.dev_commit }}"
            echo "📌 Merging specific commit: $MERGE_COMMIT"
          else
            MERGE_COMMIT="origin/dev"
            echo "📊 Merging latest dev: $MERGE_COMMIT"
          fi
          
          git merge "$MERGE_COMMIT" --no-ff -m "🚀 Release ${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}

          Merged dev branch to main for publication.
          
          Release Type: ${{ github.event.inputs.release_type }}
          Published by: ${{ github.actor }}
          Dev Commit: ${MERGE_COMMIT}
          Specific Commit: ${{ github.event.inputs.dev_commit || 'latest' }}
          Description: ${{ github.event.inputs.description }}"
          
          echo "✅ Merge completed successfully!"

      - name: 🏷️ Create Release Tag
        run: |
          echo "🏷️ Creating release tag ${{ steps.version.outputs.new_version }}..."
          git tag -a ${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}"
          echo "✅ Tag created successfully!"

      - name: 🚀 Push to main and trigger production deployment
        run: |
          echo "🚀 Pushing to main branch with tags..."
          git push origin main --tags
          
          echo "📊 Main branch updated! This will trigger:"
          echo "  ✅ Production build workflow (HTML + PDF generation)"
          echo "  ✅ GitHub Pages deployment with textbook content"
          echo "  ✅ Live academic website update"
          echo ""
          echo "🌐 Your textbook will be live at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "📚 Students can access the updated content immediately"

      - name: ⏳ Wait for Production Build
        run: |
          echo "⏳ Waiting for production build to complete before creating release..."
          echo "🔍 Looking for recent workflow runs on main branch..."
          sleep 30  # Give the build a moment to start
          
          # Wait for the build to complete with better detection
          for i in {1..240}; do
            echo "🔍 Checking build status (attempt $i/240)..."
            
            # Get recent workflow runs
            WORKFLOW_RESPONSE=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=main&per_page=10")
            
            # Check for successful controller workflow runs
            SUCCESSFUL_BUILD=$(echo "$WORKFLOW_RESPONSE" | jq -r '.workflow_runs[] | select(.name == "🎮 Controller" and .conclusion == "success") | .id' | head -1)
            
            if [ -n "$SUCCESSFUL_BUILD" ] && [ "$SUCCESSFUL_BUILD" != "null" ]; then
              echo "✅ Production build completed successfully!"
              echo "📊 Build run ID: $SUCCESSFUL_BUILD"
              echo "🔗 View build: https://github.com/${{ github.repository }}/actions/runs/$SUCCESSFUL_BUILD"
              break
            fi
            
            # Check for failed builds
            FAILED_BUILD=$(echo "$WORKFLOW_RESPONSE" | jq -r '.workflow_runs[] | select(.name == "🎮 Controller" and .conclusion == "failure") | .id' | head -1)
            if [ -n "$FAILED_BUILD" ] && [ "$FAILED_BUILD" != "null" ]; then
              echo "❌ Production build failed!"
              echo "🔗 View failed build: https://github.com/${{ github.repository }}/actions/runs/$FAILED_BUILD"
              exit 1
            fi
            
            # Check for running builds and show progress
            RUNNING_BUILD=$(echo "$WORKFLOW_RESPONSE" | jq -r '.workflow_runs[] | select(.name == "🎮 Controller" and .status == "in_progress") | .id' | head -1)
            if [ -n "$RUNNING_BUILD" ] && [ "$RUNNING_BUILD" != "null" ]; then
              echo "🔄 Build is actively running (ID: $RUNNING_BUILD)"
              echo "🔗 Monitor: https://github.com/${{ github.repository }}/actions/runs/$RUNNING_BUILD"
            fi
            
            # Show current status with time elapsed
            ELAPSED_MINUTES=$((i * 30 / 60))
            ELAPSED_HOURS=$((ELAPSED_MINUTES / 60))
            REMAINING_MINUTES=$((ELAPSED_MINUTES % 60))
            
            if [ $ELAPSED_HOURS -gt 0 ]; then
              TIME_DISPLAY="${ELAPSED_HOURS}h ${REMAINING_MINUTES}m"
            else
              TIME_DISPLAY="${ELAPSED_MINUTES}m"
            fi
            
            echo "⏳ Build still in progress... (attempt $i/240, ~${TIME_DISPLAY} elapsed)"
            echo "📊 Recent workflow runs:"
            echo "$WORKFLOW_RESPONSE" | jq -r '.workflow_runs[] | "  - \(.name): \(.conclusion // .status) (\(.created_at))"' | head -5
            
            # Show build progress indicators
            if [ $i -eq 1 ]; then
              echo "📋 Expected build timeline:"
              echo "  0-15m: Initial setup and quality checks"
              echo "  15-30m: Quarto build and PDF generation"
              echo "  30-45m: PDF compression and processing"
              echo "  45-60m: GitHub Pages deployment"
              echo "  60-90m: Asset copying and finalization"
              echo "  90m+: Extended processing (if needed)"
            fi
            
            sleep 30
          done
          
          # If we get here, the build might still be running
          echo "⚠️ Build may still be in progress after 2 hours"
          echo "📊 Latest workflow status:"
          echo "$WORKFLOW_RESPONSE" | jq -r '.workflow_runs[] | "  - \(.name): \(.conclusion // "in_progress")"' | head -3

      - name: 📄 Download Built PDF from Artifacts
        run: |
          echo "📄 Downloading built PDF from artifacts..."
          
          # Download the latest successful build artifacts
          LATEST_BUILD=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=main&status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')
          
          if [ "$LATEST_BUILD" = "null" ] || [ -z "$LATEST_BUILD" ]; then
            echo "❌ No successful builds found!"
            exit 1
          fi
          
          echo "📊 Found latest successful build: $LATEST_BUILD"
          
          # Download artifacts from the latest build
          ARTIFACTS_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts")
          
          # Find the PDF artifact
          PDF_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | select(.name | contains("pdf")) | .id' | head -1)
          
          if [ "$PDF_ARTIFACT" = "null" ] || [ -z "$PDF_ARTIFACT" ]; then
            echo "❌ No PDF artifact found in build $LATEST_BUILD"
            echo "📊 Available artifacts:"
            echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | "  - \(.name) (ID: \(.id))"'
            exit 1
          fi
          
          echo "📄 Found PDF artifact: $PDF_ARTIFACT"
          
          # Download the artifact
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts/$PDF_ARTIFACT/zip" \
            -o pdf-artifact.zip
          
          # Extract the PDF
          unzip -q pdf-artifact.zip
          
          # Find the PDF file
          PDF_FILE=$(find . -name "Machine-Learning-Systems.pdf" -type f | head -1)
          
          if [ -z "$PDF_FILE" ] || [ ! -f "$PDF_FILE" ]; then
            echo "❌ PDF file not found in extracted artifacts!"
            echo "📊 Extracted files:"
            find . -type f | head -20
            exit 1
          fi
          
          echo "✅ PDF found: $PDF_FILE"
          echo "📊 PDF size: $(du -h "$PDF_FILE" | cut -f1)"
          
          # Copy to a standard location
          cp "$PDF_FILE" "Machine-Learning-Systems.pdf"
          echo "✅ PDF ready for release: Machine-Learning-Systems.pdf"

      - name: 📝 Generate AI Release Notes
        run: |
          echo "📝 Generating AI-powered release notes..."
          
          # Install Python dependencies
          python -m pip install --upgrade pip
          python -m pip install openai requests
          
          # Install Ollama
          echo "🤖 Installing Ollama..."
          curl -fsSL https://ollama.ai/install.sh | sh
          
          # Start Ollama service
          echo "🚀 Starting Ollama service..."
          ollama serve &
          sleep 10  # Wait for service to start
          
          # Pull the model (configurable via workflow input)
          MODEL="${{ github.event.inputs.ai_model || 'gemma2:9b' }}"
          echo "📦 Pulling AI model: $MODEL"
          ollama pull $MODEL
          
          # Test Ollama connection
          echo "🧪 Testing Ollama connection..."
          if ollama list | grep -q "$MODEL"; then
            echo "✅ Ollama model ready: $MODEL"
          else
            echo "❌ Failed to pull model: $MODEL"
            exit 1
          fi
          
          # Generate release notes using your existing AI system
          echo "📝 Generating release notes with AI..."
          python tools/scripts/maintenance/update_changelog.py \
            --release-notes \
            --version ${{ steps.version.outputs.new_version }} \
            --previous-version ${{ steps.version.outputs.previous_version }} \
            --description "${{ github.event.inputs.description }}" \
            --model $MODEL \
            --verbose
          
          # Check if release notes were generated
          if [ -f "release_notes_${{ steps.version.outputs.new_version }}.md" ]; then
            echo "✅ AI release notes generated successfully"
            cat "release_notes_${{ steps.version.outputs.new_version }}.md"
          else
            echo "⚠️ AI release notes generation failed, trying fallback..."
            
            # Try without AI (basic analysis)
            echo "🔄 Attempting basic release notes generation..."
            python tools/scripts/maintenance/update_changelog.py \
              --release-notes \
              --version ${{ steps.version.outputs.new_version }} \
              --previous-version ${{ steps.version.outputs.previous_version }} \
              --description "${{ github.event.inputs.description }}" \
              --openai \
              --verbose || {
              echo "⚠️ Basic generation also failed, using template"
              # Fallback to basic release notes template
              cat > "release_notes_${{ steps.version.outputs.new_version }}.md" << EOF
          ## 📚 Release ${{ steps.version.outputs.new_version }}
          
          **${{ github.event.inputs.description }}**
          
          ### 📋 Release Information
          - **Type**: ${{ steps.version.outputs.release_type }} release
          - **Previous Version**: ${{ steps.version.outputs.previous_version }}
          - **Published by**: ${{ github.actor }}
          - **Published at**: $(date)
          
          ### 📖 What's Included
          - Updated interactive web version at [mlsysbook.ai](https://mlsysbook.ai)
          - Complete PDF textbook available for download
          - All chapters, exercises, and lab materials as of commit $(git rev-parse HEAD)
          - Compatible with MIT Press publication standards
          
          ### 📝 Changes
          ${{ github.event.inputs.description }}
          
          ### 🔗 Quick Links
          - 🌐 [Read Online](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})
          - 📄 [Download PDF](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/Machine-Learning-Systems.pdf)
          - 📄 [Direct PDF Link](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf)
          
          ---
          *Note: AI analysis was unavailable, using template release notes*
          EOF
            }
          fi

      - name: 📦 Create GitHub Release with PDF
        run: |
          echo "📦 Creating GitHub Release ${{ steps.version.outputs.new_version }}..."
          echo "📋 Release details:"
          echo "  - Tag: ${{ steps.version.outputs.new_version }}"
          echo "  - Name: ${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}"
          echo "  - Repository: ${{ github.repository }}"
          
          # Use the AI-generated release notes
          RELEASE_NOTES_FILE="release_notes_${{ steps.version.outputs.new_version }}.md"
          
          if [ -f "$RELEASE_NOTES_FILE" ]; then
            echo "📄 Using AI-generated release notes:"
            cat "$RELEASE_NOTES_FILE"
          else
            echo "❌ Release notes file not found!"
            exit 1
          fi
          
          # Create the release as a DRAFT for manual editing
          echo "🚀 Creating GitHub release as DRAFT..."
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"${{ steps.version.outputs.new_version }}\",
              \"name\": \"${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}\",
              \"body\": \"$(cat $RELEASE_NOTES_FILE | sed 's/"/\\"/g' | tr '\n' '\\n')\",
              \"draft\": true,
              \"prerelease\": false
            }")
          
          echo "📊 API Response:"
          echo "$RELEASE_RESPONSE" | jq '.'
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          RELEASE_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.html_url')
          
          if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
            echo "✅ Draft release created successfully!"
            echo "📊 Release ID: $RELEASE_ID"
            echo "🔗 Release URL: $RELEASE_URL"
            echo "📝 Next step: Edit release notes manually and publish"
            echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
            echo "release_url=$RELEASE_URL" >> $GITHUB_ENV
          else
            echo "❌ Failed to create release!"
            echo "📊 Error details:"
            echo "$RELEASE_RESPONSE" | jq -r '.message // "Unknown error"'
            echo "$RELEASE_RESPONSE" | jq -r '.errors[]?.message // empty'
            exit 1
          fi

      - name: 📄 Upload PDF to Release Assets
        run: |
          echo "📄 Uploading PDF to release assets..."
          
          if [ ! -f "Machine-Learning-Systems.pdf" ]; then
            echo "❌ PDF file not found!"
            exit 1
          fi
          
          echo "📊 PDF size: $(du -h Machine-Learning-Systems.pdf | cut -f1)"
          
          # Upload the PDF to the release
          UPLOAD_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/pdf" \
            --data-binary @Machine-Learning-Systems.pdf \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=Machine-Learning-Systems.pdf")
          
          echo "📊 Upload Response:"
          echo "$UPLOAD_RESPONSE" | jq '.'
          
          UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
          
          if [ "$UPLOAD_ID" != "null" ] && [ -n "$UPLOAD_ID" ]; then
            echo "✅ PDF uploaded successfully to release!"
            echo "📊 Asset ID: $UPLOAD_ID"
            echo "🔗 Download URL: https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/Machine-Learning-Systems.pdf"
          else
            echo "❌ Failed to upload PDF to release!"
            echo "📊 Error details:"
            echo "$UPLOAD_RESPONSE" | jq -r '.message // "Unknown error"'
            exit 1
          fi

      - name: 📋 Publication Summary
        run: |
          echo "## 📚 Textbook Publication Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Released:** ${{ steps.version.outputs.new_version }} (${{ steps.version.outputs.release_type }})" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** ${{ steps.version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content Published:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Commit:** ${{ github.event.inputs.dev_commit || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Publication Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Release ID:** ${{ env.release_id || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ env.release_url || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Changes:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 What happened:" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Verified dev branch tests passed" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Calculated new version number" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Merged dev → main branch" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Created release tag ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "5. ✅ Pushed to main (triggered production build)" >> $GITHUB_STEP_SUMMARY
          echo "6. ✅ Waited for build completion (up to 2 hours)" >> $GITHUB_STEP_SUMMARY
          echo "7. ✅ Created GitHub Release (DRAFT - edit manually)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Process:" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **Controller Workflow**: Triggered by main branch push" >> $GITHUB_STEP_SUMMARY
          echo "- 🔨 **Build Jobs**: HTML + PDF generation on Linux/Windows" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 **PDF Processing**: Generated, compressed, and copied to assets/" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Deployment**: GitHub Pages with PDF download available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access Your Published Textbook:" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 [Interactive Web Textbook](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Version Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 [Download Complete PDF](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 [Direct PDF Access](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎓 [Share with Students](https://mlsysbook.ai)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Status:" >> $GITHUB_STEP_SUMMARY
          echo "- 🎮 **Controller Workflow**: Should be running/completed" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **Quarto Build**: HTML + PDF generation" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 **PDF Assets**: Available at `/assets/Machine-Learning-Systems.pdf`" >> $GITHUB_STEP_SUMMARY

  fail-validation:
    name: '❌ Validation Failed'
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm != 'PUBLISH'
    
    steps:
      - name: ❌ Invalid confirmation
        run: |
          echo "❌ Publication cancelled - invalid confirmation"
          echo "🔒 You must type exactly 'PUBLISH' to confirm"
          echo "📝 You entered: '${{ github.event.inputs.confirm }}'"
          exit 1 