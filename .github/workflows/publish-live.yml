name: 'üöÄ Publish Live'

# Manual trigger only - big red button!
on:
  workflow_dispatch:
    inputs:
      description:
        description: 'What are you publishing? (brief description)'
        required: true
        default: ''
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor' 
          - 'major'
        default: 'minor'
      dev_commit:
        description: 'Specific dev commit to publish (leave empty for latest)'
        required: false
        default: ''
      confirm:
        description: 'Type "PUBLISH" to confirm'
        required: true
        default: ''

permissions:
  contents: write
  actions: read

jobs:
  validate-and-publish:
    name: 'üîç Validate & Publish'
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Validate dev commit and tests
        run: |
          echo "üîç Validating dev commit and test status..."
          
          # Get the commit to validate
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            COMMIT_SHA="${{ github.event.inputs.dev_commit }}"
            echo "üìå Using specified commit: $COMMIT_SHA"
          else
            COMMIT_SHA=$(git rev-parse origin/dev)
            echo "üìä Using latest dev commit: $COMMIT_SHA"
          fi
          
          # Verify commit exists and is from dev branch
          if ! git cat-file -e "$COMMIT_SHA" 2>/dev/null; then
            echo "‚ùå Commit $COMMIT_SHA does not exist!"
            exit 1
          fi
          
          if ! git merge-base --is-ancestor "$COMMIT_SHA" origin/dev; then
            echo "‚ùå Commit $COMMIT_SHA is not in dev branch!"
            exit 1
          fi
          
          echo "‚úÖ Commit $COMMIT_SHA is valid and from dev branch"
          
          # Check if commit has successful workflow runs
          echo "üîÑ Checking if commit has passed tests..."
          SUCCESSFUL_RUNS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=dev&status=completed&per_page=10" \
            | jq -r --arg sha "$COMMIT_SHA" '.workflow_runs[] | select(.head_sha == $sha and .conclusion == "success") | .id' \
            | wc -l)
          
          if [ "$SUCCESSFUL_RUNS" -eq 0 ]; then
            echo "‚ùå Commit $COMMIT_SHA has no successful workflow runs!"
            echo "üõë Cannot publish until tests pass ‚úÖ"
            exit 1
          fi
          
          echo "‚úÖ Commit $COMMIT_SHA has passed tests - safe to publish"

      - name: üè∑Ô∏è Calculate Next Version
        id: version
        run: |
          echo "üîÑ Getting latest release version..."
          
          # Use provided previous version or auto-detect
          if [ -n "${{ github.event.inputs.previous_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.previous_version }}"
            echo "üìå Using provided previous version: $LATEST_VERSION"
          else
            # Get latest release version, default to v0.0.0 if no releases exist
            LATEST_VERSION=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
              | jq -r '.tag_name // "v0.0.0"')
            echo "üìä Auto-detected latest version: $LATEST_VERSION"
          fi
          
          # Remove 'v' prefix for calculation
          VERSION_NUM=${LATEST_VERSION#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          
          # Handle empty or invalid versions
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          echo "üìä Previous version components: $MAJOR.$MINOR.$PATCH"
          
          # Calculate new version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "üéØ New version: $NEW_VERSION (${{ github.event.inputs.release_type }} release)"
          echo "üìã Description: ${{ github.event.inputs.description }}"
          
          # Export for other steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "previous_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: üîÑ Merge dev to main
        run: |
          echo "üîÑ Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "üîÑ Switching to main branch..."
          git checkout main
          git pull origin main
          
          echo "üîç Checking for potential merge conflicts..."
          # Test merge without committing
          if ! git merge --no-commit --no-ff origin/dev 2>/dev/null; then
            echo "‚ùå MERGE CONFLICTS DETECTED!"
            echo "üõë Automated merge cannot proceed due to conflicts."
            echo "üìã Please resolve conflicts manually:"
            echo "   1. git checkout main"
            echo "   2. git pull origin main" 
            echo "   3. git merge dev"
            echo "   4. Resolve conflicts and commit"
            echo "   5. git push origin main"
            git merge --abort
            exit 1
          fi
          git reset --hard HEAD  # Clean up test merge
          
          echo "‚úÖ No conflicts detected. Proceeding with merge..."
          echo "üîÑ Merging dev into main..."
          
          # Determine which commit to merge
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            MERGE_COMMIT="${{ github.event.inputs.dev_commit }}"
            echo "üìå Merging specific commit: $MERGE_COMMIT"
          else
            MERGE_COMMIT="origin/dev"
            echo "üìä Merging latest dev: $MERGE_COMMIT"
          fi
          
          git merge "$MERGE_COMMIT" --no-ff -m "üöÄ Release ${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}

          Merged dev branch to main for publication.
          
          Release Type: ${{ github.event.inputs.release_type }}
          Published by: ${{ github.actor }}
          Dev Commit: ${MERGE_COMMIT}
          Specific Commit: ${{ github.event.inputs.dev_commit || 'latest' }}
          Description: ${{ github.event.inputs.description }}"
          
          echo "‚úÖ Merge completed successfully!"

      - name: üè∑Ô∏è Create Release Tag
        run: |
          echo "üè∑Ô∏è Creating release tag ${{ steps.version.outputs.new_version }}..."
          git tag -a ${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}"
          echo "‚úÖ Tag created successfully!"

      - name: üöÄ Push to main and trigger production deployment
        run: |
          echo "üöÄ Pushing to main branch with tags..."
          git push origin main --tags
          
          echo "üìä Main branch updated! This will trigger:"
          echo "  ‚úÖ Production build workflow (HTML + PDF generation)"
          echo "  ‚úÖ GitHub Pages deployment with textbook content"
          echo "  ‚úÖ Live academic website update"
          echo ""
          echo "üåê Your textbook will be live at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "üìö Students can access the updated content immediately"

      - name: ‚è≥ Wait for Production Build
        run: |
          echo "‚è≥ Waiting for production build to complete before creating release..."
          sleep 30  # Give the build a moment to start
          
          # Wait for the build to complete
          for i in {1..20}; do
            BUILD_STATUS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=main&status=completed&per_page=5" \
              | jq -r '.workflow_runs[] | select(.conclusion == "success") | .conclusion' \
              | head -1)
            
            if [ "$BUILD_STATUS" = "success" ]; then
              echo "‚úÖ Production build completed successfully!"
              break
            elif [ "$BUILD_STATUS" = "failure" ]; then
              echo "‚ùå Production build failed!"
              exit 1
            else
              echo "‚è≥ Build still in progress... (attempt $i/20)"
              sleep 30
            fi
          done

      - name: üì¶ Create GitHub Release
        run: |
          echo "üì¶ Creating GitHub Release ${{ steps.version.outputs.new_version }}..."
          
          # Generate release notes
          cat > release_notes.md << EOF
          ## üìö Release ${{ steps.version.outputs.new_version }}
          
          **${{ github.event.inputs.description }}**
          
          ### üìã Release Information
          - **Type**: ${{ steps.version.outputs.release_type }} release
          - **Previous Version**: ${{ steps.version.outputs.previous_version }}
          - **Published by**: ${{ github.actor }}
          - **Published at**: $(date)
          
          ### üìñ What's Included
          - Updated interactive web version at [mlsysbook.ai](https://mlsysbook.ai)
          - Complete PDF textbook available for download
          - All chapters, exercises, and lab materials as of commit $(git rev-parse HEAD)
          - Compatible with MIT Press publication standards
          
          ### üìù Changes
          ${{ github.event.inputs.description }}
          
          ### üîó Quick Links
          - üåê [Read Online](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})
          - üìÑ [Download PDF](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/Machine-Learning-Systems.pdf)
          - üìÑ [Direct PDF Link](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf)
          EOF
          
          # Create the release
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"${{ steps.version.outputs.new_version }}\",
              \"name\": \"${{ steps.version.outputs.new_version }}: ${{ github.event.inputs.description }}\",
              \"body\": \"$(cat release_notes.md | sed 's/"/\\"/g' | tr '\n' '\\n')\",
              \"draft\": false,
              \"prerelease\": false
            }")
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          echo "‚úÖ Release created with ID: $RELEASE_ID"
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV

      - name: üìã Publication Summary
        run: |
          echo "## üìö Textbook Publication Complete! üéâ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Released:** ${{ steps.version.outputs.new_version }} (${{ steps.version.outputs.release_type }})" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** ${{ steps.version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content Published:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Commit:** ${{ github.event.inputs.dev_commit || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Publication Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Changes:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÑ What happened:" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ Verified dev branch tests passed" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚úÖ Calculated new version number" >> $GITHUB_STEP_SUMMARY
          echo "3. ‚úÖ Merged dev ‚Üí main branch" >> $GITHUB_STEP_SUMMARY
          echo "4. ‚úÖ Created release tag ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "5. ‚úÖ Pushed to main (triggered production build)" >> $GITHUB_STEP_SUMMARY
          echo "6. ‚úÖ Created GitHub Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Access Your Published Textbook:" >> $GITHUB_STEP_SUMMARY
          echo "- üìñ [Interactive Web Textbook](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ [Version Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ [Download Complete PDF](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ [Direct PDF Access](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- üéì [Share with Students](https://mlsysbook.ai)" >> $GITHUB_STEP_SUMMARY

  fail-validation:
    name: '‚ùå Validation Failed'
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm != 'PUBLISH'
    
    steps:
      - name: ‚ùå Invalid confirmation
        run: |
          echo "‚ùå Publication cancelled - invalid confirmation"
          echo "üîí You must type exactly 'PUBLISH' to confirm"
          echo "üìù You entered: '${{ github.event.inputs.confirm }}'"
          exit 1 