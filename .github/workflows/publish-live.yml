name: '🚀 Publish (Main) Live'

# =============================================================================
# CONFIGURABLE VARIABLES - Edit these to customize the workflow
# =============================================================================

# AI Model Configuration
env:
  DEFAULT_AI_MODEL: "gemma2:9b"           # Default Ollama model
  FALLBACK_AI_MODEL: "gemma2:27b"         # Fallback if default model fails
  OLLAMA_TIMEOUT: "300"                    # Timeout for Ollama operations (seconds)
  OLLAMA_RETRIES: "3"                      # Number of retries for Ollama calls
  BUILD_TIMEOUT: "3600"                    # Timeout for build operations (1 hour)
  
  # Quarto Configuration Files
  QUARTO_HTML_CONFIG: "_quarto-html.yml"  # HTML build configuration file
  QUARTO_PDF_CONFIG: "_quarto-pdf.yml"    # PDF build configuration file
  QUARTO_MAIN_CONFIG: "_quarto.yml"       # Main Quarto configuration file

# =============================================================================
# ARTIFACT COORDINATION SYSTEM
# =============================================================================
# The 📋 Build Manager workflow creates build artifacts and an artifact manifest:
# 
# artifact-manifest: JSON file declaring the names of HTML and PDF artifacts
# main-html-linux: Contains build/html/ (web version)
# main-pdf-linux:  Contains build/pdf/Machine-Learning-Systems.pdf
# main-html-windows: Contains build/html/ (web version)  
# main-pdf-windows: Contains build/pdf/Machine-Learning-Systems.pdf
#
# This workflow downloads the artifact manifest first to get the exact names,
# then downloads the HTML and PDF artifacts using those names for coordination.
# Build Manager now uses dynamic matrix generation and explicit naming contracts.
#
# Artifact manifest structure:
# {
#   "html_artifact_name": "main-html-linux",
#   "pdf_artifact_name": "main-pdf-linux", 
#   "build_timestamp": "20250115-143022",
#   "commit_sha": "abc123...",
#   "workflow_run_id": "12345",
#   "detailed_manifest": "build-manifest-detailed",
#   "parallel_builds": true,
#   "extensible": true
# }
# =============================================================================

# Available AI Models (uncomment to use different models):
# - gemma2:9b      (fast, good quality - recommended)
# - gemma2:27b     (better quality, slower)
# - llama3.1:8b    (good balance)
# - llama3.1:70b   (best quality, slowest)
# - mistral:7b     (fast, good for analysis)
# - codellama:7b   (good for code-related changes)

# Manual trigger only - big red button!
# Only allow manual triggers from main and dev branches
#
# 🎯 PUBLISHING BEHAVIOR:
# ├── With dev_commit specified (e.g., "b5b452e"):
# │   ├── Merges EXACTLY that commit into main
# │   ├── Includes content + workflow files from that point in time
# │   └── Warning: You get the old workflow version too!
# │
# └── Without dev_commit (empty):
#     ├── Merges latest dev branch into main  
#     ├── Includes newest content + newest workflow files
#     └── Recommended for most releases
#
# 🌿 BRANCH CONTROL:
# Build Manager workflow will automatically build from the main branch
# after the merge. The build manager can also be called manually with
# custom branch targets if needed for testing or special builds.

# Cancel duplicate publish-live runs (only one deployment should run at a time)
concurrency:
  group: publish-live
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'What are you publishing? [Content updates and improvements]'
        required: false
        default: 'Content updates and improvements'
      release_type:
        description: 'Release type [patch]'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor' 
          - 'major'
        default: 'patch'
      dev_commit:
        description: 'Specific dev commit to publish (WARNING: includes old workflow files!) [latest dev]'
        required: false
        default: ''
      confirm:
        description: 'Type "PUBLISH" to confirm (safety check) [required]'
        required: true
        default: ''
      ai_generated_notes:
        description: 'Generate AI-enhanced release notes? [yes]'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
        default: 'yes'
      commit_status_timeout:
        description: 'Number of status check attempts [180 = 3 hours at 60s intervals]'
        required: false
        default: '180'
      commit_status_interval:
        description: 'Seconds between status checks [60]'
        required: false
        default: '60'
      previous_version:
        description: 'Previous version to increment from [auto-detect from latest git tag]'
        required: false
        default: ''

permissions:
  contents: write
  actions: read

jobs:
  debug-log:
    name: '📋 Debug & Audit Log'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Log Workflow Inputs & Context
        run: |
          echo "## 📋 Workflow Debug & Audit Log" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "=== 📋 WORKFLOW DEBUG & AUDIT LOG ==="
          echo "🕐 Workflow started at: $(date -u)"
          echo "🔄 Run ID: ${{ github.run_id }}"
          echo "🔄 Run Attempt: ${{ github.run_attempt }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🌐 Repository: ${{ github.repository }}"
          echo ""
          
          echo "=== 📝 USER INPUTS ==="
          echo "Description: '${{ github.event.inputs.description }}'"
          echo "Release Type: '${{ github.event.inputs.release_type }}'"
          echo "Dev Commit: '${{ github.event.inputs.dev_commit }}'"
          echo "Confirmation: '${{ github.event.inputs.confirm }}'"
          echo "AI Generated Notes: '${{ github.event.inputs.ai_generated_notes }}'"
          echo "Status Check Timeout: '${{ github.event.inputs.commit_status_timeout }}' attempts"
          echo "Status Check Interval: '${{ github.event.inputs.commit_status_interval }}' seconds"
          echo ""
          
          echo "### 📝 User Inputs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Description:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Commit:** ${{ github.event.inputs.dev_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Confirmation:** ${{ github.event.inputs.confirm }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Generated Notes:** ${{ github.event.inputs.ai_generated_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Timeout:** ${{ github.event.inputs.commit_status_timeout }} attempts" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Interval:** ${{ github.event.inputs.commit_status_interval }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Log Git & Environment Context
        run: |
          echo "=== 🔍 GIT CONTEXT ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          
          echo "Git Status:"
          git status --porcelain || echo "No git status available"
          echo ""
          
          echo "Recent Commits (last 5):"
          git log --oneline -5 || echo "No git log available"
          echo ""
          
          echo "Remote branches:"
          git branch -r | head -10 || echo "No remote branches info"
          echo ""
          
          echo "Latest tags:"
          git tag --sort=-version:refname | head -10 || echo "No tags found"
          echo ""
          
          echo "### 🔍 Git Context:" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🛠️ Log Environment & AI Configuration
        run: |
          echo "=== 🛠️ ENVIRONMENT ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Default AI Model: ${{ env.DEFAULT_AI_MODEL }}"
          echo "Fallback AI Model: ${{ env.FALLBACK_AI_MODEL }}"
          echo "Ollama Timeout: ${{ env.OLLAMA_TIMEOUT }}"
          echo "Ollama Retries: ${{ env.OLLAMA_RETRIES }}"
          echo "Build Timeout: ${{ env.BUILD_TIMEOUT }}"
          echo ""
          
          echo "=== 🧪 VALIDATION CHECKS ==="
          echo "Confirmation Valid: ${{ github.event.inputs.confirm == 'PUBLISH' }}"
          echo "Branch Valid: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}"
          echo "Will Proceed: ${{ github.event.inputs.confirm == 'PUBLISH' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') }}"
          echo ""
          
          echo "### 🛠️ Environment:" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner OS:** ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Model:** ${{ env.DEFAULT_AI_MODEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Valid Confirmation:** ${{ github.event.inputs.confirm == 'PUBLISH' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Valid Branch:** ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Will Proceed:** ${{ github.event.inputs.confirm == 'PUBLISH' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Log Previous Releases
        run: |
          echo "=== 📊 RELEASE HISTORY ==="
          echo "Checking existing releases..."
          
          # Get latest releases
          RELEASES=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=5" \
            | jq -r '.[] | "\(.tag_name) - \(.published_at // "draft") - \(.draft)"' 2>/dev/null || echo "Unable to fetch releases")
          
          echo "Recent releases:"
          echo "$RELEASES"
          echo ""
          
          # Get latest tags  
          echo "Latest tags:"
          git tag --sort=-version:refname | head -5 || echo "No tags found"
          echo ""
          
          echo "### 📊 Release History:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$RELEASES" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  validate-inputs:
    name: '🔍 Validate Inputs'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.confirm == 'PUBLISH' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
      release_type: ${{ steps.version.outputs.release_type }}
    
    steps:
      - name: 🔒 Check Branch Restriction
        run: |
          echo "🔒 Checking branch restrictions..."
          echo "Current branch: ${{ github.ref_name }}"
          echo "Current ref: ${{ github.ref }}"
          
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != "refs/heads/dev" ]]; then
            echo "❌ ERROR: This workflow can only be triggered from 'main' or 'dev' branches"
            echo "❌ Current branch: ${{ github.ref_name }}"
            echo "❌ Please switch to 'main' or 'dev' branch before running this workflow"
            exit 1
          fi
          
          echo "✅ Branch check passed - running from ${{ github.ref_name }}"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Validate dev commit
        run: |
          echo "🔍 Validating dev commit..."
          
          # Get the commit to validate and trim whitespace
          COMMIT_SHA=$(echo "${{ github.event.inputs.dev_commit }}" | xargs)
          
          if [ -n "$COMMIT_SHA" ]; then
            echo "📌 Using specified commit: $COMMIT_SHA"
            
            # Verify commit exists and is from dev branch
            if ! git cat-file -e "$COMMIT_SHA" 2>/dev/null; then
              echo "❌ Commit $COMMIT_SHA does not exist!"
              exit 1
            fi
            
            if ! git merge-base --is-ancestor "$COMMIT_SHA" origin/dev; then
              echo "❌ Commit $COMMIT_SHA is not in dev branch!"
              exit 1
            fi
            
            echo "✅ Commit $COMMIT_SHA is valid and from dev branch"
          else
            echo "📌 Using latest dev commit (no specific commit specified)"
          fi
          
          echo "✅ Ready to publish"

      - name: 🏷️ Calculate Next Version
        id: version
        run: |
          echo "🔄 Getting latest release version..."
          
          # Use provided previous version or auto-detect
          if [ -n "${{ github.event.inputs.previous_version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.previous_version }}"
            echo "📌 Using provided previous version: $LATEST_VERSION"
          else
            # Get latest git tag version, default to v0.0.0 if no tags exist
            LATEST_VERSION=$(git tag -l "v*" | sort -V | tail -n1)
            if [ -z "$LATEST_VERSION" ]; then
              LATEST_VERSION="v0.0.0"
              echo "📊 No git tags found, using default: $LATEST_VERSION"
            else
              echo "📊 Auto-detected latest git tag: $LATEST_VERSION"
            fi
          fi
          
          # Remove 'v' prefix for calculation
          VERSION_NUM=${LATEST_VERSION#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          
          # Handle empty or invalid versions
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          
          echo "📊 Previous version components: $MAJOR.$MINOR.$PATCH"
          
          # Calculate new version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "🎯 New version: $NEW_VERSION (${{ github.event.inputs.release_type }} release)"
          echo "📋 Description: ${{ github.event.inputs.description }}"
          
          # Export for other steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "previous_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

  pre-flight-checks:
    name: '🛫 Pre-Flight Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-inputs
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Validate Dev Branch Content
        run: |
          echo "🔍 Validating dev branch content before merge..."
          
          # Switch to dev branch and pull latest
          git checkout dev
          git pull origin dev
          
          # Check if dev commit exists and is valid
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            DEV_COMMIT=$(echo "${{ github.event.inputs.dev_commit }}" | xargs)
            echo "📌 Validating specific commit: $DEV_COMMIT"
            
            if ! git cat-file -e "$DEV_COMMIT" 2>/dev/null; then
              echo "❌ Commit $DEV_COMMIT does not exist!"
              exit 1
            fi
            
            if ! git merge-base --is-ancestor "$DEV_COMMIT" HEAD; then
              echo "❌ Commit $DEV_COMMIT is not in current dev branch!"
              exit 1
            fi
            
            # Checkout the specific commit for validation
            git checkout "$DEV_COMMIT"
          fi
          
          echo "✅ Dev branch content validated"

      - name: 📚 Validate Quarto Project Structure
        run: |
          echo "📚 Validating Quarto project structure..."
          
          cd quarto
          
          # Check critical files exist using environment variables
          REQUIRED_FILES=("${{ env.QUARTO_MAIN_CONFIG }}" "config/${{ env.QUARTO_HTML_CONFIG }}" "config/${{ env.QUARTO_PDF_CONFIG }}")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
          # Validate Quarto configuration
          if command -v quarto >/dev/null 2>&1; then
            echo "🔍 Checking Quarto configuration..."
            if ! quarto check; then
              echo "⚠️ Quarto check reported issues, but continuing..."
            fi
          else
            echo "ℹ️ Quarto not available for validation in this environment"
          fi
          
          echo "✅ Quarto project structure validated"

      - name: 🧪 Test Build Prerequisites
        run: |
          echo "🧪 Testing build prerequisites..."
          
          # Check disk space (PDF builds need significant space)
          echo "💾 Checking disk space..."
          df -h
          
          AVAILABLE_GB=$(df / | awk 'NR==2 {print int($4/1024/1024)}')
          echo "📊 Available disk space: ${AVAILABLE_GB}GB"
          
          if [ "$AVAILABLE_GB" -lt 5 ]; then
            echo "❌ Insufficient disk space! Need at least 5GB, have ${AVAILABLE_GB}GB"
            exit 1
          fi
          
          echo "✅ Sufficient disk space available"
          
          # Test GitHub API access
          echo "🔍 Testing GitHub API access..."
          if ! curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}" >/dev/null; then
            echo "❌ GitHub API access failed!"
            exit 1
          fi
          echo "✅ GitHub API access confirmed"
          
          echo "✅ All prerequisites validated"

      - name: 🤖 Test AI System (Ollama)
        if: github.event.inputs.ai_generated_notes == 'yes'
        run: |
          echo "🤖 Testing AI system for release notes generation..."
          
          # Install Python dependencies first
          echo "🐍 Installing Python dependencies..."
          python -m pip install --upgrade pip
          python -m pip install requests
          
          # Install Ollama with retry
          echo "🤖 Installing Ollama..."
          for i in {1..3}; do
            if curl -fsSL https://ollama.ai/install.sh | sh; then
              echo "✅ Ollama installed successfully on attempt $i"
              break
            else
              echo "⚠️ Ollama install attempt $i failed, retrying..."
              sleep 5
              if [ $i -eq 3 ]; then
                echo "❌ Ollama installation failed after 3 attempts"
                echo "🔄 Will use manual release notes instead"
                exit 0  # Don't fail the whole workflow
              fi
            fi
          done
          
          # Start Ollama service with health check
          echo "🚀 Starting Ollama service..."
          ollama serve &
          
          # Wait for service with timeout
          echo "⏳ Waiting for Ollama service to be ready..."
          OLLAMA_READY=false
          for i in {1..30}; do
            if ollama list >/dev/null 2>&1; then
              echo "✅ Ollama service ready after ${i}0 seconds"
              OLLAMA_READY=true
              break
            fi
            echo "⏳ Waiting for Ollama service... (${i}/30)"
            sleep 10
          done
          
          if [ "$OLLAMA_READY" != "true" ]; then
            echo "❌ Ollama service failed to start within 5 minutes"
            echo "🔄 Will use manual release notes instead"
            exit 0  # Don't fail the whole workflow
          fi
          
          # Pull the default model with retry
          MODEL="${{ env.DEFAULT_AI_MODEL }}"
          echo "📦 Pulling AI model: $MODEL"
          MODEL_READY=false
          for i in {1..3}; do
            if timeout ${{ env.OLLAMA_TIMEOUT }} ollama pull $MODEL; then
              echo "✅ Model $MODEL pulled successfully on attempt $i"
              MODEL_READY=true
              break
            else
              echo "⚠️ Model pull attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Try fallback model if default failed
          if [ "$MODEL_READY" != "true" ]; then
            echo "⚠️ Default model failed, trying fallback..."
            MODEL="${{ env.FALLBACK_AI_MODEL }}"
            echo "📦 Pulling fallback AI model: $MODEL"
            if timeout ${{ env.OLLAMA_TIMEOUT }} ollama pull $MODEL; then
              echo "✅ Fallback model $MODEL pulled successfully"
              MODEL_READY=true
            else
              echo "❌ Fallback model also failed"
              echo "🔄 Will use manual release notes instead"
              exit 0  # Don't fail the whole workflow
            fi
          fi
          
          # Test Ollama with a simple query
          echo "🧪 Testing Ollama with simple query..."
          if echo "Test" | ollama run $MODEL >/dev/null 2>&1; then
            echo "✅ Ollama AI system is working correctly!"
            echo "🤖 Model: $MODEL"
            echo "🚀 Ready for AI-powered release notes generation"
            
            # Save the working model for later use
            echo "$MODEL" > /tmp/ollama_model.txt
          else
            echo "❌ Ollama test query failed"
            echo "🔄 Will use manual release notes instead"
            exit 0  # Don't fail the whole workflow
          fi

      - name: 📋 Pre-Flight Summary
        run: |
          echo "## 🛫 Pre-Flight Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All checks passed ✅" >> $GITHUB_STEP_SUMMARY
          echo "**Dev Commit:** ${{ github.event.inputs.dev_commit || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ needs.validate-inputs.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validated:" >> $GITHUB_STEP_SUMMARY
          echo "- Dev branch content and commit validity" >> $GITHUB_STEP_SUMMARY
          echo "- Quarto project structure and configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Build prerequisites (disk space, API access)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.ai_generated_notes }}" = "yes" ]; then
            echo "- AI system (Ollama) installation and testing" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready to proceed with merge and publication!**" >> $GITHUB_STEP_SUMMARY

  merge-to-main:
    name: '🔄 Merge to Main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-inputs, pre-flight-checks]
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for workflow file changes
        run: |
          echo "🔍 Checking if workflow files will be modified in merge..."
          
          # Check if workflow files are in the dev branch changes
          if git diff --name-only origin/main..origin/dev | grep -q "\.github/workflows/"; then
            echo "⚠️  Workflow files detected in dev branch!"
            echo "📋 This will cause permission issues with publish-live workflow."
            echo "💡 Please manually merge workflow changes first:"
            echo "   1. Create PR for workflow changes"
            echo "   2. Review and merge to main"
            echo "   3. Then run publish-live for content only"
            echo ""
            echo "🔍 Workflow files in dev branch:"
            git diff --name-only origin/main..origin/dev | grep "\.github/workflows/"
            echo ""
            echo "❌ Stopping to prevent permission issues"
            exit 1
          else
            echo "✅ No workflow files detected - safe to proceed"
          fi

      - name: 🔄 Merge dev to main
        run: |
          echo "🔄 Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "🔄 Switching to main branch..."
          git checkout main
          git pull origin main
          
          # Safety check: Ensure main isn't ahead of specified dev commit
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            DEV_COMMIT=$(echo "${{ github.event.inputs.dev_commit }}" | xargs)
            echo "🔍 Checking if main is ahead of specified commit $DEV_COMMIT..."
            
            # Check if dev_commit is an ancestor of current main
            if git merge-base --is-ancestor "$DEV_COMMIT" HEAD; then
              echo "⚠️ MAIN IS AHEAD OF SPECIFIED COMMIT!"
              echo "📊 Current main includes changes newer than $DEV_COMMIT"
              echo ""
              echo "🛑 This would create a mixed state (old dev + new main changes)"
              echo "📋 Options to resolve:"
              echo "   A) Use latest dev instead (leave dev_commit empty)"
              echo "   B) Reset main to match dev commit (destructive):"
              echo "      git checkout main && git reset --hard $DEV_COMMIT && git push --force-with-lease"
              echo "   C) Merge dev branch normally first, then publish"
              echo ""
              echo "❌ Stopping to prevent untested mixed state"
              exit 1
            else
              echo "✅ Safe to merge: $DEV_COMMIT is newer than current main"
            fi
          fi
          
          echo "🔍 Checking for potential merge conflicts..."
          # Test merge without committing
          if ! git merge --no-commit --no-ff origin/dev 2>/dev/null; then
            echo "❌ MERGE CONFLICTS DETECTED!"
            echo "🛑 Automated merge cannot proceed due to conflicts."
            echo "📋 Please resolve conflicts manually:"
            echo "   1. git checkout main"
            echo "   2. git pull origin main" 
            echo "   3. git merge dev"
            echo "   4. Resolve conflicts and commit"
            echo "   5. git push origin main"
            git merge --abort
            exit 1
          fi
          git reset --hard HEAD  # Clean up test merge
          
          echo "✅ No conflicts detected. Proceeding with merge..."
          echo "🔄 Merging dev into main..."
          
          # Debug: Show what dev_commit input was received
          DEV_COMMIT_INPUT="${{ github.event.inputs.dev_commit }}"
          echo "🔍 DEBUG: dev_commit input = '$DEV_COMMIT_INPUT'"
          echo "🔍 DEBUG: Input length = ${#DEV_COMMIT_INPUT}"
          
          # Determine which commit to merge
          if [ -n "${{ github.event.inputs.dev_commit }}" ]; then
            MERGE_COMMIT=$(echo "${{ github.event.inputs.dev_commit }}" | xargs)
            echo "📌 SPECIFIC COMMIT MODE: Merging exact commit: $MERGE_COMMIT"
            echo "⚠️  This includes content + workflow files from that point in time"
          else
            MERGE_COMMIT="origin/dev"
            echo "📊 LATEST DEV MODE: Merging latest dev commit"
            echo "✅ This includes newest content + newest workflow files"
          fi
          
          echo "🎯 Final merge target: $MERGE_COMMIT"
          
          git merge "$MERGE_COMMIT" --no-ff -m "🚀 Release ${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}

          Merged dev branch to main for publication.
          
          Release Type: ${{ github.event.inputs.release_type }}
          Published by: ${{ github.actor }}
          Dev Commit: ${MERGE_COMMIT}
          Specific Commit: ${{ github.event.inputs.dev_commit || 'latest dev' }}
          Description: ${{ github.event.inputs.description }}"
          
          echo "✅ Merge completed successfully!"

      - name: 🚀 Push merge to main
        run: |
          echo "🚀 Pushing merge to main branch..."
          git push origin main
          
          echo "✅ Main branch updated successfully!"
          echo "📋 Next step: Monitor production build, then create release tag"

  trigger-production-build:
    name: '🚀 Trigger Production Build'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: merge-to-main
    if: github.event.inputs.confirm == 'PUBLISH'
    outputs:
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Get Current Commit SHA
        id: commit
        run: |
          # Get the latest commit SHA from main branch
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "📌 Current commit SHA: $COMMIT_SHA"

  # Matrix-driven production build (clean and simple!)
  call-production-build:
    name: '🚀 Call Production Build Matrix'
    needs: [merge-to-main, trigger-production-build]
    uses: ./.github/workflows/quarto-build-container.yml
    with:
      build_linux: true    # Production builds Linux only for now
      build_windows: false
      build_html: true     # HTML + PDF + EPUB for production
      build_pdf: true
      build_epub: true
      target: main
      container_registry: 'ghcr.io'
      container_tag: 'latest'

  # Wait for build completion job
  wait-for-build:
    name: '⏳ Wait for Build Completion'
    needs: [trigger-production-build, call-production-build]
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours

    steps:
      - name: ⏳ Monitor Build Status
        run: |
          # Get the commit SHA from previous job
          COMMIT_SHA="${{ needs.trigger-production-build.outputs.commit_sha }}"
          if [ -z "$COMMIT_SHA" ]; then
            echo "🔍 Getting commit SHA from git..."
            COMMIT_SHA=$(git rev-parse HEAD)
          fi
          echo "📌 Monitoring commit: $COMMIT_SHA"
          
          sleep 30  # Give the build a moment to start
          
          # Wait for all required status checks to complete
          # Loop through status check attempts (timeout attempts × 60 seconds = 3 hours max)
          for i in $(seq 1 ${{ github.event.inputs.commit_status_timeout }}); do
            echo "🔍 Checking commit status (attempt $i/${{ github.event.inputs.commit_status_timeout }})..."
            
            # Get commit status
            STATUS_RESPONSE=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/status")
            
            # Check overall status
            OVERALL_STATE=$(echo "$STATUS_RESPONSE" | jq -r '.state')
            TOTAL_COUNT=$(echo "$STATUS_RESPONSE" | jq -r '.total_count')
            
            echo "📊 Overall status: $OVERALL_STATE ($TOTAL_COUNT checks)"
            
            # Get individual status checks
            STATUSES=$(echo "$STATUS_RESPONSE" | jq -r '.statuses')
            
            # Show ALL available status checks for debugging
            echo "🔍 All available status checks:"
            echo "$STATUSES" | jq -r '.[] | "  - \(.context): \(.state) - \(.description)"' | head -10
            
            # Early exit if no status checks exist after reasonable time
            if [ "$TOTAL_COUNT" -eq 0 ] && [ $i -gt 10 ]; then
              echo "⚠️ No status checks found after $((i * ${{ github.event.inputs.commit_status_interval }} / 60)) minutes"
              echo "🔍 Re-checking if quarto-build workflow was triggered..."
              
              # Re-check for quarto-build workflow
              QUARTO_CHECK=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/quarto-build.yml/runs?head_sha=$COMMIT_SHA&per_page=1")
              
              QUARTO_COUNT=$(echo "$QUARTO_CHECK" | jq -r '.total_count')
              
              if [ "$QUARTO_COUNT" -eq 0 ]; then
                echo "❌ Quarto-build workflow still not triggered after $((i * ${{ github.event.inputs.commit_status_interval }} / 60)) minutes"
                echo "🔍 This suggests a workflow configuration issue"
                echo "🔗 Check workflows: https://github.com/${{ github.repository }}/actions"
                exit 1
              fi
            fi
            
            # Check for our specific quarto-build status checks
            HTML_STATUS=$(echo "$STATUSES" | jq -r '.[] | select(.context == "ci/quarto-build-ubuntu-latest-html") | .state' | head -1)
            PDF_STATUS=$(echo "$STATUSES" | jq -r '.[] | select(.context == "ci/quarto-build-ubuntu-latest-pdf") | .state' | head -1)
            
            echo "📋 Expected build status checks:"
            echo "  - HTML Build (Linux): ${HTML_STATUS:-pending}"
            echo "  - PDF Build (Linux): ${PDF_STATUS:-pending}"
            
            # Show detailed status for quarto-build checks specifically
            echo "📋 Quarto build status checks:"
            echo "$STATUSES" | jq -r '.[] | select(.context | startswith("ci/quarto-build")) | "  - \(.context): \(.state) - \(.description)"' | head -4
            
            # Check if all required builds are successful
            if [ "$HTML_STATUS" = "success" ] && [ "$PDF_STATUS" = "success" ]; then
              echo "✅ All production builds completed successfully!"
              echo "📊 HTML Build: ✅ Success"
              echo "📊 PDF Build: ✅ Success"
              echo "🔗 View commit status: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
              break
            fi
            
            # Check for any failures, cancellations, or errors
            if [ "$HTML_STATUS" = "failure" ] || [ "$PDF_STATUS" = "failure" ]; then
              echo "❌ Production build failed!"
              echo "📊 HTML Build: ${HTML_STATUS:-pending}"
              echo "📊 PDF Build: ${PDF_STATUS:-pending}"
              echo "🔗 View commit status: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
              exit 1
            elif [ "$HTML_STATUS" = "cancelled" ] || [ "$PDF_STATUS" = "cancelled" ]; then
              echo "🚫 Production build was cancelled!"
              echo "📊 HTML Build: ${HTML_STATUS:-pending}"
              echo "📊 PDF Build: ${PDF_STATUS:-pending}"
              echo "🔗 View commit status: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
              exit 1
            elif [ "$HTML_STATUS" = "error" ] || [ "$PDF_STATUS" = "error" ]; then
              echo "⚠️ Production build encountered an error!"
              echo "📊 HTML Build: ${HTML_STATUS:-pending}"
              echo "📊 PDF Build: ${PDF_STATUS:-pending}"
              echo "🔗 View commit status: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
              exit 1
            fi
            
            # Show current status with time elapsed
            ELAPSED_MINUTES=$((i * ${{ github.event.inputs.commit_status_interval }} / 60))
            ELAPSED_HOURS=$((ELAPSED_MINUTES / 60))
            REMAINING_MINUTES=$((ELAPSED_MINUTES % 60))
            
            if [ $ELAPSED_HOURS -gt 0 ]; then
              TIME_DISPLAY="${ELAPSED_HOURS}h ${REMAINING_MINUTES}m"
            else
              TIME_DISPLAY="${ELAPSED_MINUTES}m"
            fi
            
            echo "⏳ Build still in progress... (attempt $i/${{ github.event.inputs.commit_status_timeout }}, ~${TIME_DISPLAY} elapsed)"
            
            # Show build progress indicators with heartbeat-style updates
            if [ $i -eq 1 ]; then
              echo "📋 Expected build timeline (Linux only):"
              echo "  0-10m: Initial setup and quality checks"
              echo "  10-25m: Quarto Build (HTML + PDF generation)"
              echo "  25-35m: PDF compression and processing"
              echo "  35-45m: GitHub Pages deployment"
              echo "  45-60m: Asset copying and finalization"
            fi
            
            # Show heartbeat-style progress every 4th attempt (every 2 minutes)
            if [ $((i % 4)) -eq 0 ]; then
              echo "💓 Build heartbeat: $(date)"
              echo "📊 Current build status: Monitoring commit checks"
              echo "⏰ Time elapsed: ${TIME_DISPLAY}"
              echo "📈 HTML: ${HTML_STATUS:-pending} | PDF: ${PDF_STATUS:-pending}"
              echo "🔗 Monitor: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
              
              # Show quarto-build logs if available
              if [ -n "$LATEST_QUARTO_RUN" ]; then
                echo "📋 Latest quarto-build logs:"
                
                # Get the latest job from the workflow run
                LATEST_JOB=$(curl -s \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_QUARTO_RUN/jobs" \
                  | jq -r '.jobs[0].id')
                
                if [ "$LATEST_JOB" != "null" ] && [ -n "$LATEST_JOB" ]; then
                  echo "🔍 Fetching logs from job: $LATEST_JOB"
                  
                  # Get the latest step from the job
                  LATEST_STEP=$(curl -s \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_QUARTO_RUN/jobs/$LATEST_JOB/logs" \
                    | grep -o 'step_[0-9]*' | tail -1)
                  
                  if [ -n "$LATEST_STEP" ]; then
                    echo "📝 Latest step logs ($LATEST_STEP):"
                    curl -s \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_QUARTO_RUN/jobs/$LATEST_JOB/logs" \
                      | grep -A 10 "$LATEST_STEP" | tail -5
                  fi
                fi
              fi
              
              # Update GitHub status with progress
              curl -s -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/statuses/$COMMIT_SHA" \
                -d "{
                  \"state\": \"pending\",
                  \"description\": \"Publishing: Build ${TIME_DISPLAY} (HTML: ${HTML_STATUS:-pending}, PDF: ${PDF_STATUS:-pending})\",
                  \"context\": \"ci/publish-live-monitor\"
                }" >/dev/null
              echo "---"
            fi
            
            sleep ${{ github.event.inputs.commit_status_interval }}
          done
          
          # If we get here, check final status after timeout
          if [ "$HTML_STATUS" != "success" ] || [ "$PDF_STATUS" != "success" ]; then
            echo "⏰ Build monitoring timed out after 3 hours"
            echo "📊 Final status: HTML=$HTML_STATUS, PDF=$PDF_STATUS"
            
            # Provide specific guidance based on final state
            if [ "$HTML_STATUS" = "cancelled" ] || [ "$PDF_STATUS" = "cancelled" ]; then
              echo "🚫 Build was cancelled - no release will be created"
            elif [ "$HTML_STATUS" = "failure" ] || [ "$PDF_STATUS" = "failure" ]; then
              echo "❌ Build failed - check logs for errors"
            elif [ "$HTML_STATUS" = "error" ] || [ "$PDF_STATUS" = "error" ]; then
              echo "⚠️ Build encountered an error - check GitHub Actions logs"
            else
              echo "⏳ Build may still be running - check manually"
            fi
            
            echo "🔗 Check status: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
            exit 1
          fi

  create-tag:
    name: '🏷️ Create Release Tag (Final Step)'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-inputs, wait-for-build, download-and-deploy-artifacts]
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Sync with latest main
        run: |
          echo "🔄 Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "🔄 Switching to main and pulling latest changes..."
          git checkout main
          git pull origin main
          
          echo "✅ Synced with latest main branch"

      - name: 🏷️ Create Release Tag
        run: |
          echo "🏷️ Creating release tag ${{ needs.validate-inputs.outputs.new_version }}..."
          echo "✅ Build AND deployment completed successfully - safe to create release tag"
          
          # Check if tag already exists locally
          if git tag -l "${{ needs.validate-inputs.outputs.new_version }}" | grep -q "${{ needs.validate-inputs.outputs.new_version }}"; then
            echo "⚠️ Tag ${{ needs.validate-inputs.outputs.new_version }} already exists locally"
            echo "🔄 Removing existing tag to recreate it..."
            git tag -d ${{ needs.validate-inputs.outputs.new_version }}
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/${{ needs.validate-inputs.outputs.new_version }}$"; then
            echo "⚠️ Tag ${{ needs.validate-inputs.outputs.new_version }} already exists on remote"
            echo "🔄 Removing remote tag to recreate it..."
            git push origin --delete ${{ needs.validate-inputs.outputs.new_version }}
          fi
          
          # Create the tag on the latest main commit
          git tag -a ${{ needs.validate-inputs.outputs.new_version }} -m "Release ${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}"
          echo "✅ Tag created successfully!"

      - name: 🚀 Push tag for release tracking
        run: |
          echo "🚀 Pushing release tag for version tracking..."
          git push origin ${{ needs.validate-inputs.outputs.new_version }}
          
          echo "✅ Release tag pushed successfully!"
          echo "🏷️ Tag: ${{ needs.validate-inputs.outputs.new_version }}"
          echo "📋 Description: ${{ github.event.inputs.description }}"
          echo "📊 This tag marks a successful build and tested release"

  download-and-deploy-artifacts:
    name: '📦 Download Artifacts & Deploy to GitHub Pages'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: wait-for-build
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download Both HTML and PDF Artifacts
        run: |
          echo "📦 Downloading both HTML and PDF artifacts from successful builds..."
          echo "🔍 Getting artifact manifest from build manager workflow..."
          
          # Find the latest successful build manager run for this commit
          COMMIT_SHA=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/main" \
            | jq -r '.sha')
          
          echo "📌 Looking for build manager artifacts for commit: $COMMIT_SHA"
          
          # Get build manager workflow runs for this commit
          MANAGER_RUNS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-manager.yml/runs?head_sha=$COMMIT_SHA&status=success&per_page=1")
          
          LATEST_BUILD=$(echo "$MANAGER_RUNS" | jq -r '.workflow_runs[0].id')
          
          if [ "$LATEST_BUILD" = "null" ] || [ -z "$LATEST_BUILD" ]; then
            echo "❌ No successful build manager builds found for this commit!"
            exit 1
          fi
          
          echo "📊 Found build manager build: $LATEST_BUILD"
          
          # Download artifact manifest first
          echo "📥 Downloading artifact manifest..."
          ARTIFACTS_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts")
          
          MANIFEST_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | select(.name == "artifact-manifest") | .id' | head -1)
          
          if [ "$MANIFEST_ARTIFACT" != "null" ] && [ -n "$MANIFEST_ARTIFACT" ]; then
            echo "📋 Found artifact manifest, downloading..."
            curl -L \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts/$MANIFEST_ARTIFACT/zip" \
              -o manifest.zip
            
            unzip -q manifest.zip
            
            if [ -f "artifact-manifest.json" ]; then
              echo "📄 Artifact manifest contents:"
              cat artifact-manifest.json
              
              HTML_ARTIFACT_NAME=$(jq -r '.html_artifact_name' artifact-manifest.json)
              PDF_ARTIFACT_NAME=$(jq -r '.pdf_artifact_name' artifact-manifest.json)
            else
              echo "⚠️ Manifest file not found, using new defaults"
              HTML_ARTIFACT_NAME="main-html-linux"
              PDF_ARTIFACT_NAME="main-pdf-linux"
            fi
          else
            echo "⚠️ No artifact manifest found, using new default names"
            HTML_ARTIFACT_NAME="main-html-linux"
            PDF_ARTIFACT_NAME="main-pdf-linux"
          fi
          
          echo "📋 Using artifact names:"
          echo "  - HTML: $HTML_ARTIFACT_NAME"
          echo "  - PDF: $PDF_ARTIFACT_NAME"
          
          # Download artifacts from the latest build
          ARTIFACTS_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts")
          
          echo "📊 Available artifacts:"
          echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | "  - \(.name) (ID: \(.id))"'
          
          # Find the HTML artifact using manifest
          LINUX_HTML_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg name "$HTML_ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .id' | head -1)
          
          if [ "$LINUX_HTML_ARTIFACT" = "null" ] || [ -z "$LINUX_HTML_ARTIFACT" ]; then
            echo "❌ HTML artifact '$HTML_ARTIFACT_NAME' not found!"
            exit 1
          fi
          
          echo "✅ Found HTML artifact: $HTML_ARTIFACT_NAME (ID: $LINUX_HTML_ARTIFACT)"
          
          # Find the PDF artifact using manifest
          LINUX_PDF_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg name "$PDF_ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .id' | head -1)
          
          # Find EPUB artifact (look for main-epub-linux pattern)
          EPUB_ARTIFACT_NAME="main-epub-linux"
          LINUX_EPUB_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg name "$EPUB_ARTIFACT_NAME" '.artifacts[] | select(.name == $name) | .id' | head -1)
          
          if [ "$LINUX_PDF_ARTIFACT" = "null" ] || [ -z "$LINUX_PDF_ARTIFACT" ]; then
            echo "❌ PDF artifact '$PDF_ARTIFACT_NAME' not found!"
            echo "🔍 Looking for any PDF artifact as fallback..."
            
            # Fallback: look for any PDF artifact
            PDF_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | select(.name | contains("pdf")) | .id' | head -1)
            
            if [ "$PDF_ARTIFACT" = "null" ] || [ -z "$PDF_ARTIFACT" ]; then
              echo "❌ No PDF artifact found in build $LATEST_BUILD"
              exit 1
            fi
            
            echo "⚠️ Using fallback PDF artifact: $PDF_ARTIFACT"
            LINUX_PDF_ARTIFACT=$PDF_ARTIFACT
          else
            echo "✅ Found PDF artifact: $PDF_ARTIFACT_NAME (ID: $LINUX_PDF_ARTIFACT)"
          fi
          
          # Check EPUB artifact
          if [ "$LINUX_EPUB_ARTIFACT" = "null" ] || [ -z "$LINUX_EPUB_ARTIFACT" ]; then
            echo "⚠️ EPUB artifact '$EPUB_ARTIFACT_NAME' not found!"
            echo "🔍 Looking for any EPUB artifact as fallback..."
            
            # Fallback: look for any EPUB artifact
            EPUB_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | select(.name | contains("epub")) | .id' | head -1)
            
            if [ "$EPUB_ARTIFACT" = "null" ] || [ -z "$EPUB_ARTIFACT" ]; then
              echo "⚠️ No EPUB artifact found in build - EPUB will be skipped"
              LINUX_EPUB_ARTIFACT=""
            else
              echo "⚠️ Using fallback EPUB artifact: $EPUB_ARTIFACT"
              LINUX_EPUB_ARTIFACT=$EPUB_ARTIFACT
            fi
          else
            echo "✅ Found EPUB artifact: $EPUB_ARTIFACT_NAME (ID: $LINUX_EPUB_ARTIFACT)"
          fi
          
          # Download HTML artifact
          echo "📥 Downloading HTML artifact..."
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts/$LINUX_HTML_ARTIFACT/zip" \
            -o html-artifact.zip
          
          # Download PDF artifact
          echo "📥 Downloading PDF artifact..."
          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts/$LINUX_PDF_ARTIFACT/zip" \
            -o pdf-artifact.zip
          
          # Download EPUB artifact if available
          if [ -n "$LINUX_EPUB_ARTIFACT" ] && [ "$LINUX_EPUB_ARTIFACT" != "null" ]; then
            echo "📥 Downloading EPUB artifact..."
            curl -L \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$LATEST_BUILD/artifacts/$LINUX_EPUB_ARTIFACT/zip" \
              -o epub-artifact.zip
          else
            echo "⚠️ Skipping EPUB artifact download (not available)"
          fi
          
          # Extract HTML artifact
          echo "📦 Extracting HTML artifact..."
          mkdir -p html-temp
          cd html-temp
          unzip -q ../html-artifact.zip
          cd ..
          
          # Extract PDF artifact
          echo "📦 Extracting PDF artifact..."
          mkdir -p pdf-temp
          cd pdf-temp
          unzip -q ../pdf-artifact.zip
          cd ..
          
          # Extract EPUB artifact if available
          if [ -f "epub-artifact.zip" ]; then
            echo "📦 Extracting EPUB artifact..."
            mkdir -p epub-temp
            cd epub-temp
            unzip -q ../epub-artifact.zip
            cd ..
          else
            echo "⚠️ No EPUB artifact to extract"
          fi
          
          # Find HTML build directory
          HTML_BUILD_DIR=$(find html-temp -name "html" -type d | head -1)
          if [ -z "$HTML_BUILD_DIR" ] || [ ! -d "$HTML_BUILD_DIR" ]; then
            echo "❌ HTML build directory not found in extracted artifacts!"
            echo "📊 HTML artifact contents:"
            find html-temp -type f -o -type d | head -20
            exit 1
          fi
          
          echo "✅ HTML build found: $HTML_BUILD_DIR"
          
          # Find PDF file
          PDF_FILE=$(find pdf-temp -name "Machine-Learning-Systems.pdf" -type f | head -1)
          if [ -z "$PDF_FILE" ] || [ ! -f "$PDF_FILE" ]; then
            echo "❌ PDF file not found in extracted artifacts!"
            echo "📊 PDF artifact contents:"
            find pdf-temp -type f -o -type d | head -20
            exit 1
          fi
          
          echo "✅ PDF found: $PDF_FILE"
          echo "📊 PDF size: $(du -h "$PDF_FILE" | cut -f1)"
          
          # Find EPUB file if available
          EPUB_FILE=""
          if [ -d "epub-temp" ]; then
            EPUB_FILE=$(find epub-temp -name "Machine-Learning-Systems.epub" -type f | head -1)
            if [ -z "$EPUB_FILE" ] || [ ! -f "$EPUB_FILE" ]; then
              # Try alternative EPUB filenames
              EPUB_FILE=$(find epub-temp -name "*.epub" -type f | head -1)
              if [ -n "$EPUB_FILE" ] && [ -f "$EPUB_FILE" ]; then
                echo "✅ EPUB found (alternative name): $EPUB_FILE"
                echo "📊 EPUB size: $(du -h "$EPUB_FILE" | cut -f1)"
              else
                echo "⚠️ EPUB file not found in extracted artifacts - will skip EPUB deployment"
                EPUB_FILE=""
              fi
            else
              echo "✅ EPUB found: $EPUB_FILE"
              echo "📊 EPUB size: $(du -h "$EPUB_FILE" | cut -f1)"
            fi
          else
            echo "⚠️ No EPUB artifact extracted - will skip EPUB deployment"
          fi
          
          # Prepare combined site
          echo "🔄 Preparing combined HTML site with PDF and EPUB..."
          mkdir -p combined-site
          
          # Copy HTML content
          cp -r "$HTML_BUILD_DIR"/* combined-site/
          
          # Create assets directory and copy PDF
          mkdir -p combined-site/assets
          cp "$PDF_FILE" combined-site/assets/Machine-Learning-Systems.pdf
          
          # Copy EPUB if available
          if [ -n "$EPUB_FILE" ] && [ -f "$EPUB_FILE" ]; then
            cp "$EPUB_FILE" combined-site/assets/Machine-Learning-Systems.epub
            echo "✅ Combined site prepared with HTML + PDF + EPUB"
            
            # Also copy EPUB to root for GitHub release
            cp "$EPUB_FILE" "Machine-Learning-Systems.epub"
          else
            echo "✅ Combined site prepared with HTML + PDF (EPUB not available)"
          fi
          
          echo "📊 Combined site structure:"
          ls -la combined-site/ | head -10
          echo "📊 Assets directory:"
          ls -la combined-site/assets/
          
          # Also copy PDF to root for GitHub release
          cp "$PDF_FILE" "Machine-Learning-Systems.pdf"

      - name: 🚀 Deploy Combined Site to GitHub Pages
        run: |
          echo "🚀 Deploying combined HTML + PDF site to GitHub Pages..."
          
          # Configure git
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Clone gh-pages branch
          git clone --depth=1 --branch=gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
          
          # Clear existing content
          cd gh-pages-repo
          rm -rf *
          
          # Copy new combined content
          cp -r ../combined-site/* .
          
          echo "📊 Deployed content structure:"
          ls -la | head -10
          echo "📊 Assets available:"
          ls -la assets/ 2>/dev/null || echo "No assets directory"
          
          # Add all files to git
          git add .
          
          # Commit and push
          git commit -m "🚀 Deploy release ${{ needs.validate-inputs.outputs.new_version }} from commit ${{ github.sha }}

          Combined HTML site with PDF and EPUB assets for download.
          
          - HTML: Interactive web textbook  
          - PDF: assets/Machine-Learning-Systems.pdf
          - EPUB: assets/Machine-Learning-Systems.epub (if available)
          - Release: ${{ needs.validate-inputs.outputs.new_version }}
          " || echo "No changes to commit"
          
          git push origin gh-pages
          
          echo "✅ GitHub Pages deployment complete!"
          echo "🌐 Site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "📄 PDF: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf"
          echo "📚 EPUB: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.epub"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload PDF Artifact for GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: pdf-artifact
          path: Machine-Learning-Systems.pdf

      - name: 📤 Upload EPUB Artifact for GitHub Release
        if: success()
        run: |
          if [ -f "Machine-Learning-Systems.epub" ]; then
            echo "✅ EPUB file found for upload"
          else
            echo "⚠️ No EPUB file found - creating empty artifact to prevent workflow failure"
            touch Machine-Learning-Systems.epub
          fi

      - name: 📤 Upload EPUB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: epub-artifact
          path: Machine-Learning-Systems.epub
          if-no-files-found: warn

  generate-release-notes:
    name: '📝 Generate Release Notes'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-inputs, wait-for-build, download-and-deploy-artifacts]
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📄 Download PDF from previous job
        uses: actions/download-artifact@v4
        with:
          name: pdf-artifact
          path: ./

      - name: 📝 Generate Release Notes
        run: |
          echo "📝 Generating release notes..."
          echo "🤖 AI Enhancement Mode: ${{ github.event.inputs.ai_generated_notes }}"
          if [ "${{ github.event.inputs.ai_generated_notes }}" = "yes" ]; then
            echo "   ✅ Will use AI to enhance git log (if AI system is available)"
          else
            echo "   📋 Will use git log only (clean, reliable format)"
          fi
          echo ""
          
          # Generate git log between versions
          PREVIOUS_VERSION="${{ needs.validate-inputs.outputs.previous_version }}"
          CURRENT_VERSION="${{ needs.validate-inputs.outputs.new_version }}"
          
          echo "📊 Generating git log from $PREVIOUS_VERSION to current commit..."
          
          # Create detailed git log
          echo "# Release Notes for $CURRENT_VERSION" > git_changes.md
          echo "" >> git_changes.md
          echo "## Changes since $PREVIOUS_VERSION" >> git_changes.md
          echo "" >> git_changes.md
          
          # Get commit log with details
          if git rev-parse "$PREVIOUS_VERSION" >/dev/null 2>&1; then
            echo "✅ Previous version tag $PREVIOUS_VERSION found"
            
            # Summary format for AI processing
            git log --oneline ${PREVIOUS_VERSION}..HEAD > git_log_summary.txt
            
            # Detailed format for inclusion in release
            echo "### Commit Summary:" >> git_changes.md
            git log --oneline ${PREVIOUS_VERSION}..HEAD >> git_changes.md
            echo "" >> git_changes.md
            
            echo "### Detailed Changes:" >> git_changes.md
            git log --pretty=format:"- **%s** (%h) by %an%n  %b" ${PREVIOUS_VERSION}..HEAD >> git_changes.md
            
            echo "📊 Found $(git rev-list --count ${PREVIOUS_VERSION}..HEAD) commits since $PREVIOUS_VERSION"
          else
            echo "⚠️ Previous version tag $PREVIOUS_VERSION not found, using all commits"
            git log --oneline -20 > git_log_summary.txt
            echo "### Recent Commits:" >> git_changes.md
            git log --oneline -20 >> git_changes.md
          fi
          
          echo "✅ Git log generated and saved to files"
          
          if [ "${{ github.event.inputs.ai_generated_notes }}" = "yes" ]; then
            echo ""
            echo "🤖 AI Enhancement Mode Selected - using pre-tested Ollama system..."
            
            # Check if Ollama is already running from pre-flight
            if ollama list >/dev/null 2>&1; then
              echo "✅ Ollama service is already running from pre-flight checks"
              
              # Get the working model from pre-flight
              if [ -f "/tmp/ollama_model.txt" ]; then
                MODEL=$(cat /tmp/ollama_model.txt)
                echo "🤖 Using pre-tested model: $MODEL"
              else
                echo "⚠️ Model info not found, using default"
                MODEL="${{ env.DEFAULT_AI_MODEL }}"
              fi
            else
              echo "⚠️ Ollama not running, AI generation was likely skipped in pre-flight"
              AI_GENERATION_FAILED=true
            fi
            
            # Generate AI-enhanced release notes using git log
            if [ "$AI_GENERATION_FAILED" != "true" ]; then
              echo "📝 Generating AI-enhanced release notes from git log..."
              
              # Create AI prompt with git log content
              {
                echo "Please create professional release notes for version ${{ needs.validate-inputs.outputs.new_version }} based on the following git commits."
                echo ""
                echo "Release Description: ${{ github.event.inputs.description }}"
                echo "Release Type: ${{ github.event.inputs.release_type }}"
                echo ""
                echo "Git Commits:"
                cat git_log_summary.txt
                echo ""
                echo "Please format as:"
                echo "- Brief overview of this release"
                echo "- Key changes organized by category (Features, Bug Fixes, Improvements, etc.)"
                echo "- Keep it professional but accessible"
                echo "- Include any breaking changes if evident"
              } > ai_prompt.txt
              
              # Generate AI release notes
              if ollama run $MODEL < ai_prompt.txt > ai_release_notes.md 2>/dev/null; then
                echo "✅ AI release notes generated successfully"
                
                # Combine AI notes with detailed git log
                {
                  echo "# Release ${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}"
                  echo ""
                  cat ai_release_notes.md
                  echo ""
                  echo "---"
                  echo ""
                  echo "## Full Change Log"
                  echo ""
                  cat git_changes.md
                } > "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
              else
                echo "⚠️ AI generation failed, using git log only"
                cp git_changes.md "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
              fi
              
            fi
          else
            echo ""
            echo "📋 Git Log Only Mode - creating clean release notes from git history"
            
            # Create release notes from git log only
            {
              echo "# Release ${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}"
              echo ""
              echo "## Overview"
              echo "This ${{ github.event.inputs.release_type }} release includes the following changes:"
              echo ""
              cat git_changes.md
            } > "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
          fi
          
          # Show final release notes
          if [ -f "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md" ]; then
            echo "✅ Release notes generated successfully"
            echo "📄 Release notes file details:"
            ls -la "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
            echo "📝 Release notes content (first 50 lines):"
            head -50 "release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
          else
            echo "❌ Failed to generate release notes"
            exit 1
          fi

      - name: 📤 Upload Release Notes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes_${{ needs.validate-inputs.outputs.new_version }}.md

      - name: 📤 Upload Git Log Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-changes
          path: |
            git_changes.md
            git_log_summary.txt
            ai_release_notes.md

  create-release:
    name: '📦 Create GitHub Release'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-inputs, generate-release-notes, create-tag]
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📄 Download PDF from previous job
        uses: actions/download-artifact@v4
        with:
          name: pdf-artifact
          path: ./

      - name: 📚 Download EPUB from previous job
        uses: actions/download-artifact@v4
        with:
          name: epub-artifact
          path: ./

      - name: 📝 Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: ./

      - name: 📦 Create GitHub Release with PDF
        run: |
          echo "📦 Creating GitHub Release ${{ needs.validate-inputs.outputs.new_version }}..."
          echo "📋 Release details:"
          echo "  - Tag: ${{ needs.validate-inputs.outputs.new_version }}"
          echo "  - Name: ${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}"
          echo "  - Repository: ${{ github.repository }}"
          
          # Use the AI-generated release notes
          RELEASE_NOTES_FILE="release_notes_${{ needs.validate-inputs.outputs.new_version }}.md"
          
          if [ -f "$RELEASE_NOTES_FILE" ]; then
            echo "📄 Using AI-generated release notes:"
            cat "$RELEASE_NOTES_FILE"
          else
            echo "❌ Release notes file not found!"
            exit 1
          fi
          
          # Create the release as a DRAFT for manual editing
          echo "🚀 Creating GitHub release as DRAFT..."
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"${{ needs.validate-inputs.outputs.new_version }}\",
              \"name\": \"${{ needs.validate-inputs.outputs.new_version }}: ${{ github.event.inputs.description }}\",
              \"body\": \"$(cat $RELEASE_NOTES_FILE | sed 's/"/\\"/g' | tr '\n' '\\n')\",
              \"draft\": true,
              \"prerelease\": false
            }")
          
          echo "📊 API Response:"
          echo "$RELEASE_RESPONSE" | jq '.'
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          RELEASE_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.html_url')
          
          if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
            echo "✅ Draft release created successfully!"
            echo "📊 Release ID: $RELEASE_ID"
            echo "🔗 Release URL: $RELEASE_URL"
            echo "📝 Next step: Edit release notes manually and publish"
            echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
            echo "release_url=$RELEASE_URL" >> $GITHUB_ENV
          else
            echo "❌ Failed to create release!"
            echo "📊 Error details:"
            echo "$RELEASE_RESPONSE" | jq -r '.message // "Unknown error"'
            echo "$RELEASE_RESPONSE" | jq -r '.errors[]?.message // empty'
            exit 1
          fi

      - name: 📄 Upload PDF to Release Assets
        run: |
          echo "📄 Uploading PDF to release assets..."
          
          if [ ! -f "Machine-Learning-Systems.pdf" ]; then
            echo "❌ PDF file not found!"
            exit 1
          fi
          
          echo "📊 PDF size: $(du -h Machine-Learning-Systems.pdf | cut -f1)"
          
          # Upload the PDF to the release
          UPLOAD_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/pdf" \
            --data-binary @Machine-Learning-Systems.pdf \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=Machine-Learning-Systems.pdf")
          
          echo "📊 Upload Response:"
          echo "$UPLOAD_RESPONSE" | jq '.'
          
          UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
          
          if [ "$UPLOAD_ID" != "null" ] && [ -n "$UPLOAD_ID" ]; then
            echo "✅ PDF uploaded successfully to release!"
            echo "📊 Asset ID: $UPLOAD_ID"
            echo "🔗 Download URL: https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-inputs.outputs.new_version }}/Machine-Learning-Systems.pdf"
          else
            echo "❌ Failed to upload PDF to release!"
            echo "📊 Error details:"
            echo "$UPLOAD_RESPONSE" | jq -r '.message // "Unknown error"'
            exit 1
          fi

      - name: 📚 Upload EPUB to Release Assets
        run: |
          echo "📚 Checking for EPUB file to upload..."
          
          if [ ! -f "Machine-Learning-Systems.epub" ]; then
            echo "⚠️ EPUB file not found - skipping EPUB upload"
            exit 0
          fi
          
          # Check if it's an empty file (created as placeholder)
          if [ ! -s "Machine-Learning-Systems.epub" ]; then
            echo "⚠️ EPUB file is empty (placeholder) - skipping EPUB upload"
            exit 0
          fi
          
          echo "📚 Uploading EPUB to release assets..."
          echo "📊 EPUB size: $(du -h Machine-Learning-Systems.epub | cut -f1)"
          
          # Upload the EPUB to the release
          UPLOAD_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/epub+zip" \
            --data-binary @Machine-Learning-Systems.epub \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=Machine-Learning-Systems.epub")
          
          echo "📊 Upload Response:"
          echo "$UPLOAD_RESPONSE" | jq '.'
          
          UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
          
          if [ "$UPLOAD_ID" != "null" ] && [ -n "$UPLOAD_ID" ]; then
            echo "✅ EPUB uploaded successfully to release!"
            echo "📊 Asset ID: $UPLOAD_ID"
            echo "🔗 Download URL: https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-inputs.outputs.new_version }}/Machine-Learning-Systems.epub"
          else
            echo "⚠️ Failed to upload EPUB to release (continuing anyway)!"
            echo "📊 Error details:"
            echo "$UPLOAD_RESPONSE" | jq -r '.message // "Unknown error"'
          fi

  summary:
    name: '📋 Publication Summary'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-inputs, create-release]
    if: github.event.inputs.confirm == 'PUBLISH'
    
    steps:
      - name: 📋 Publication Summary
        run: |
          echo "## 📚 Textbook Publication Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Released:** ${{ needs.validate-inputs.outputs.new_version }} (${{ needs.validate-inputs.outputs.release_type }})" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** ${{ needs.validate-inputs.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content Published:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Commit:** ${{ github.event.inputs.dev_commit || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Publication Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Release ID:** ${{ env.release_id || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ env.release_url || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Debug Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Generated Notes:** ${{ github.event.inputs.ai_generated_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Changes:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 What happened:" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Verified dev branch tests passed" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Calculated new version number" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Merged dev → main branch" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Pushed to main (triggered production build)" >> $GITHUB_STEP_SUMMARY
          echo "5. ✅ Waited for build completion (up to 3 hours)" >> $GITHUB_STEP_SUMMARY
          echo "6. ✅ Created release tag ${{ needs.validate-inputs.outputs.new_version }} (after successful build)" >> $GITHUB_STEP_SUMMARY
          echo "7. ✅ Created GitHub Release (DRAFT - edit manually)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Process:" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Build Manager Workflow**: Triggered by main branch push" >> $GITHUB_STEP_SUMMARY
          echo "- 🔨 **Build Jobs**: HTML + PDF generation on Linux (parallel builds)" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 **PDF Processing**: Generated, compressed with Ghostscript, stored in build/pdf/" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Artifacts**: main-html-linux (web content) + main-pdf-linux (PDF file) + main-epub-linux (EPUB file)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Integration**: Downloaded all artifacts and combined into unified deployment" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Deployment**: Combined HTML + PDF + EPUB deployed to GitHub Pages (gh-pages branch)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access Your Published Textbook:" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 [Interactive Web Textbook](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Version Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-inputs.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 [Download Complete PDF](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-inputs.outputs.new_version }}/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 [Download EPUB eBook](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-inputs.outputs.new_version }}/Machine-Learning-Systems.epub)" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 [Direct PDF Access](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.pdf)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 [Direct EPUB Access](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/assets/Machine-Learning-Systems.epub)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎓 [Share with Students](https://mlsysbook.ai)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Status:" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Build Manager Workflow**: Should be running/completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **Quarto Build**: HTML + PDF generation" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 **PDF Assets**: Available at `/assets/Machine-Learning-Systems.pdf`" >> $GITHUB_STEP_SUMMARY

  cleanup-on-failure:
    name: '🧹 Cleanup Failed Release'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-inputs]
    if: always() && github.event.inputs.confirm == 'PUBLISH' && (failure() || cancelled())
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Clean up failed release artifacts
        run: |
          echo "🧹 Cleaning up artifacts from failed release..."
          
          # Get the version that was being released
          if [ -n "${{ needs.validate-inputs.outputs.new_version }}" ]; then
            VERSION_TAG="${{ needs.validate-inputs.outputs.new_version }}"
            echo "🎯 Cleaning up version: $VERSION_TAG"
          else
            echo "⚠️ No version information available, skipping cleanup"
            exit 0
          fi
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check and remove local tag
          if git tag -l "$VERSION_TAG" | grep -q "$VERSION_TAG"; then
            echo "🗑️ Removing local tag: $VERSION_TAG"
            git tag -d "$VERSION_TAG"
          else
            echo "ℹ️ Local tag $VERSION_TAG does not exist"
          fi
          
          # Check and remove remote tag if it exists
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION_TAG$"; then
            echo "🗑️ Removing remote tag: $VERSION_TAG"
            git push origin --delete "$VERSION_TAG" || echo "⚠️ Failed to delete remote tag (may not exist)"
          else
            echo "ℹ️ Remote tag $VERSION_TAG does not exist"
          fi
          
          # Check for any draft releases and delete them
          echo "🔍 Checking for draft releases..."
          DRAFT_RELEASE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            | jq -r ".[] | select(.tag_name == \"$VERSION_TAG\" and .draft == true) | .id")
          
          if [ "$DRAFT_RELEASE" != "null" ] && [ -n "$DRAFT_RELEASE" ]; then
            echo "🗑️ Deleting draft release: $DRAFT_RELEASE"
            curl -s \
              -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$DRAFT_RELEASE"
            echo "✅ Draft release deleted"
          else
            echo "ℹ️ No draft release found for $VERSION_TAG"
          fi
          
          echo "✅ Cleanup completed! Repository is ready for retry."

      - name: 📊 Cleanup Summary
        run: |
          echo "## 🧹 Failed Release Cleanup Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-inputs.outputs.new_version || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Original Inputs (for debugging):" >> $GITHUB_STEP_SUMMARY
          echo "- **Description:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Commit:** ${{ github.event.inputs.dev_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Confirmation:** ${{ github.event.inputs.confirm }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Generated Notes:** ${{ github.event.inputs.ai_generated_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Timeout:** ${{ github.event.inputs.commit_status_timeout }} attempts" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Interval:** ${{ github.event.inputs.commit_status_interval }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🗑️ Cleaned Up:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Local git tags removed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Remote git tags removed (if they existed)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Draft GitHub releases removed (if they existed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Ready for Retry:" >> $GITHUB_STEP_SUMMARY
          echo "You can now safely re-run the publish workflow with the same version number." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐛 Troubleshooting:" >> $GITHUB_STEP_SUMMARY
          echo "If you continue to have issues, check the workflow logs for the failed step." >> $GITHUB_STEP_SUMMARY

  cleanup-on-timeout:
    name: '⏰ Cleanup Timed Out Release'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-inputs, trigger-production-build]
    if: always() && github.event.inputs.confirm == 'PUBLISH' && (needs.trigger-production-build.result == 'failure' || needs.trigger-production-build.result == 'timeout')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Clean up timed out release artifacts
        run: |
          echo "⏰ Cleaning up artifacts from timed out release..."
          
          # Get the version that was being released
          if [ -n "${{ needs.validate-inputs.outputs.new_version }}" ]; then
            VERSION_TAG="${{ needs.validate-inputs.outputs.new_version }}"
            echo "🎯 Cleaning up version: $VERSION_TAG"
          else
            echo "⚠️ No version information available, skipping cleanup"
            exit 0
          fi
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check and remove local tag
          if git tag -l "$VERSION_TAG" | grep -q "$VERSION_TAG"; then
            echo "🗑️ Removing local tag: $VERSION_TAG"
            git tag -d "$VERSION_TAG"
          else
            echo "ℹ️ Local tag $VERSION_TAG does not exist"
          fi
          
          # Check and remove remote tag if it exists
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION_TAG$"; then
            echo "🗑️ Removing remote tag: $VERSION_TAG"
            git push origin --delete "$VERSION_TAG" || echo "⚠️ Failed to delete remote tag (may not exist)"
          else
            echo "ℹ️ Remote tag $VERSION_TAG does not exist"
          fi
          
          # Check for any draft releases and delete them
          echo "🔍 Checking for draft releases..."
          DRAFT_RELEASE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            | jq -r ".[] | select(.tag_name == \"$VERSION_TAG\" and .draft == true) | .id")
          
          if [ "$DRAFT_RELEASE" != "null" ] && [ -n "$DRAFT_RELEASE" ]; then
            echo "🗑️ Deleting draft release: $DRAFT_RELEASE"
            curl -s \
              -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$DRAFT_RELEASE"
            echo "✅ Draft release deleted"
          else
            echo "ℹ️ No draft release found for $VERSION_TAG"
          fi
          
          echo "✅ Cleanup completed! Repository is ready for retry."

      - name: 🔄 Rollback Main Branch (if needed)
        run: |
          echo "🔄 Checking if main branch rollback is needed..."
          
          # Only rollback if merge succeeded but later steps failed
          if [ "${{ needs.merge-to-main.result }}" = "success" ] && [ "${{ needs.create-tag.result }}" != "success" ]; then
            echo "⚠️ Merge succeeded but tag creation failed - considering rollback"
            echo "🔍 Checking if main branch needs to be rolled back..."
            
            # Get the commit before the merge
            MERGE_COMMIT=$(git log --oneline -1 --grep="Release $VERSION_TAG" --format="%H" || echo "")
            
            if [ -n "$MERGE_COMMIT" ]; then
              PARENT_COMMIT=$(git log --format="%P" -n 1 "$MERGE_COMMIT" | cut -d' ' -f1)
              echo "🔍 Found merge commit: $MERGE_COMMIT"
              echo "🔍 Parent commit: $PARENT_COMMIT"
              
              echo "⚠️ To manually rollback main branch, run:"
              echo "   git checkout main"
              echo "   git reset --hard $PARENT_COMMIT"
              echo "   git push origin main --force-with-lease"
              echo ""
              echo "⚠️ AUTOMATED ROLLBACK DISABLED - Manual intervention required"
              echo "🛡️ This prevents accidental data loss"
            else
              echo "ℹ️ No merge commit found - no rollback needed"
            fi
          else
            echo "ℹ️ No rollback needed - merge did not complete successfully"
          fi

      - name: 📊 Cleanup Summary
        run: |
          echo "## 🧹 Failed Release Cleanup Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-inputs.outputs.new_version || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Original Inputs (for debugging):" >> $GITHUB_STEP_SUMMARY
          echo "- **Description:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Commit:** ${{ github.event.inputs.dev_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Confirmation:** ${{ github.event.inputs.confirm }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Generated Notes:** ${{ github.event.inputs.ai_generated_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Timeout:** ${{ github.event.inputs.commit_status_timeout }} attempts" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Check Interval:** ${{ github.event.inputs.commit_status_interval }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Attempt:** ${{ github.run_attempt }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🗑️ Cleaned Up:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Local git tags removed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Remote git tags removed (if they existed)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Draft GitHub releases removed (if they existed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Ready for Retry:" >> $GITHUB_STEP_SUMMARY
          echo "You can now safely re-run the publish workflow with the same version number." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐛 Troubleshooting:" >> $GITHUB_STEP_SUMMARY
          echo "If you continue to have issues, check the workflow logs for the failed step." >> $GITHUB_STEP_SUMMARY

  fail-validation:
    name: '❌ Validation Failed'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.confirm != 'PUBLISH'
    
    steps:
      - name: ❌ Invalid confirmation
        run: |
          echo "## ❌ Publication Validation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Invalid confirmation" >> $GITHUB_STEP_SUMMARY
          echo "**Expected:** PUBLISH" >> $GITHUB_STEP_SUMMARY
          echo "**Received:** ${{ github.event.inputs.confirm }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Debug Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Description:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Commit:** ${{ github.event.inputs.dev_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Generated Notes:** ${{ github.event.inputs.ai_generated_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "❌ Publication cancelled - invalid confirmation"
          echo "🔒 You must type exactly 'PUBLISH' to confirm"
          echo "📝 You entered: '${{ github.event.inputs.confirm }}'"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🌐 Branch: ${{ github.ref_name }}"
          echo "🔄 Run ID: ${{ github.run_id }}"
          exit 1 