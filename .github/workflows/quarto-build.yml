name: 'üìö Quarto Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.13'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: üîç Validate inputs
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "‚ùå Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "‚úÖ Input validation passed"

      - name: üîç Verify branch
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "‚ùå Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "‚ùå Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "‚úÖ Branch verification passed"

      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      # Cache Quarto
      - name: üíæ Cache Quarto
        uses: actions/cache@v3
        id: cache-quarto
        with:
          path: |
            ~/.local/share/quarto
            ~/AppData/Local/quarto  # Windows path
          key: ${{ runner.os }}-quarto-${{ inputs.quarto-version }}

      - name: üì¶ Setup Quarto
        if: steps.cache-quarto.outputs.cache-hit != 'true'
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}

      # Cache TeX Live
      - name: üíæ Cache TeX Live
        uses: actions/cache@v3
        id: cache-texlive
        with:
          path: |
            ~/.texlive
            ~/.TinyTeX
            ~/AppData/Roaming/TinyTeX  # Windows path
          key: ${{ runner.os }}-texlive-${{ hashFiles('**/*.tex') }}
          restore-keys: |
            ${{ runner.os }}-texlive-

      # TinyTeX setup based on OS
      - name: üìù Install TinyTeX (Linux)
        if: runner.os == 'Linux' && steps.cache-texlive.outputs.cache-hit != 'true'
        timeout-minutes: 5
        shell: bash
        run: |
          quarto install tinytex
          echo "$HOME/.TinyTeX/bin/x86_64-linux" >> $GITHUB_PATH

      - name: üìù Install TinyTeX (Windows)
        if: runner.os == 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
        uses: r-lib/actions/setup-tinytex@v2
        
      - name: üì¶ Install & Update TeX Live
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages: |
            scheme-basic      # Minimal base TeX system
            collection-basic  # Core LaTeX functionality
            collection-latex  # Standard LaTeX packages
            collection-latexrecommended   # Common recommended packages
            collection-latexextra         # Additional LaTeX utilities
            collection-fontsrecommended   # Recommended fonts for LaTeX
            collection-pictures   # Image handling support (TikZ, PGF, etc.)
            collection-xetex      # XeLaTeX engine and utilities
            collection-luatex     # LuaLaTeX engine and dependencies
            collection-bibtexextra  # Advanced bibliography support
            collection-langenglish  # English language support
            koma-script       # KOMA-Script classes
            standalone       # Standalone package for figures
            pgf              # Core PGF/TikZ package
            tikz-cd         # Commutative diagrams
            pgfplots        # Plotting functionality
            preview         # Preview package
            marginfix      # Explicitly add marginfix
            newpx          # Explicitly add newpx font package
            luatex85       # Font support
          update-all-packages: false

      - name: üìä Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      - name: üíæ Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ runner.os == 'Windows' && 'C:/Users/runneradmin/Documents/R/win-library' || '~/R/library' }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/install_packages.R') }}
          restore-keys: |
            ${{ runner.os }}-r-

      # Cache Linux system packages
      - name: üíæ Cache APT packages
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: ~/.apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('**/workflow.yml') }}

      - name: üì¶ Install R Dependencies
        shell: Rscript {0}
        run: |
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          install.packages(c("remotes"))
          
          # Cross-platform path handling
          lib_path <- ifelse(.Platform$OS.type == "windows", 
                           Sys.getenv("R_LIBS_USER"), 
                           "~/R/library")
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          if (file.exists("install_packages.R")) {
            source("install_packages.R")
          } else {
            message("‚ö†Ô∏è No install_packages.R found, skipping additional dependencies")
          }

      - name: üõ†Ô∏è Install Linux Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "üîÑ Installing Linux dependencies..."
          sudo apt-get update
          mkdir -p ~/.apt-cache
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcogl-pango-dev \
            pango1.0-tools \
            libcairo2 \
            gdk-pixbuf2.0-bin \
            libgdk-pixbuf2.0-dev \
            librsvg2-bin \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "‚úÖ Linux dependencies installed"

      # Cache Inkscape
      - name: üíæ Cache Inkscape
        uses: actions/cache@v3
        id: cache-inkscape
        with:
          path: |
            ~/.config/inkscape
            ~/AppData/Roaming/inkscape  # Windows path
          key: ${{ runner.os }}-inkscape-${{ hashFiles('**/*.svg') }}

      - name: üé® Install Inkscape (Linux)
        if: runner.os == 'Linux' && steps.cache-inkscape.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo add-apt-repository ppa:inkscape.dev/stable -y
          sudo apt-get update
          sudo apt-get install inkscape -y

      - name: üé® Install Inkscape (Windows)
        if: runner.os == 'Windows' && steps.cache-inkscape.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Output "üîÑ Installing Inkscape..."
          choco install inkscape -y
          Write-Output "‚úÖ Inkscape installed"

      # Cache compilation artifacts
      - name: üíæ Cache compilation artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/_cache
            **/.quarto
            **/.jupyter_cache
          key: ${{ runner.os }}-compilation-${{ hashFiles('**/*.qmd', '**/*.ipynb', '**/*.md') }}
          restore-keys: |
            ${{ runner.os }}-compilation-

      # Cache Quarto build outputs
      - name: üíæ Cache Quarto build
        uses: actions/cache@v3
        with:
          path: _book
          key: ${{ runner.os }}-quarto-book-${{ hashFiles('**/*.qmd', '**/*.ipynb', '**/*.bib') }}
          restore-keys: |
            ${{ runner.os }}-quarto-book-

      - name: üî® Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        continue-on-error: false # Explicitly fail if rendering fails

      - name: üì§ Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Setup Python for both platforms
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Cache Python dependencies for PDF compression
      - name: üíæ Cache Python PDF tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache  # Windows path
          key: ${{ runner.os }}-pip-pdf-${{ hashFiles('**/scripts/quarto_publish/requirements.txt') }}

      - name: üì¶ Install Python PDF tools
        shell: bash
        run: |
          if [ -f "./.github/scripts/quarto_publish/requirements.txt" ]; then
            pip install -r ./.github/scripts/quarto_publish/requirements.txt
          else
            pip install pikepdf ghostscript PyPDF2
          fi

      - name: üì¶ Install Ghostscript (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript

      - name: üì¶ Install Ghostscript (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Output "üîÑ Installing Ghostscript..."
          choco install ghostscript -y
          # Add Ghostscript to PATH
          $GsPath = "C:\Program Files\gs\gs*\bin"
          $GsExePath = (Get-ChildItem -Path $GsPath -Directory | Sort-Object -Property Name -Descending | Select-Object -First 1).FullName
          echo "$GsExePath" | Out-File -FilePath $env:GITHUB_PATH -Append
          Write-Output "‚úÖ Ghostscript installed"

      - name: üìÑ Check and Compress PDF (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e  # Exit on any error
          PDF_INPUT="./_book/Machine-Learning-Systems.pdf"
          PDF_OUTPUT="./_book/ebook.pdf"

          if [[ ! -f "$PDF_INPUT" ]]; then
            echo "‚ùå PDF file not found!"
            exit 1
          fi

          python3 ./.github/scripts/gs_compress_pdf.py -i "$PDF_INPUT" -o "$PDF_OUTPUT" -s "/ebook"

          if [[ -f "$PDF_OUTPUT" ]]; then
            mv "$PDF_OUTPUT" "$PDF_INPUT"
          else
            echo "‚ö†Ô∏è PDF compression failed, keeping original file"
          fi

      - name: üìÑ Check and Compress PDF (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $PdfInput = ".\_book\Machine-Learning-Systems.pdf"
          $PdfOutput = ".\_book\ebook.pdf"

          if (-not (Test-Path $PdfInput)) {
            Write-Error "‚ùå PDF file not found!"
            exit 1
          }

          python .\.github\scripts\gs_compress_pdf.py -i "$PdfInput" -o "$PdfOutput" -s "/ebook"

          if (Test-Path $PdfOutput) {
            Move-Item -Path $PdfOutput -Destination $PdfInput -Force
          } else {
            Write-Output "‚ö†Ô∏è PDF compression failed, keeping original file"
          }

      - name: üöÄ Stage to Dev Site
        if: inputs.target == 'dev' && runner.os == 'Linux'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            üìö Push dev branch build

      - name: üöÄ Deploy to GitHub Pages
        if: inputs.target == 'main' && runner.os == 'Linux'
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          render: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Add comprehensive debug artifacts
      - name: üì¶ Collect Debug Artifacts
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ inputs.target }}-${{ inputs.os }}
          path: |
            _book/**
            .quarto/**
            **/_cache/**
            **/logs/**
            **/*.log
            **/.jupyter_cache/**
            .Rcheck/**
            **/*.Rout
            custom-texlive/**/*.log
            **/.TinyTeX/texmf-var/log/**
            **/.texlive/**/*.log
            **/texmf-var/log/**
            **/*.aux
            **/*.blg
            **/*.fls
            **/*.fdb_latexmk
          compression-level: 9  # Maximum compression
          retention-days: 5  # Keep for 5 days

      - name: üìã Build Summary
        shell: pwsh
        run: |
          @"
          ## üìä Build Status Summary
          üéØ Target: ${{ inputs.target }}
          üíª OS: ${{ inputs.os }}
          üîß Environment: ${{ inputs.environment }}
          üìö Quarto Version: ${{ inputs.quarto-version }}
          üî¨ R Version: ${{ inputs.r-version }}
          ‚è∞ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY