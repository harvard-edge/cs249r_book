name: '📚 Quarto Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.13'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 🔍 Validate inputs
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "❌ Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "✅ Input validation passed"

      - name: 🔍 Verify branch
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "❌ Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "❌ Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "✅ Branch verification passed"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      # Cache Quarto - Using environment variables
      - name: 💾 Cache Quarto
        uses: actions/cache@v4
        id: cache-quarto
        with:
          path: |
            ~/.local/share/quarto
            ~/AppData/Local/Programs/Quarto
            ~/AppData/Local/quarto
          key: quarto-${{ runner.os }}-${{ inputs.quarto-version }}

      - name: 📦 Setup Quarto
        if: steps.cache-quarto.outputs.cache-hit != 'true'
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}

      # Install TinyTeX using Quarto's built-in tools
      - name: 📦 Install TinyTeX with Quarto
        shell: bash
        run: |
          # Install TinyTeX using Quarto
          quarto tools install tinytex
          quarto tools install chromium
          
          # Verify installation
          quarto tools

      # # Install TeX Live Full Distribution
      # - name: 📦 Install TeX Live 2025
      #   uses: teatimeguest/setup-texlive-action@v3
      #   with:
      #     version: latest # This will get TeX Live 2025
      #     packages: scheme-full
      #     update-all-packages: true
      #     cache: true

      # # Apply cross-release update
      # - name: Update TeX Live Manager to latest
      #   shell: bash
      #   run: |
      #     wget https://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh
      #     chmod +x update-tlmgr-latest.sh
      #     sudo ./update-tlmgr-latest.sh -- --update
      #     tlmgr update --self --all
          
      - name: 📊 Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      # Cache R packages using standard paths
      - name: 💾 Cache R packages
        uses: actions/cache@v4
        id: cache-r-packages
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-${{ hashFiles('**/install_packages.R') }}
          restore-keys: |
            r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-

      - name: 📦 Install R packages
        if: steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          # Set options for better package installation
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          
          # Create and set library path
          lib_path <- Sys.getenv("R_LIBS_USER")
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Install packages
          install.packages("remotes")
          
          if (file.exists("install_packages.R")) {
            source("install_packages.R")
          } else {
            message("⚠️ No install_packages.R found, installing common packages")
            pkgs <- c("rmarkdown", "knitr", "tidyverse", "ggplot2", "bookdown")
            install.packages(pkgs)
          }

      # Cache Linux system packages without hardcoded paths
      - name: 💾 Cache APT packages
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        id: cache-apt
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: 🛠️ Install Linux Dependencies
        if: runner.os == 'Linux' && steps.cache-apt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "🔄 Installing Linux dependencies..."
          mkdir -p ~/.apt-cache
          sudo apt-get update
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcairo2 \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "✅ Linux dependencies installed"

      # Cache Inkscape with standard paths
      - name: 💾 Cache Inkscape
        uses: actions/cache@v4
        id: cache-inkscape
        with:
          path: |
            ~/.config/inkscape
            ~/AppData/Roaming/inkscape
            ${{ runner.os == 'Windows' && 'C:/Program Files/Inkscape' || '/usr/share/inkscape' }}
          key: inkscape-${{ runner.os }}-${{ hashFiles('**/*.svg') }}

      - name: 🎨 Install Inkscape (Linux)
        if: runner.os == 'Linux' && steps.cache-inkscape.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo add-apt-repository ppa:inkscape.dev/stable -y
          sudo apt-get update
          sudo apt-get install inkscape -y

      - name: 🎨 Install Inkscape (Windows)
        if: runner.os == 'Windows' && steps.cache-inkscape.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Output "🔄 Installing Inkscape..."
          choco install inkscape -y
          Write-Output "✅ Inkscape installed"

      # Cache compilation artifacts with workspace paths
      - name: 💾 Cache compilation artifacts
        uses: actions/cache@v4
        id: cache-compilation
        with:
          path: |
            ${{ github.workspace }}/**/_cache
            ${{ github.workspace }}/**/.quarto
            ${{ github.workspace }}/**/.jupyter_cache
          key: compilation-${{ runner.os }}-${{ inputs.target }}-${{ github.sha }}
          restore-keys: |
            compilation-${{ runner.os }}-${{ inputs.target }}-
            compilation-${{ runner.os }}-

      # Cache Quarto build outputs with workspace paths
      - name: 💾 Cache Quarto build
        uses: actions/cache@v4
        id: cache-quarto-book
        with:
          path: ${{ github.workspace }}/_book
          key: quarto-book-${{ runner.os }}-${{ inputs.target }}-${{ github.sha }}
          restore-keys: |
            quarto-book-${{ runner.os }}-${{ inputs.target }}-
            quarto-book-${{ runner.os }}-

      - name: 🔨 Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        continue-on-error: false # Explicitly fail if rendering fails

      - name: 📤 Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Updated Python setup
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: '**/scripts/quarto_publish/requirements.txt'

      - name: 📦 Install Python PDF tools
        shell: bash
        run: |
          if [ -f "./.github/scripts/quarto_publish/requirements.txt" ]; then
            pip install -r ./.github/scripts/quarto_publish/requirements.txt
          else
            pip install pikepdf ghostscript PyPDF2
          fi

      - name: 📚 Compress PDF
        uses: jy95/ghostscript-action@v1  
        with:
          file: '${{ github.workspace }}/_book/Machine-Learning-Systems.pdf'
          output: '${{ github.workspace }}/_book/Machine-Learning-Systems-compressed.pdf'
          arbitrary-parameters: '-dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook'

      - name: ♻️ Replace original PDF
        shell: pwsh
        run: |
          $pdfPath = "${{ github.workspace }}/_book/Machine-Learning-Systems.pdf"
          $compressedPath = "${{ github.workspace }}/_book/Machine-Learning-Systems-compressed.pdf"
          
          if (Test-Path $compressedPath) {
            Move-Item $compressedPath $pdfPath -Force
            Write-Output "✅ PDF compressed and replaced successfully"
          } else {
            Write-Error "❌ PDF compression failed; keeping original file."
            exit 1
          }

      - name: 🚀 Stage to Dev Site
        if: inputs.target == 'dev' && runner.os == 'Linux'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            📚 Push dev branch build

      - name: 🚀 Deploy to GitHub Pages
        if: inputs.target == 'main' && runner.os == 'Linux'
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          render: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Add comprehensive debug artifacts
      - name: 📦 Collect Debug Artifacts
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ inputs.target }}-${{ inputs.os }}
          path: |
            ${{ github.workspace }}/_book/**
            ${{ github.workspace }}/.quarto/**
            ${{ github.workspace }}/**/_cache/**
            ${{ github.workspace }}/**/logs/**
            ${{ github.workspace }}/**/*.log
            ${{ github.workspace }}/**/.jupyter_cache/**
            ${{ github.workspace }}/.Rcheck/**
            ${{ github.workspace }}/**/*.Rout
            ${{ github.workspace }}/**/*.aux
            ${{ github.workspace }}/**/*.blg
            ${{ github.workspace }}/**/*.fls
            ${{ github.workspace }}/**/*.fdb_latexmk
          compression-level: 9  # Maximum compression
          retention-days: 5  # Keep for 5 days

      - name: 📋 Build Summary
        shell: pwsh
        run: |
          @"
          ## 📊 Build Status Summary
          🎯 Target: ${{ inputs.target }}
          💻 OS: ${{ inputs.os }}
          🔧 Environment: ${{ inputs.environment }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          🧩 Cache Status:
            - Quarto: ${{ steps.cache-quarto.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
            - TeX Live: Installed via teatimeguest/setup-texlive-action@v3
            - R Packages: ${{ steps.cache-r-packages.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
            - Compilation: ${{ steps.cache-compilation.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
          ⏰ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY