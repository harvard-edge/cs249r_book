# Add R package cache back since we're using a custom script
      - name: 💾 Cache R packages
        uses: actions/cache@v3
        id: cache-r-packages
        with:
          path: |
            ${{ runner.os == 'Linux' && '~/R/library' || 'C:/Users/runneradmin/Documents/R/win-library' }}
          key: r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-${{ hashFiles('install_packages.R') }}-v1name: '📚 Quarto Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.13'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 🔍 Validate inputs
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "❌ Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "✅ Input validation passed"

      - name: 🔍 Verify branch
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "❌ Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "❌ Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "✅ Branch verification passed"

      - name: 📥 Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      # Remove this step since we're now using setup-quarto action
      

      # Remove this step since we're now using setup-quarto action
      

      # Use existing actions to install Quarto and TinyTeX
      - name: 📦 Setup Quarto
        if: steps.cache-quarto-tex.outputs.cache-hit != 'true'
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}
          
      - name: 📝 Install TinyTeX
        if: steps.cache-quarto-tex.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Installing TinyTeX..."
          quarto install tinytex --no-prompt
          
          # Add TinyTeX to PATH based on OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "$HOME/.TinyTeX/bin/x86_64-linux" >> $GITHUB_PATH
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$HOME/AppData/Roaming/TinyTeX/bin/win32" >> $GITHUB_PATH
          fi
          
          # Ensure LuaTeX is properly set up
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            $HOME/.TinyTeX/bin/x86_64-linux/tlmgr path add
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            $HOME/AppData/Roaming/TinyTeX/bin/win32/tlmgr.bat path add
          fi
          
      - name: 📦 Install TeX packages for Quarto
        if: steps.cache-quarto-tex.outputs.cache-hit != 'true'
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages: |
            scheme-full
            collection-fontsrecommended
            collection-latexextra
            collection-luatex
            collection-mathscience
            collection-pictures
            collection-publishers
            collection-xetex
            collection-bibtexextra
            collection-formatsextra
          update-all-packages: false

      # Simplified R setup with built-in caching
      - name: 📊 Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      # Cache Linux system packages - these rarely change
      - name: 💾 Cache APT packages
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        id: cache-apt
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-v2
          restore-keys: |
            apt-${{ runner.os }}-

      - name: 📦 Install R Dependencies
        if: steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          # Set library path based on OS
          lib_path <- if(Sys.info()["sysname"] == "Windows") {
            "C:/Users/runneradmin/Documents/R/win-library"
          } else {
            "~/R/library"
          }
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # First install core packages
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          install.packages(c("knitr", "rmarkdown", "bookdown", "dplyr", "ggplot2", "plotly", "remotes"))
          
          # Then run the custom install script if it exists
          if (file.exists("install_packages.R")) {
            message("Installing packages from install_packages.R")
            source("install_packages.R")
          } else {
            message("No install_packages.R file found, using standard packages only")
          }

      - name: 🛠️ Install Linux Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "🔄 Installing Linux dependencies..."
          sudo apt-get update
          mkdir -p ~/.apt-cache
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcogl-pango-dev \
            pango1.0-tools \
            libcairo2 \
            gdk-pixbuf2.0-bin \
            libgdk-pixbuf2.0-dev \
            librsvg2-bin \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "✅ Linux dependencies installed"

      # Cache Inkscape binary and configs separately
      - name: 💾 Cache Inkscape
        uses: actions/cache@v3
        id: cache-inkscape
        with:
          path: |
            ~/.config/inkscape
            ~/AppData/Roaming/inkscape
          key: inkscape-config-${{ runner.os }}-v2

      # Replace Inkscape installation with action
      - name: 🎨 Setup Inkscape
        uses: ConorMacBride/install-package@v1
        with:
          apt: inkscape
          choco: inkscape

      # Split cache for compilation artifacts by branch
      - name: 💾 Cache compilation artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/_cache
            **/.quarto
            **/.jupyter_cache
          key: compilation-${{ runner.os }}-${{ inputs.target }}-${{ steps.dep-hash.outputs.content_hash }}-v2
          restore-keys: |
            compilation-${{ runner.os }}-${{ inputs.target }}-
            compilation-${{ runner.os }}-

      # Cache Quarto build outputs per branch
      - name: 💾 Cache Quarto build
        uses: actions/cache@v3
        with:
          path: _book
          key: quarto-book-${{ runner.os }}-${{ inputs.target }}-${{ steps.dep-hash.outputs.content_hash }}-v2
          restore-keys: |
            quarto-book-${{ runner.os }}-${{ inputs.target }}-
            quarto-book-${{ runner.os }}-

      # Cache verification step
      - name: 🔍 Verify caches
        shell: bash
        run: |
          echo "Cache verification:"
          echo "Quarto cache hit: ${{ steps.cache-quarto.outputs.cache-hit }}"
          echo "TeX Live core cache hit: ${{ steps.cache-texlive-core.outputs.cache-hit }}"
          echo "TeX Live packages cache hit: ${{ steps.cache-texlive-packages.outputs.cache-hit }}"
          echo "R core cache hit: ${{ steps.cache-r-core.outputs.cache-hit }}"
          echo "R project cache hit: ${{ steps.cache-r-project.outputs.cache-hit }}"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "APT cache hit: ${{ steps.cache-apt.outputs.cache-hit }}"
          fi
          echo "Inkscape cache hit: ${{ steps.cache-inkscape.outputs.cache-hit }}"
          
          # Check key paths
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Checking TeX Live installation:"
            if [[ -d "$HOME/.TinyTeX" ]]; then
              echo "✅ TinyTeX directory exists"
              ls -la "$HOME/.TinyTeX/bin" || echo "⚠️ No bin directory found"
            else
              echo "❌ TinyTeX directory missing"
            fi
          fi
          
          echo "Checking R library:"
          ls -la "$R_LIBS_USER" || echo "❌ R library directory not found"

      - name: 🔨 Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        continue-on-error: false # Explicitly fail if rendering fails

      - name: 📤 Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Setup Python with proper cache
      - name: 💾 Cache Python packages
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-v2

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: |
            .github/scripts/quarto_publish/requirements.txt
            .github/scripts/*/requirements.txt

      - name: 📦 Install Python PDF tools
        shell: bash
        run: |
          if [ -f "./.github/scripts/quarto_publish/requirements.txt" ]; then
            pip install -r ./.github/scripts/quarto_publish/requirements.txt
          else
            echo "Installing default PDF tools"
            pip install pikepdf ghostscript PyPDF2
          fi

      # Replace Ghostscript installation with action
      - name: 📦 Setup Ghostscript
        uses: ConorMacBride/install-package@v1
        with:
          apt: ghostscript
          choco: ghostscript

      - name: 📄 Check and Compress PDF
        shell: bash
        run: |
          set -e  # Exit on any error
          
          # Define platform-specific file paths
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PDF_INPUT="./_book/Machine-Learning-Systems.pdf"
            PDF_OUTPUT="./_book/ebook.pdf"
          else
            PDF_INPUT="./_book/Machine-Learning-Systems.pdf" 
            PDF_OUTPUT="./_book/ebook.pdf"
          fi
          
          if [[ ! -f "$PDF_INPUT" ]]; then
            echo "❌ PDF file not found at $PDF_INPUT!"
            exit 1
          fi
          
          python ./.github/scripts/gs_compress_pdf.py -i "$PDF_INPUT" -o "$PDF_OUTPUT" -s "/ebook"
          
          if [[ -f "$PDF_OUTPUT" ]]; then
            mv "$PDF_OUTPUT" "$PDF_INPUT"
            echo "✅ PDF successfully compressed"
          else
            echo "⚠️ PDF compression failed, keeping original file"
          fi

      - name: 🚀 Stage to Dev Site
        if: inputs.target == 'dev' && runner.os == 'Linux'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            📚 Push dev branch build

      # Use the built-in GitHub Pages deployment action
      - name: 🚀 Deploy to GitHub Pages
        if: inputs.target == 'main' && runner.os == 'Linux'
        uses: actions/deploy-pages@v2
        with:
          path: '_book'

      # Simplified debug artifacts with smarter filtering
      - name: 📦 Collect Debug Artifacts
        if: failure()  # Only collect on failure to save storage
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ inputs.target }}-${{ inputs.os }}
          path: |
            _book/**/*.pdf
            _book/**/*.html
            .quarto/
            **/logs/
            **/*.log
            **/.TinyTeX/texmf-var/log/
          compression-level: 9
          retention-days: 3

      - name: 📋 Build Summary
        shell: pwsh
        run: |
          @"
          ## 📊 Build Status Summary
          🎯 Target: ${{ inputs.target }}
          💻 OS: ${{ inputs.os }}
          🔧 Environment: ${{ inputs.environment }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          ⏰ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY