name: '📚 Quarto Build'

# This workflow builds a Quarto project and deploys it to either a development site or GitHub Pages
# It handles both Windows and Linux environments with extensive caching for better performance
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.6.42'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 🔍 Validate inputs
        shell: pwsh
        run: |
          Write-Output "🔄 Validating workflow inputs..."
          Write-Output "👉 Target: ${{ inputs.target }}"
          Write-Output "👉 OS: ${{ inputs.os }}"
          Write-Output "👉 Environment: ${{ inputs.environment }}"
          
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "❌ Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "✅ Input validation passed"

      - name: 🔍 Verify branch
        shell: pwsh
        run: |
          Write-Output "🔄 Verifying branch alignment..."
          Write-Output "👉 Current branch: ${{ github.ref }}"
          Write-Output "👉 Target branch: ${{ inputs.target }}"
          
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "❌ Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "❌ Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "✅ Branch verification passed"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      - name: 📦 Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}
        # Outputs quarto version information after installation
        id: quarto-setup

      - name: 📋 Quarto Setup Info
        shell: bash
        run: |
          echo "🔄 Checking Quarto installation..."
          quarto check
          echo "📊 Quarto version info:"
          quarto --version
          echo "📍 Quarto installation location:"
          which quarto || where.exe quarto

      - name: 📦 Install & Update TeX Live 
        uses: teatimeguest/setup-texlive-action@v3
        with:
          version: latest
          packages: |
            scheme-basic      
            collection-latex  
            collection-latexrecommended   
            collection-fontsrecommended   
            collection-latexextra
            collection-pictures   
            collection-luatex     
            koma-script       
            standalone       
            tikz-cd         
            marginfix      
            newpx          
            luatex85
            listings       
          update-all-packages: true
          cache: true
          
      - name: 📊 Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      - name: 📋 R Setup Info
        shell: Rscript {0}
        run: |
          cat("🔄 R Version Information:\n")
          cat(paste("R version:", R.version$version.string, "\n"))
          cat(paste("R home:", R.home(), "\n"))
          cat(paste("R library paths:", paste(.libPaths(), collapse=", "), "\n"))

      # Cache R packages using standard paths
      - name: 💾 Cache R packages
        uses: actions/cache@v4
        id: cache-r-packages
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-${{ hashFiles('**/install_packages.R') }}
          restore-keys: |
            r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-

      - name: 📦 Install R packages
        if: steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          # Set options for better package installation
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          
          cat("🔄 Installing R packages...\n")
          cat(paste("R library path:", Sys.getenv("R_LIBS_USER"), "\n"))
          
          # Create and set library path
          lib_path <- Sys.getenv("R_LIBS_USER")
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Install packages
          cat("📦 Installing remotes package...\n")
          install.packages("remotes")
          
          if (file.exists("install_packages.R")) {
            cat("📦 Installing packages from install_packages.R...\n")
            source("install_packages.R")
          } else {
            cat("⚠️ No install_packages.R found, installing common packages\n")
            pkgs <- c("rmarkdown", "knitr", "tidyverse", "ggplot2", "bookdown")
            cat(paste("📦 Installing packages:", paste(pkgs, collapse=", "), "\n"))
            install.packages(pkgs)
          }
          
          cat("✅ R package installation complete\n")
          cat("📊 Installed packages:\n")
          ip <- installed.packages()[, c("Package", "Version")]
          print(head(ip, 10))
          cat(paste("Total packages installed:", nrow(ip), "\n"))

      # Cache Linux system packages without hardcoded paths
      - name: 💾 Cache APT packages
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        id: cache-apt
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: 🛠️ Install Linux Dependencies
        if: runner.os == 'Linux' && steps.cache-apt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "🔄 Installing Linux dependencies..."
          echo "📦 Creating APT cache directory"
          mkdir -p ~/.apt-cache
          
          echo "📦 Updating package lists"
          sudo apt-get update
          
          echo "📦 Installing required system libraries"
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcairo2 \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "✅ Linux dependencies installed"
          echo "📊 Installed packages size:"

      - name: 🎨 Install Inkscape (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y inkscape

      - name: 🎨 Install Inkscape (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install inkscape -y
          echo "C:\Program Files\Inkscape\bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

      # Cache compilation artifacts with workspace paths
      - name: 💾 Cache compilation artifacts
        uses: actions/cache@v4
        id: cache-compilation
        with:
          path: |
            ${{ github.workspace }}/**/_cache
            ${{ github.workspace }}/**/.quarto
            ${{ github.workspace }}/**/.jupyter_cache
          key: compilation-${{ runner.os }}-${{ inputs.target }}-${{ github.sha }}
          restore-keys: |
            compilation-${{ runner.os }}-${{ inputs.target }}-
            compilation-${{ runner.os }}-

      - name: 🔨 Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        continue-on-error: false # Explicitly fail if rendering fails

      - name: 📋 Check Quarto Build Output
        shell: bash
        run: |
          echo "🔄 Checking Quarto build output..."
          
          if [ -d "_book" ]; then
            echo "✅ _book directory exists"
            echo "📊 Files in _book directory:"
            ls -la _book | head -n 20
            echo "📊 Total files in _book:"
            find _book -type f | wc -l
            
            if [ -f "_book/Machine-Learning-Systems.pdf" ]; then
              echo "✅ PDF file exists"
              echo "📊 PDF file size:"
              du -h "_book/Machine-Learning-Systems.pdf"
            else
              echo "⚠️ PDF file not found!"
            fi
          else
            echo "❌ _book directory not found!"
          fi

      - name: 📉 Compress PDF (Linux)
        if: runner.os == 'Linux'
        uses: jy95/ghostscript-action@v1
        with:
          file: './_book/Machine-Learning-Systems.pdf'
          output: './_book/ebook.pdf'
          arbitrary-parameters: '-dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook'

      - name: ✅ Replace original with compressed (Linux)
        if: runner.os == 'Linux'
        run: mv ./_book/ebook.pdf ./_book/Machine-Learning-Systems.pdf

      - name: 🧰 Install Ghostscript (Windows)
        if: runner.os == 'Windows'
        run: choco install ghostscript

      - name: ➕ Add Ghostscript to PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $gsPath = Get-ChildItem "C:\Program Files\gs" | Sort-Object Name -Descending | Select-Object -First 1
          $binPath = Join-Path $gsPath.FullName "bin"
          echo "Adding Ghostscript path: $binPath"
          $env:Path = "$binPath;$env:Path"

          # Confirm it works
          & gswin64c -version
          
      - name: 📉 Compress PDF (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $input = "./_book/Machine-Learning-Systems.pdf"
          $output = "./_book/ebook.pdf"

          if (!(Test-Path $input)) {
              Write-Error "❌ Input PDF not found!"
              exit 1
          }

          Write-Output "📉 Compressing PDF using Ghostscript..."

          # Debugging: Check the file paths
          Write-Output "Input file: $input"
          Write-Output "Output file: $output"

          $arguments = @(
              "-sDEVICE=pdfwrite",
              "-dCompatibilityLevel=1.5",
              "-dPDFSETTINGS=/ebook",
              "-dNOPAUSE",
              "-dQUIET",
              "-dBATCH",
              "-sOutputFile=$output",
              $input
          )

          & gswin64c @arguments

          if (Test-Path $output) {
              Write-Output "✅ Compression successful"
              Move-Item -Force $output $input
          } else {
              Write-Error "❌ Compression failed"
              exit 1
          }

      - name: 📤 Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Push to dev site
      - name: 🚀 Stage to Dev Site
        if: inputs.target == 'dev' && runner.os == 'Linux'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            📚 Push dev branch build

      - name: 📋 Dev Deployment Info
        if: inputs.target == 'dev' && runner.os == 'Linux'
        shell: bash
        run: |
          echo "🔄 Development deployment information:"
          echo "📊 Deployed to repository: harvard-edge/cs249r_book_dev"
          echo "📊 Target branch: main"
          echo "📊 Target directory: docs"
          echo "📊 Source directory: _book"
          echo "✅ Deployment should be complete"

      # Deploy to GitHub Pages
      - name: 🚀 Deploy to GitHub Pages
        if: inputs.target == 'main' && runner.os == 'Linux'
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          render: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 GitHub Pages Deployment Info
        if: inputs.target == 'main' && runner.os == 'Linux'
        shell: bash
        run: |
          echo "🔄 GitHub Pages deployment information:"
          echo "📊 Deployed to: gh-pages branch"
          echo "📊 Source directory: _book"
          echo "✅ Deployment should be complete"
          echo "🌐 Site should be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      # Add comprehensive debug artifacts
      - name: 📦 Collect Debug Artifacts
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ inputs.target }}-${{ inputs.os }}
          path: |
            ${{ github.workspace }}/_book/**
            ${{ github.workspace }}/.quarto/**
            ${{ github.workspace }}/**/_cache/**
            ${{ github.workspace }}/**/logs/**
            ${{ github.workspace }}/**/*.log
            ${{ github.workspace }}/**/.jupyter_cache/**
            ${{ github.workspace }}/.Rcheck/**
            ${{ github.workspace }}/**/*.Rout
            ${{ github.workspace }}/**/*.aux
            ${{ github.workspace }}/**/*.blg
            ${{ github.workspace }}/**/*.fls
            ${{ github.workspace }}/**/*.fdb_latexmk
          compression-level: 9  # Maximum compression
          retention-days: 5  # Keep for 5 days

      - name: 📋 Debug Artifact Info
        if: always()
        shell: bash
        run: |
          echo "🔄 Debug artifacts information:"
          echo "📊 Collected logs and build artifacts"
          echo "📊 Retention period: 5 days"
          echo "📊 Target artifact name: debug-${{ inputs.target }}-${{ inputs.os }}"
          echo "✅ Debug artifacts should be available in GitHub Actions"

      - name: 📋 Build Summary
        shell: pwsh
        run: |
          @"
          ## 📊 Build Status Summary
          🎯 Target: ${{ inputs.target }}
          💻 OS: ${{ inputs.os }}
          🔧 Environment: ${{ inputs.environment }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          🧩 Cache Status:
            - TeX Live: Installed via teatimeguest/setup-texlive-action@v3
            - R Packages: ${{ steps.cache-r-packages.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
            - Compilation: ${{ steps.cache-compilation.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
          ⏰ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY