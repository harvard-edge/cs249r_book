name: '📚 Quarto Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.4.549'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'

permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 🔍 Validate inputs
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "❌ Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "✅ Input validation passed"

      - name: 🔍 Verify branch
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "❌ Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "❌ Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "✅ Branch verification passed"

      - name: 📥 Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      - name: 📦 Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}

      - name: 📝 Install TinyTeX
        shell: pwsh
        run: |
          Write-Output "🔄 Installing TinyTeX..."
          quarto install tinytex
          if ("${{ runner.os }}" -eq "Windows") {
            Add-Content $env:GITHUB_PATH "$env:USERPROFILE\.TinyTeX\bin\windows"
          } else {
            Add-Content $env:GITHUB_PATH "$env:HOME/.TinyTeX/bin/x86_64-linux"
          }
          Write-Output "✅ TinyTeX installed"

      - name: 📊 Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      - name: 💾 Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ runner.os == 'Windows' && 'C:/Users/runneradmin/Documents/R/win-library' || '~/R/library' }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/install_packages.R') }}
          restore-keys: |
            ${{ runner.os }}-r-

      - name: 📦 Install R Dependencies
        shell: Rscript {0}
        run: |
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          install.packages(c("renv", "remotes"))
          renv::restore()

      - name: 🛠️ Install Linux Dependencies
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          echo "🔄 Installing Linux dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcogl-pango-dev \
            pango1.0-tools \
            libcairo2 \
            gdk-pixbuf2.0-bin \
            libgdk-pixbuf2.0-dev \
            librsvg2-bin \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "✅ Linux dependencies installed"

      - name: 🎨 Install Inkscape (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo add-apt-repository ppa:inkscape.dev/stable -y
          sudo apt-get update
          sudo apt-get install inkscape -y

      - name: 🎨 Install Inkscape (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          Write-Output "🔄 Installing Inkscape..."
          choco install inkscape -y
          Write-Output "✅ Inkscape installed"

      - name: 🔨 Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2

      - name: 📤 Upload artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Main-only steps (Linux only)
      - name: 🐍 Setup Python for PDF compression
        if: ${{ inputs.target == 'main' && runner.os == 'Linux' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 📦 Install Ghostscript
        if: ${{ inputs.target == 'main' && runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript

      - name: 📄 Check and Compress PDF
        if: ${{ inputs.target == 'main' && runner.os == 'Linux' }}
        shell: bash
        run: |
          set -e  # Exit on any error
          
          if [ ! -f "./_book/Machine-Learning-Systems.pdf" ]; then
            echo "❌ PDF file not found!"
            exit 1
          fi
          
          python3 ./scripts/quarto_publish/gs_compress_pdf.py \
            -i ./_book/Machine-Learning-Systems.pdf \
            -o ./_book/ebook.pdf \
            -s "/ebook"
          
          if [ ! -f "./_book/ebook.pdf" ]; then
            echo "❌ PDF compression failed!"
            exit 1
          fi
          
          mv ./_book/ebook.pdf ./_book/Machine-Learning-Systems.pdf

      - name: 🚀 Stage to Dev Site
        if: ${{ inputs.target == 'dev' && runner.os == 'Linux' }}
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            📚 Push dev branch build

      - name: 🚀 Deploy to GitHub Pages
        if: ${{ inputs.target == 'main' && runner.os == 'Linux' }}
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          render: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Build Summary
        shell: pwsh
        run: |
          @"
          ## 📊 Build Status Summary
          🎯 Target: ${{ inputs.target }}
          💻 OS: ${{ inputs.os }}
          🔧 Environment: ${{ inputs.environment }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          ⏰ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY