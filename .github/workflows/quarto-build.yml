name: 'üìö Quarto Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.13'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: üîç Validate inputs
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -ne "dev") -and ("${{ inputs.target }}" -ne "main")) {
            Write-Error "‚ùå Target must be either 'dev' or 'main'"
            exit 1
          }
          Write-Output "‚úÖ Input validation passed"

      - name: üîç Verify branch
        shell: pwsh
        run: |
          if (("${{ inputs.target }}" -eq "main") -and ("${{ github.ref }}" -ne "refs/heads/main")) {
            Write-Error "‚ùå Main build can only run on the main branch"
            exit 1
          }
          if (("${{ inputs.target }}" -eq "dev") -and ("${{ github.ref }}" -ne "refs/heads/dev")) {
            Write-Error "‚ùå Dev build can only run on the dev branch"
            exit 1
          }
          Write-Output "‚úÖ Branch verification passed"

      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      # Generate efficient cache keys
      - name: üîë Generate dependency hash
        id: dep-hash
        shell: bash
        run: |
          # Create a simpler dependency tracking system
          
          # Calculate hash for R dependencies
          echo "r_dep_hash=$(find . -name "install_packages.R" -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1 || echo 'default')" >> $GITHUB_OUTPUT
          
          # Calculate hash for Quarto configuration
          echo "tex_dep_hash=$(find . -name "_quarto.yml" -o -name "quarto.yml" -type f | sort | xargs sha256sum 2>/dev/null | sha256sum | cut -d' ' -f1 || echo 'default')" >> $GITHUB_OUTPUT
          
          # Calculate hash for content files (first 20 only for speed)
          echo "content_hash=$(find . -name "*.qmd" -o -name "*.Rmd" -o -name "*.tex" -type f | sort | head -n 20 | xargs sha256sum 2>/dev/null | sha256sum | cut -d' ' -f1 || echo 'default')" >> $GITHUB_OUTPUT

      # Combined Quarto + TeX setup with single cache
      - name: üíæ Cache Quarto and TeX
        uses: actions/cache@v3
        id: cache-quarto-tex
        with:
          path: |
            ~/.local/share/quarto
            ~/AppData/Local/quarto
            ~/.texlive
            ~/.TinyTeX
            ~/AppData/Roaming/TinyTeX
          key: quarto-tex-${{ runner.os }}-q${{ inputs.quarto-version }}-${{ steps.dep-hash.outputs.tex_dep_hash }}-v3
          restore-keys: |
            quarto-tex-${{ runner.os }}-q${{ inputs.quarto-version }}-
            quarto-tex-${{ runner.os }}-

      # Combined Quarto and TeX setup in one step
      - name: üì¶ Setup Quarto and TeX
        if: steps.cache-quarto-tex.outputs.cache-hit != 'true'
        run: |
          # Install Quarto
          echo "Setting up Quarto version ${{ inputs.quarto-version }}..."
          curl -L https://github.com/quarto-dev/quarto-cli/releases/download/v${{ inputs.quarto-version }}/quarto-${{ inputs.quarto-version }}-linux-amd64.deb -o quarto.deb
          sudo dpkg -i quarto.deb
          rm quarto.deb
          
          # Install TinyTeX
          echo "Installing TinyTeX..."
          quarto install tinytex --no-prompt
          
          # Add to PATH
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "$HOME/.TinyTeX/bin/x86_64-linux" >> $GITHUB_PATH
          fi
          
          # Install TeX packages directly with tlmgr (faster than using the action)
          echo "Installing TeX packages..."
          tlmgr install scheme-basic collection-basic collection-latex collection-latexrecommended \
            collection-latexextra collection-fontsrecommended collection-pictures collection-xetex \
            collection-luatex collection-bibtexextra collection-langenglish koma-script standalone \
            pgf tikz-cd pgfplots preview marginfix newpx luatex85
        shell: bash

      # Simplified R setup with unified cache
      - name: üíæ Cache R packages
        id: cache-r-packages
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.os == 'Linux' && '~/R/library' || 'C:/Users/runneradmin/Documents/R/win-library' }}
          key: r-unified-${{ runner.os }}-${{ inputs.r-version }}-${{ steps.dep-hash.outputs.r_dep_hash }}-v3
          restore-keys: |
            r-unified-${{ runner.os }}-${{ inputs.r-version }}-
      
      - name: üìä Setup R and packages
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      # Cache Linux system packages - these rarely change
      - name: üíæ Cache APT packages
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        id: cache-apt
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-v2
          restore-keys: |
            apt-${{ runner.os }}-

      - name: üì¶ Install R Dependencies
        if: steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          # Set library path based on OS
          lib_path <- if(Sys.info()["sysname"] == "Windows") {
            "C:/Users/runneradmin/Documents/R/win-library"
          } else {
            "~/R/library"
          }
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Install packages efficiently
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          
          # Core packages for Quarto
          core_pkgs <- c("knitr", "rmarkdown", "bookdown", "dplyr", "ggplot2", "plotly")
          install.packages(core_pkgs)
          
          # Project-specific packages
          if (file.exists("install_packages.R")) {
            source("install_packages.R")
          }

      - name: üõ†Ô∏è Install Linux Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "üîÑ Installing Linux dependencies..."
          sudo apt-get update
          mkdir -p ~/.apt-cache
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            libpangoft2-1.0-0 \
            fonts-dejavu \
            fonts-freefont-ttf \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libcogl-pango-dev \
            pango1.0-tools \
            libcairo2 \
            gdk-pixbuf2.0-bin \
            libgdk-pixbuf2.0-dev \
            librsvg2-bin \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev
          echo "‚úÖ Linux dependencies installed"

      # Cache Inkscape binary and configs separately
      - name: üíæ Cache Inkscape
        uses: actions/cache@v3
        id: cache-inkscape
        with:
          path: |
            ~/.config/inkscape
            ~/AppData/Roaming/inkscape
          key: inkscape-config-${{ runner.os }}-v2

      - name: üé® Install Inkscape
        shell: bash
        run: |
          echo "üîÑ Installing Inkscape if needed..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            if ! command -v inkscape &> /dev/null; then
              sudo add-apt-repository ppa:inkscape.dev/stable -y
              sudo apt-get update
              sudo apt-get install inkscape -y
            else
              echo "‚úÖ Inkscape is already installed"
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ ! -f "/c/Program Files/Inkscape/bin/inkscape.exe" ]; then
              echo "Installing Inkscape via Chocolatey"
              choco install inkscape -y
            else
              echo "‚úÖ Inkscape is already installed"
            fi
          fi

      # Split cache for compilation artifacts by branch
      - name: üíæ Cache compilation artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/_cache
            **/.quarto
            **/.jupyter_cache
          key: compilation-${{ runner.os }}-${{ inputs.target }}-${{ steps.dep-hash.outputs.content_hash }}-v2
          restore-keys: |
            compilation-${{ runner.os }}-${{ inputs.target }}-
            compilation-${{ runner.os }}-

      # Cache Quarto build outputs per branch
      - name: üíæ Cache Quarto build
        uses: actions/cache@v3
        with:
          path: _book
          key: quarto-book-${{ runner.os }}-${{ inputs.target }}-${{ steps.dep-hash.outputs.content_hash }}-v2
          restore-keys: |
            quarto-book-${{ runner.os }}-${{ inputs.target }}-
            quarto-book-${{ runner.os }}-

      # Cache verification step
      - name: üîç Verify caches
        shell: bash
        run: |
          echo "Cache verification:"
          echo "Quarto cache hit: ${{ steps.cache-quarto.outputs.cache-hit }}"
          echo "TeX Live core cache hit: ${{ steps.cache-texlive-core.outputs.cache-hit }}"
          echo "TeX Live packages cache hit: ${{ steps.cache-texlive-packages.outputs.cache-hit }}"
          echo "R core cache hit: ${{ steps.cache-r-core.outputs.cache-hit }}"
          echo "R project cache hit: ${{ steps.cache-r-project.outputs.cache-hit }}"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "APT cache hit: ${{ steps.cache-apt.outputs.cache-hit }}"
          fi
          echo "Inkscape cache hit: ${{ steps.cache-inkscape.outputs.cache-hit }}"
          
          # Check key paths
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Checking TeX Live installation:"
            if [[ -d "$HOME/.TinyTeX" ]]; then
              echo "‚úÖ TinyTeX directory exists"
              ls -la "$HOME/.TinyTeX/bin" || echo "‚ö†Ô∏è No bin directory found"
            else
              echo "‚ùå TinyTeX directory missing"
            fi
          fi
          
          echo "Checking R library:"
          ls -la "$R_LIBS_USER" || echo "‚ùå R library directory not found"

      - name: üî® Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        continue-on-error: false # Explicitly fail if rendering fails

      - name: üì§ Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: _book-${{ inputs.os }}
          path: _book

      # Setup Python with proper cache
      - name: üíæ Cache Python packages
        uses: actions/cache@v3
        id: cache-pip
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-v2

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: |
            .github/scripts/quarto_publish/requirements.txt
            .github/scripts/*/requirements.txt

      - name: üì¶ Install Python PDF tools
        shell: bash
        run: |
          if [ -f "./.github/scripts/quarto_publish/requirements.txt" ]; then
            pip install -r ./.github/scripts/quarto_publish/requirements.txt
          else
            echo "Installing default PDF tools"
            pip install pikepdf ghostscript PyPDF2
          fi

      - name: üì¶ Install Ghostscript
        shell: bash
        run: |
          echo "üîÑ Installing Ghostscript if needed..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            if ! command -v gs &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ghostscript
            else
              echo "‚úÖ Ghostscript is already installed"
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ ! -d "/c/Program Files/gs" ]; then
              echo "Installing Ghostscript via Chocolatey"
              choco install ghostscript -y
            else
              echo "‚úÖ Ghostscript is already installed"
            fi
            
            # Add Ghostscript to PATH on Windows
            GS_DIR=$(ls -d "/c/Program Files/gs/gs"* | sort -r | head -n 1)
            if [ -n "$GS_DIR" ]; then
              echo "$GS_DIR/bin" >> $GITHUB_PATH
            fi
          fi

      - name: üìÑ Check and Compress PDF
        shell: bash
        run: |
          set -e  # Exit on any error
          
          # Define platform-specific file paths
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PDF_INPUT="./_book/Machine-Learning-Systems.pdf"
            PDF_OUTPUT="./_book/ebook.pdf"
          else
            PDF_INPUT="./_book/Machine-Learning-Systems.pdf" 
            PDF_OUTPUT="./_book/ebook.pdf"
          fi
          
          if [[ ! -f "$PDF_INPUT" ]]; then
            echo "‚ùå PDF file not found at $PDF_INPUT!"
            exit 1
          fi
          
          python ./.github/scripts/gs_compress_pdf.py -i "$PDF_INPUT" -o "$PDF_OUTPUT" -s "/ebook"
          
          if [[ -f "$PDF_OUTPUT" ]]; then
            mv "$PDF_OUTPUT" "$PDF_INPUT"
            echo "‚úÖ PDF successfully compressed"
          else
            echo "‚ö†Ô∏è PDF compression failed, keeping original file"
          fi

      - name: üöÄ Stage to Dev Site
        if: inputs.target == 'dev' && runner.os == 'Linux'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            üìö Push dev branch build

      - name: üöÄ Deploy to GitHub Pages
        if: inputs.target == 'main' && runner.os == 'Linux'
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          render: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Simplified debug artifacts with smarter filtering
      - name: üì¶ Collect Debug Artifacts
        if: failure()  # Only collect on failure to save storage
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ inputs.target }}-${{ inputs.os }}
          path: |
            _book/**/*.pdf
            _book/**/*.html
            .quarto/
            **/logs/
            **/*.log
            **/.TinyTeX/texmf-var/log/
          compression-level: 9
          retention-days: 3

      - name: üìã Build Summary
        shell: pwsh
        run: |
          @"
          ## üìä Build Status Summary
          üéØ Target: ${{ inputs.target }}
          üíª OS: ${{ inputs.os }}
          üîß Environment: ${{ inputs.environment }}
          üìö Quarto Version: ${{ inputs.quarto-version }}
          üî¨ R Version: ${{ inputs.r-version }}
          ‚è∞ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY