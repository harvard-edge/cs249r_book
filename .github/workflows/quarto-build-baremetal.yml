name: '📚 Quarto Build (Baremetal)'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds for same target+ref combination
concurrency:
  group: quarto-build-baremetal-${{ inputs.target }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

# This workflow builds a Quarto project and uploads artifacts
# It handles both Windows and Linux environments with extensive caching for better performance
# Note: This workflow does NOT deploy - all deployment is handled by publish-live workflow
on:
  workflow_dispatch:
    inputs:
      # Platform selection checkboxes
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      # Format selection checkboxes
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      # Build configuration
      target:
        description: 'Target branch (dev/main)'
        required: false
        type: choice
        default: 'dev'
        options:
          - dev
          - main
      # Advanced options
      quarto-version:
        description: 'Version of Quarto to use'
        required: false
        type: string
        default: '1.7.31'
      r-version:
        description: 'Version of R to use'
        required: false
        type: string
        default: '4.3.2'
      quarto-log-level:
        description: 'Quarto log level'
        required: false
        type: choice
        default: 'INFO'
        options:
          - INFO
          - DEBUG
      artifact_name:
        description: 'Custom artifact name (optional)'
        required: false
        type: string
        default: ''
  workflow_call:
    inputs:
      # Platform selection
      build_linux:
        required: false
        type: boolean
        default: false
        description: 'Build on Linux'
      build_windows:
        required: false
        type: boolean
        default: false
        description: 'Build on Windows'
      # Format selection
      build_html:
        required: false
        type: boolean
        default: false
        description: 'Build HTML format'
      build_pdf:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format'
      # Build configuration
      target:
        required: false
        type: string
        default: 'dev'
        description: 'Target branch (dev/main)'
      # Configuration options
      quarto-version:
        required: false
        type: string
        default: '1.7.31'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      artifact_name:
        required: false
        type: string
        default: ''
        description: 'Custom artifact name (optional)'

    outputs:
      build_success:
        description: "Whether all builds completed successfully"
        value: ${{ jobs.collect-outputs.outputs.build_success }}
      linux_html_artifact:
        description: "Linux HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_html_artifact }}
      linux_pdf_artifact:
        description: "Linux PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.linux_pdf_artifact }}
      windows_html_artifact:
        description: "Windows HTML artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_html_artifact }}
      windows_pdf_artifact:
        description: "Windows PDF artifact name"
        value: ${{ jobs.collect-outputs.outputs.windows_pdf_artifact }}

permissions:
  contents: write
  pages: write

jobs:
  build:
    name: '${{ matrix.os_emoji }} Build ${{ matrix.os_name }} (${{ matrix.format_emoji }} ${{ matrix.format }})'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            os_name: Linux
            os_emoji: '🐧'
            format: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_linux && inputs.build_html }}
          - os: ubuntu-latest
            os_name: Linux
            os_emoji: '🐧'
            format: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_linux && inputs.build_pdf }}
          # Windows builds
          - os: windows-latest
            os_name: Windows
            os_emoji: '🪟'
            format: HTML
            format_emoji: '📄'
            config: _quarto-html.yml
            render_target: html
            enabled: ${{ inputs.build_windows && inputs.build_html }}
          - os: windows-latest
            os_name: Windows
            os_emoji: '🪟'
            format: PDF
            format_emoji: '📑'
            config: _quarto-pdf.yml
            render_target: titlepage-pdf
            enabled: ${{ inputs.build_windows && inputs.build_pdf }}
            
    timeout-minutes: 120   # ⏰ Set job timeout to 2 hours (7200 seconds)
    
    outputs:
      os_name: ${{ matrix.os_name }}
      format: ${{ matrix.format }}
      artifact_name: ${{ steps.build-declaration.outputs.artifact_name }}
      status: ${{ job.status }}
      output_dir: ${{ steps.get_output_dir.outputs.dir }}

    env:
      R_LIBS_USER: ${{ github.workspace }}/.r-lib
      QUARTO_LOG_LEVEL: ${{ inputs.quarto-log-level || 'INFO' }}
      # UTF-8 encoding for proper emoji display
      PYTHONIOENCODING: utf-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
      - name: 🛑 Skip build
        if: "!matrix.enabled"
        run: echo "Build skipped because matrix.enabled is false"

      - name: 📥 Checkout repository
        if: matrix.enabled
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Get Quarto output directory
        id: get_output_dir
        if: matrix.enabled
        working-directory: quarto
        run: |
          CONFIG_FILE="config/${{ matrix.config }}"
          echo "📝 Reading output directory from: $CONFIG_FILE"
          OUTPUT_DIR=$(grep -oP 'output-dir: \K.*' "$CONFIG_FILE" || echo "")
          
          # Fallback logic if output-dir is not found
          if [ -z "$OUTPUT_DIR" ]; then
            echo "⚠️ 'output-dir' not found in $CONFIG_FILE. Defaulting based on format."
            if [ "${{ matrix.format }}" = "HTML" ]; then
              OUTPUT_DIR="_build/html"
            elif [ "${{ matrix.format }}" = "PDF" ]; then
              OUTPUT_DIR="_build/pdf"
            else
              echo "❌ Unknown format. Cannot determine default output directory."
              exit 1
            fi
          fi
          
          echo "✅ Output directory: $OUTPUT_DIR"
          echo "dir=$OUTPUT_DIR" >> "$GITHUB_OUTPUT"

      - name: 📦 Setup Quarto
        if: matrix.enabled
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}
        # Outputs quarto version information after installation
        id: quarto-setup

      - name: 📋 Quarto Setup Info
        if: matrix.enabled
        shell: bash
        run: |
          echo "🔄 Checking Quarto installation..."
          quarto check
          echo "📊 Quarto version info:"
          quarto --version
          echo "📍 Quarto installation location:"
          which quarto || where.exe quarto

      - name: 🐍 Set up Python
        if: matrix.enabled
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 💾 Cache Python packages
        if: matrix.enabled
        uses: actions/cache@v4
        id: cache-python-packages
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: python-pkgs-${{ runner.os }}-${{ hashFiles('tools/dependencies/requirements.txt') }}
          restore-keys: |
            python-pkgs-${{ runner.os }}-

      # Install Ghostscript before Python package verification
      - name: 📦 Install Ghostscript (Linux)
        if: matrix.enabled && runner.os == 'Linux'
        run: sudo apt-get install -y ghostscript

      - name: 📦 Install Ghostscript (Windows)
        if: matrix.enabled && runner.os == 'Windows'
        shell: pwsh
        run: |
          # Use winget if available, otherwise fallback to chocolatey
          try {
            winget install ArtifexSoftware.GhostScript --accept-source-agreements --accept-package-agreements
            Write-Output "✅ Ghostscript installed via winget"
          } catch {
            Write-Output "🔄 winget not available, using chocolatey..."
            choco install ghostscript -y
          }
          
          # Add Ghostscript to PATH (both installation methods use the same path)
          $gsPath = Get-ChildItem "C:\Program Files\gs" | Sort-Object Name -Descending | Select-Object -First 1
          $binPath = Join-Path $gsPath.FullName "bin"
          echo "Adding Ghostscript path: $binPath"
          echo "$binPath" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding UTF8

      - name: 📦 Install Python dependencies
        if: matrix.enabled
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      # Cache Linux system packages without hardcoded paths
      - name: 💾 Cache APT packages
        if: matrix.enabled && runner.os == 'Linux'
        uses: actions/cache@v4
        id: cache-apt
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: 🛠️ Install Linux Dependencies
        if: matrix.enabled && runner.os == 'Linux' && steps.cache-apt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "🔄 Installing Linux dependencies..."
          echo "📦 Creating APT cache directory"
          mkdir -p ~/.apt-cache

          echo "📦 Updating package lists"
          sudo apt-get update

          echo "📦 Installing required system libraries"
          sudo apt-get -o dir::cache::archives="$HOME/.apt-cache" install -y \
            fonts-dejavu \
            fonts-freefont-ttf \
            gdk-pixbuf2.0-bin \
            libcairo2 \
            libfontconfig1 \
            libfontconfig1-dev \
            libfreetype6 \
            libfreetype6-dev \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libpangoft2-1.0-0 \
            libxml2-dev \
            libcurl4-openssl-dev \
            libjpeg-dev \
            libtiff5-dev \
            libpng-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            librsvg2-dev \
            libgdal-dev \
            libudunits2-dev

          echo "✅ Linux dependencies installed"
                
      - name: 🎨 Install Inkscape and font dependencies (Linux)
        if: matrix.enabled && runner.os == 'Linux'
        run: |
          # First remove any existing Inkscape
          sudo apt-get remove -y inkscape || true
          # Install Inkscape from PPA for more reliable version
          echo "📦 Installing Inkscape from PPA..."
          sudo add-apt-repository ppa:inkscape.dev/stable -y
          sudo apt-get update
          sudo apt-get install -y inkscape
          
          # Install font dependencies
          echo "📦 Installing font dependencies..."
          sudo apt-get install -y \
            fonts-freefont-ttf \
            fonts-liberation \
            fontconfig
          
          # Update font cache after installing Inkscape and fonts
          echo "🧹 Updating font cache..."
          sudo fc-cache -fv
          
          # Verify Inkscape installation
          echo "📊 Inkscape version:"
          inkscape --version
          
          # Test SVG to PDF conversion with the new Inkscape
          echo "🧪 Testing Inkscape SVG to PDF conversion..."
          echo '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><circle cx="50" cy="50" r="40" fill="red"/></svg>' > test.svg
          inkscape --export-type=pdf --export-filename=test.pdf test.svg
          
          # Verify if the PDF was created
          if [ -f test.pdf ]; then
            echo "✅ Inkscape SVG to PDF conversion successful!"
            ls -lh test.pdf
          else
            echo "❌ Inkscape SVG to PDF conversion failed."
            echo "🔍 Checking Inkscape installation..."
            dpkg -l | grep inkscape
            which inkscape
            ldd $(which inkscape) | grep "not found" || echo "All dependencies resolved"
          fi
          
      - name: 🎨 Install Inkscape (Windows)
        if: matrix.enabled && runner.os == 'Windows'
        shell: pwsh
        run: |
          # Set UTF-8 encoding for proper emoji display
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          
          # Use winget (Windows default package manager) if available, otherwise fallback to chocolatey
          try {
            winget install Inkscape.Inkscape --accept-source-agreements --accept-package-agreements
            Write-Output "✅ Inkscape installed via winget"
          } catch {
            Write-Output "🔄 winget not available, using chocolatey..."
            choco install inkscape -y
          }
          
          # Add Inkscape to PATH (both installation methods use the same path)
          echo "C:\Program Files\Inkscape\bin" | Out-File -Append -Encoding UTF8 $env:GITHUB_PATH
          
          # Verify Inkscape installation
          inkscape --version

      # Install TeX Live packages (Cross-platform) - ALWAYS install for consistency
      # Required for TikZ diagrams in HTML (PDF->SVG), PDF output, and potential future needs
      - name: 📦 Install TeX Live packages
        if: matrix.enabled
        uses: zauguin/install-texlive@v4
        with:
          package_file: tools/dependencies/tl_packages
          texlive_version: 2025
          cache_version: 1
          
      - name: 🔍 Verify TeX Live Installation
        if: matrix.enabled
        shell: bash
        run: |
          echo "🔄 Verifying TeX Live installation (installed for all builds)..."
          echo "📊 Current format: ${{ matrix.format }}"
          echo "📊 Philosophy: All builds get same environment, only build targets differ"
          
          # Check LaTeX engines
          echo "📊 Checking LaTeX engines:"
          which lualatex || echo "❌ lualatex not found"
          which pdflatex || echo "❌ pdflatex not found"
          lualatex --version | head -2 || echo "❌ lualatex version failed"
          
          # Check if required packages are available
          echo "📊 Checking core LaTeX and TikZ packages:"
          kpsewhich pgf.sty && echo "✅ PGF package found" || echo "❌ PGF package missing"
          kpsewhich pgfplots.sty && echo "✅ PGFPlots package found" || echo "❌ PGFPlots package missing"
          kpsewhich xcolor.sty && echo "✅ XColor package found" || echo "❌ XColor package missing"
          kpsewhich amsmath.sty && echo "✅ AMSMath package found" || echo "❌ AMSMath package missing"
          kpsewhich standalone.cls && echo "✅ Standalone class found" || echo "❌ Standalone class missing"
          
          echo "📊 Checking font packages:"
          kpsewhich phvr7t.tfm && echo "✅ Helvetica font found" || echo "❌ Helvetica font missing"
          kpsewhich t1phv.fd && echo "✅ Helvetica font descriptor found" || echo "❌ Helvetica font descriptor missing"
          
          # Test TikZ compilation
          echo "🧪 Testing TikZ compilation..."
          cat > test_tikz.tex << 'EOF'
          \documentclass{standalone}
          \usepackage{tikz}
          \usepackage{pgfplots}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{xcolor}
          \usepackage[T1]{fontenc}
          \usetikzlibrary{positioning}
          \usetikzlibrary{calc}
          \begin{document}
          \begin{tikzpicture}[font=\small\usefont{T1}{phv}{m}{n}]
          \node[draw, fill=blue!20] at (0,0) {TikZ Test};
          \node[draw, fill=red!20] at (2,0) {Success};
          \draw[->] (0.8,0) -- (1.2,0);
          \end{tikzpicture}
          \end{document}
          EOF
          
          if lualatex -interaction=nonstopmode test_tikz.tex; then
            echo "✅ TikZ compilation successful"
            ls -la test_tikz.pdf
          else
            echo "❌ TikZ compilation failed"
            cat test_tikz.log | tail -20 || echo "No log file found"
          fi
          
          rm -f test_tikz.*
         
      - name: 📊 Setup R
        if: matrix.enabled
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      - name: 📋 R Setup Info
        if: matrix.enabled
        shell: Rscript {0}
        run: |
          cat("🔄 R Version Information:\n")
          cat(paste("R version:", R.version$version.string, "\n"))
          cat(paste("R home:", R.home(), "\n"))
          cat(paste("R library paths:", paste(.libPaths(), collapse=", "), "\n"))

      # Cache R packages using standard paths
      - name: 💾 Cache R packages
        if: matrix.enabled
        uses: actions/cache@v4
        id: cache-r-packages
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-${{ hashFiles('tools/dependencies/install_packages.R', '**/*.qmd') }}
          restore-keys: |
            r-pkgs-${{ runner.os }}-${{ inputs.r-version }}-

      - name: 📦 Install R packages
        if: matrix.enabled && steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          # Set options for better package installation
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          
          cat("🔄 Installing R packages...\n")
          cat(paste("R library path:", Sys.getenv("R_LIBS_USER"), "\n"))
          
          # Create and set library path
          lib_path <- Sys.getenv("R_LIBS_USER")
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Install packages
          cat("📦 Installing remotes package...\n")
          install.packages("remotes")
          
          if (file.exists("tools/dependencies/install_packages.R")) {
            cat("📦 Installing packages from tools/dependencies/install_packages.R...\n")
            source("tools/dependencies/install_packages.R")
          } else {
            cat("⚠️ No tools/dependencies/install_packages.R found, installing common packages\n")
            pkgs <- c("rmarkdown", "knitr", "tidyverse", "ggplot2", "bookdown")
            cat(paste("📦 Installing packages:", paste(pkgs, collapse=", "), "\n"))
            install.packages(pkgs)
          }
          
          cat("✅ R package installation complete\n")
          cat("📊 Installed packages:\n")
          ip <- installed.packages()[, "Package"]
          print(head(ip, 10))
          cat(paste("Total packages installed:", nrow(ip), "\n"))
          
          # Verify critical R packages are installed
          cat("🔍 Verifying R package installation...\n")
          required_r_packages <- c("ggplot2", "ggrepel", "knitr", "rmarkdown", "tidyverse", 
                                 "reshape2", "reticulate", "rsvg", "viridis", "xml2", "dplyr", "grid")
          missing_r_packages <- c()
          for (pkg in required_r_packages) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              missing_r_packages <- c(missing_r_packages, pkg)
            }
          }
          
          if (length(missing_r_packages) > 0) {
            cat(paste("❌ Missing R packages:", paste(missing_r_packages, collapse = ", "), "\n"))
            quit(status = 1)
          } else {
            cat("✅ All required R packages installed successfully\n")
          }

      - name: 🔨 Build ${{ matrix.format }}
        if: matrix.enabled
        id: build
        shell: bash
        run: |
          echo "🚀 Setting up ${{ matrix.format }} configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/${{ matrix.config }} _quarto.yml
          echo "✅ Configuration set to ${{ matrix.format }}"
          
          echo "🔨 Building ${{ matrix.format }}..."
          # Update status to building
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building ${{ matrix.format }} content (${{ matrix.os_name }})\",
              \"context\": \"ci/quarto-build-${{ matrix.os_name }}-${{ matrix.format }}\"
            }"
          
          quarto render --to ${{ matrix.render_target }}
          echo "✅ ${{ matrix.format }} build completed"
      
      - name: 📋 Check Quarto Build Output
        if: matrix.enabled
        shell: bash
        run: |
          echo "🔄 Checking Quarto build output for ${{ matrix.format }}..."
          if [ -d "quarto/${{ steps.get_output_dir.outputs.dir }}" ]; then
            echo "✅ quarto/${{ steps.get_output_dir.outputs.dir }} directory exists"
            echo "📊 Files in quarto/${{ steps.get_output_dir.outputs.dir }} directory:"
            ls -la quarto/${{ steps.get_output_dir.outputs.dir }} | head -n 20
            echo "📊 Total files in quarto/${{ steps.get_output_dir.outputs.dir }}:"
            find quarto/${{ steps.get_output_dir.outputs.dir }} -type f | wc -l
          else
            echo "❌ quarto/${{ steps.get_output_dir.outputs.dir }} directory not found!"
            exit 1
          fi

      - name: 📉 Compress PDF with Ghostscript (Linux)
        if: matrix.enabled && matrix.format == 'PDF' && runner.os == 'Linux'
        working-directory: quarto/${{ steps.get_output_dir.outputs.dir }}
        run: |
          if [ -f "Machine-Learning-Systems.pdf" ]; then
            gs \
              -sDEVICE=pdfwrite \
              -dCompatibilityLevel=1.4 \
              -dPDFSETTINGS=/ebook \
              -dNOPAUSE \
              -dQUIET \
              -dBATCH \
              -sOutputFile="ebook.pdf" \
              "Machine-Learning-Systems.pdf"

            # Replace original with compressed
            mv ebook.pdf Machine-Learning-Systems.pdf
          else
            echo "⚠️ PDF file not found for compression"
          fi

      - name: 📉 Compress PDF with Ghostscript (Windows)
        if: matrix.enabled && matrix.format == 'PDF' && runner.os == 'Windows'
        shell: pwsh
        working-directory: quarto/${{ steps.get_output_dir.outputs.dir }}
        run: |
          # Set UTF-8 encoding for proper emoji display
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          
          $input = "Machine-Learning-Systems.pdf"
          $output = "ebook.pdf"

          if (!(Test-Path $input)) {
            Write-Warning "⚠️ Input PDF not found! Skipping compression..."
            exit 0  # Non-zero exit would fail the workflow
          }

          Write-Output "📉 Compressing PDF using Ghostscript..."

          & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel:1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile="$output" "$input"

          if (Test-Path $output) {
            $afterSize = (Get-Item $output).Length / 1MB
            Write-Output ("📏 Compressed PDF size: {0:N2} MB" -f $afterSize)
            Write-Output "✅ Compression successful"
            Move-Item -Force $output $input
          } else {
            Write-Warning "⚠️ Compression failed but continuing"
          }
          
      - name: 📋 Build Declaration
        if: matrix.enabled
        id: build-declaration
        shell: bash
        run: |
          ARTIFACT_NAME="${{ inputs.artifact_name != '' && format('{0}-{1}-{2}', inputs.artifact_name, matrix.os_name, matrix.format) || format('build-{0}-{1}-{2}', inputs.target, matrix.os_name, matrix.format) }}"
          echo "📦 Build Declaration: Successfully created artifact '$ARTIFACT_NAME'"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: 📤 Upload build artifacts
        if: matrix.enabled
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-declaration.outputs.artifact_name }}
          path: quarto/${{ steps.get_output_dir.outputs.dir }}

      - name: 📝 Collect Build Logs and System Info (Universal)
        if: matrix.enabled && always()  # Always run, even if previous steps failed
        shell: pwsh
        run: |
          # Set UTF-8 encoding for proper emoji display
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          
          Write-Output "🔄 Collecting comprehensive build logs and system information..."
          
          # Create logs directory structure
          New-Item -Type Directory -Path "logs", "logs/system-info", "logs/build-output" -Force | Out-Null
          
          # === COLLECT ALL BUILD LOGS ===
          Write-Output "📄 Searching for build logs in all directories..."
          
          # Find and copy all .log files from common locations
          $logPaths = @("quarto", "build", "_book", ".", "_site")
          foreach ($path in $logPaths) {
            if (Test-Path $path) {
              Write-Output "🔍 Searching in: $path"
              Get-ChildItem -Path $path -Recurse -Include "*.log" -ErrorAction SilentlyContinue | ForEach-Object {
                $relativePath = $_.FullName.Replace($PWD.Path, "").TrimStart("/\")
                $sanitizedName = $relativePath -replace "[/\\:]", "_"
                Write-Output "📄 Found log: $relativePath → logs/$sanitizedName"
                Copy-Item $_.FullName "logs/$sanitizedName" -ErrorAction SilentlyContinue
              }
            }
          }
          
          # Look for any output files that might contain build info
          Get-ChildItem -Recurse -Include "*.out", "*.aux", "*.fls", "*.fdb_latexmk" -ErrorAction SilentlyContinue | ForEach-Object {
            $relativePath = $_.FullName.Replace($PWD.Path, "").TrimStart("/\")
            $sanitizedName = $relativePath -replace "[/\\:]", "_"
            Copy-Item $_.FullName "logs/build-output/$sanitizedName" -ErrorAction SilentlyContinue
          }
          
          # === SYSTEM ENVIRONMENT ===
          Write-Output "🖥️ Collecting system environment..."
          @"
          === Build Environment Information ===
          Date: $(Get-Date)
          GitHub Workflow: ${{ github.workflow }}
          GitHub Run ID: ${{ github.run_id }}
          Runner OS: ${{ runner.os }}
          Build Format: ${{ matrix.format }}
          PowerShell Version: $($PSVersionTable.PSVersion)
          Working Directory: $PWD
          
          "@ | Out-File "logs/system-info/environment.log" -Encoding UTF8
          
          # === QUARTO INFORMATION ===
          Write-Output "📚 Collecting Quarto information..."
          @"
          === Quarto Information ===
          "@ | Out-File "logs/system-info/quarto-info.log" -Encoding UTF8
          
          if (Get-Command quarto -ErrorAction SilentlyContinue) {
            & quarto --version 2>&1 | Out-File "logs/system-info/quarto-info.log" -Append -Encoding UTF8
            "--- Quarto Check ---" | Out-File "logs/system-info/quarto-info.log" -Append -Encoding UTF8
            & quarto check 2>&1 | Out-File "logs/system-info/quarto-info.log" -Append -Encoding UTF8
          } else {
            "Quarto not found" | Out-File "logs/system-info/quarto-info.log" -Append -Encoding UTF8
          }
          
          # === SUMMARY ===
          Write-Output "📊 Build log collection summary:"
          Write-Output "📁 Log files collected:"
          Get-ChildItem -Path "logs" -Recurse -File | ForEach-Object {
            $size = if ($_.Length -gt 1MB) { "{0:N2} MB" -f ($_.Length / 1MB) } 
                    elseif ($_.Length -gt 1KB) { "{0:N2} KB" -f ($_.Length / 1KB) } 
                    else { "$($_.Length) bytes" }
            Write-Output "  📄 $($_.FullName.Replace($PWD.Path, '.')) ($size)"
          }

      - name: 📤 Upload Build Logs (Always)
        if: matrix.enabled && always()  # Upload logs even if build fails
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os_name }}-${{ matrix.format }}-${{ github.run_id }}
          path: logs/
          retention-days: 30  # Keep logs for 30 days for debugging
          if-no-files-found: warn

      - name: 📋 Build Summary
        if: matrix.enabled && always()
        shell: pwsh
        run: |
          # Set UTF-8 encoding for proper emoji display
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          
          # TeX Live is now always installed for consistent environment across all builds
          $texLiveStatus = "✅ Always installed (zauguin/install-texlive@v4)"
          
          @"
          ## 📊 Build Status Summary for ${{ matrix.os_name }} ${{ matrix.format }}
          **Status: ${{ job.status }}**
          🎯 Target: ${{ inputs.target }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          🧩 Cache Status:
            - TeX Live: $texLiveStatus
            - R Packages: ${{ steps.cache-r-packages.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
            - Python Packages: ${{ steps.cache-python-packages.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}
          📝 Debug Artifacts:
            - Build logs available as artifact: build-logs-${{ matrix.os_name }}-${{ matrix.format }}-${{ github.run_id }}
            - Retention: 30 days for debugging
          ⏰ Completed at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
          "@ | Add-Content $env:GITHUB_STEP_SUMMARY

      - name: 🎯 Set Final Build Status
        if: matrix.enabled && always()
        shell: bash
        run: |
          echo "🎯 Setting final build status..."
          
          # Determine the final status based on job status
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="Build completed successfully (${{ matrix.os_name }}, ${{ matrix.format }})"
          else
            STATE="failure"
            DESCRIPTION="Build failed (${{ matrix.os_name }}, ${{ matrix.format }})"
          fi
          
          echo "📊 Final status: $STATE"
          echo "📝 Description: $DESCRIPTION"
          
          # Set the final commit status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"ci/quarto-build-${{ matrix.os_name }}-${{ matrix.format }}\"
            }"
          
          echo "✅ Commit status updated successfully"

  collect-outputs:
    name: '📊 Collect Outputs'
    needs: build
    runs-on: ubuntu-latest
    if: always()
    outputs:
      build_success: ${{ steps.collect.outputs.build_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
    
    steps:
      - name: 📊 Collect results
        id: collect
        run: |
          # Determine overall build success
          if [[ "${{ needs.build.result }}" == "success" || "${{ needs.build.result }}" == "skipped" ]]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="✅ Success"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            BUILD_SUCCESS_MSG="❌ Failure"
          fi

          # Extract artifact names from build job outputs using jq
          outputs_json='${{ toJSON(needs.build.outputs) }}'
          
          # Helper function to extract artifact name
          extract_artifact() {
            local os_name=$1
            local format=$2
            # Robustly handle either a single output object or an object of output objects.
            # Also, convert matrix os_name and format to lowercase for case-insensitive matching.
            echo "$outputs_json" | jq -r --arg o "$os_name" --arg f "$format" \
              '(if .os_name then . else .[] end) | select((.os_name | ascii_downcase) == $o and (.format | ascii_downcase) == $f and .status=="success") | .artifact_name'
          }

          # Set artifact names for requested builds if they were generated
          if [[ "${{ inputs.build_linux && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "html")
            echo "linux_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_linux && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "linux" "pdf")
            echo "linux_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_html }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "html")
            echo "windows_html_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.build_windows && inputs.build_pdf }}" == "true" ]]; then
            artifact_name=$(extract_artifact "windows" "pdf")
            echo "windows_pdf_artifact=$artifact_name" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Results collected - Status: $BUILD_SUCCESS_MSG" 