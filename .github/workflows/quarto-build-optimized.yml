name: '🏗️ Quarto Build (Optimized)'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds for same target+os+format combination
concurrency:
  group: quarto-build-${{ inputs.target }}-${{ inputs.os }}-${{ inputs.format }}-${{ github.sha }}
  cancel-in-progress: true

# This workflow uses containers for Linux (fast) and optimized traditional approach for Windows
on:
  workflow_dispatch:
    inputs:
      environment:
        required: false
        type: string
        default: 'development'
        description: 'Build environment'
      os:
        required: false
        type: choice
        default: 'ubuntu-latest'
        description: 'Operating system to run on'
      quarto-version:
        required: false
        type: string
        default: '1.7.31'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: false
        type: choice
        default: 'dev'
        description: 'Target branch (dev/main) - determines build behavior'
        options:
          - dev
          - main
      format:
        required: false
        type: choice
        default: 'html'
        description: 'Format to build'
        options:
          - html
          - pdf
          - epub
          - all
      quarto-log-level:
        required: false
        type: choice
        default: 'INFO'
        description: 'Quarto log level'
        options:
          - INFO
          - DEBUG
      artifact_name:
        required: false
        type: string
        default: ''
        description: 'Explicit artifact name (if empty, uses build-{os}-{format} pattern)'
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: 'development'
        description: 'Build environment'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest/windows-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.31'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: false
        type: string
        default: ''
        description: 'Target branch (dev/main) - determines build behavior'
      format:
        required: false
        type: string
        default: 'all'
        description: 'Format to build (html/pdf/epub/all)'
      quarto-log-level:
        required: false
        type: string
        default: 'INFO'
        description: 'Quarto log level (INFO/DEBUG)'
      artifact_name:
        required: false
        type: string
        default: ''
        description: 'Explicit artifact name (if empty, uses build-{os}-{format} pattern)'

permissions:
  contents: write
  pages: write

jobs:
  # Linux builds using container (fast path)
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/quarto-build-linux:latest
      options: --user root
    timeout-minutes: 60
    environment:
      name: ${{ inputs.environment }}
    if: inputs.os == 'ubuntu-latest'
    env:
      QUARTO_LOG_LEVEL: ${{ inputs.quarto-log-level }}
      PYTHONIOENCODING: utf-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
      - name: 🚦 Set Initial Build Status
        shell: bash
        run: |
          echo "🚦 Setting initial build status to pending..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Quarto build started (Linux container, ${{ inputs.format }})\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Container Environment Info
        shell: bash
        run: |
          echo "🔄 Container environment information..."
          echo "📊 Quarto version:"
          quarto --version
          echo "📊 Python version:"
          python3 --version
          echo "📊 R version:"
          R --version | head -1
          echo "📊 TeX Live version:"
          lualatex --version | head -1
          echo "📊 Available disk space:"
          df -h .
          echo "📊 Memory usage:"
          free -h

      - name: 🔨 Build HTML (copy config and render)
        if: inputs.format == 'html' || inputs.format == 'all'
        shell: bash
        run: |
          echo "🚀 Setting up HTML configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-html.yml _quarto.yml
          echo "✅ Configuration set to HTML"
          
          echo "🔨 Building HTML..."
          echo "⏰ HTML build started at: $(date)"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building HTML content (Linux container)\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          quarto render --to html
          echo "✅ HTML build completed at: $(date)"
        
      - name: 🔨 Build PDF (copy config and render)
        if: inputs.format == 'pdf' || inputs.format == 'all'
        shell: bash
        run: |
          echo "🚀 Setting up PDF configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-pdf.yml _quarto.yml
          echo "✅ Configuration set to PDF"
          
          echo "🔨 Building PDF..."
          echo "⏰ PDF build started at: $(date)"
          echo "📊 This should be much faster with pre-installed dependencies"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building PDF content (Linux container) - optimized\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          quarto render --to titlepage-pdf
          echo "✅ PDF build completed at: $(date)"

      - name: 📉 Compress PDF with Ghostscript
        if: inputs.format == 'pdf' || inputs.format == 'all'
        run: |
          if [ -f "build/pdf/Machine-Learning-Systems.pdf" ]; then
            gs \
              -sDEVICE=pdfwrite \
              -dCompatibilityLevel=1.4 \
              -dPDFSETTINGS=/ebook \
              -dNOPAUSE \
              -dQUIET \
              -dBATCH \
              -sOutputFile="./build/pdf/ebook.pdf" \
              "./build/pdf/Machine-Learning-Systems.pdf"

            mv ./build/pdf/ebook.pdf ./build/pdf/Machine-Learning-Systems.pdf
          else
            echo "⚠️ PDF file not found for compression"
          fi

      - name: 📤 Upload build artifacts
        if: github.event_name == 'pull_request' || inputs.deploy == false || inputs.format != 'html' || inputs.target == 'main'
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name != '' && inputs.artifact_name || format('build-{0}-{1}', inputs.os, inputs.format) }}
          path: |
            build/html
            build/pdf

      - name: 📋 Build Declaration
        run: |
          ARTIFACT_NAME="${{ inputs.artifact_name != '' && inputs.artifact_name || format('build-{0}-{1}', inputs.os, inputs.format) }}"
          echo "📦 Build Declaration: Successfully created artifact '$ARTIFACT_NAME'"
          echo "📊 Format: ${{ inputs.format }}"
          echo "📊 OS: ${{ inputs.os }}"
          echo "📊 Target: ${{ inputs.target }}"
          echo "📊 Environment: ${{ inputs.environment }}"
          echo "📊 Method: Container (Linux) - Optimized"
          echo "📝 Note: This workflow only builds artifacts - deployment handled by publish-live workflow"
          echo "artifact_created=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: 🎯 Set Final Build Status
        if: always()
        shell: bash
        run: |
          echo "🎯 Setting final build status..."
          
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="Build completed successfully (Linux container, ${{ inputs.format }})"
          else
            STATE="failure"
            DESCRIPTION="Build failed (Linux container, ${{ inputs.format }})"
          fi
          
          echo "📊 Final status: $STATE"
          echo "📝 Description: $DESCRIPTION"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          echo "✅ Commit status updated successfully"

  # Windows builds using container (when available) or optimized traditional approach
  build-windows:
    runs-on: windows-latest
    # TODO: Enable Windows container when ready
    # container:
    #   image: ghcr.io/${{ github.repository }}/quarto-build-windows:latest
    timeout-minutes: 60
    environment:
      name: ${{ inputs.environment }}
    if: inputs.os == 'windows-latest'
    env:
      R_LIBS_USER: ${{ github.workspace }}/.r-lib
      QUARTO_LOG_LEVEL: ${{ inputs.quarto-log-level }}
      PYTHONIOENCODING: utf-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

    steps:
      - name: 🚦 Set Initial Build Status
        shell: bash
        run: |
          echo "🚦 Setting initial build status to pending..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Quarto build started (Windows optimized, ${{ inputs.format }})\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 💾 Cache Python packages (Windows optimized)
        uses: actions/cache@v4
        id: cache-python-packages
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: python-pkgs-windows-${{ hashFiles('tools/dependencies/requirements.txt') }}
          restore-keys: |
            python-pkgs-windows-

      - name: 📦 Install Python dependencies (Windows optimized)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: 📦 Install Ghostscript (Windows optimized)
        shell: pwsh
        run: |
          # Use winget for faster installation
          try {
            winget install ArtifexSoftware.GhostScript --accept-source-agreements --accept-package-agreements
            Write-Output "✅ Ghostscript installed via winget"
          } catch {
            Write-Output "🔄 winget not available, using chocolatey..."
            choco install ghostscript -y
          }
          
          $gsPath = Get-ChildItem "C:\Program Files\gs" | Sort-Object Name -Descending | Select-Object -First 1
          $binPath = Join-Path $gsPath.FullName "bin"
          echo "Adding Ghostscript path: $binPath"
          echo "$binPath" | Out-File -Append -Encoding UTF8 $env:GITHUB_PATH

      - name: 📦 Install TeX Live packages (Windows optimized)
        uses: zauguin/install-texlive@v4
        with:
          package_file: tools/dependencies/tl_packages
          texlive_version: 2025
          cache_version: 1

      - name: 📊 Setup R (Windows optimized)
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      - name: 💾 Cache R packages (Windows optimized)
        uses: actions/cache@v4
        id: cache-r-packages
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: r-pkgs-windows-${{ inputs.r-version }}-${{ hashFiles('tools/dependencies/install_packages.R', '**/*.qmd') }}
          restore-keys: |
            r-pkgs-windows-${{ inputs.r-version }}-

      - name: 📦 Install R packages (Windows optimized)
        if: steps.cache-r-packages.outputs.cache-hit != 'true'
        shell: Rscript {0}
        run: |
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          
          lib_path <- Sys.getenv("R_LIBS_USER")
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          install.packages("remotes")
          
          if (file.exists("tools/dependencies/install_packages.R")) {
            source("tools/dependencies/install_packages.R")
          } else {
            pkgs <- c("rmarkdown", "knitr", "tidyverse", "ggplot2", "bookdown")
            install.packages(pkgs)
          }

      - name: 🔨 Build HTML (copy config and render)
        if: inputs.format == 'html' || inputs.format == 'all'
        shell: bash
        run: |
          echo "🚀 Setting up HTML configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-html.yml _quarto.yml
          echo "✅ Configuration set to HTML"
          
          echo "🔨 Building HTML..."
          echo "⏰ HTML build started at: $(date)"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building HTML content (Windows optimized)\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          quarto render --to html
          echo "✅ HTML build completed at: $(date)"
        
      - name: 🔨 Build PDF (copy config and render)
        if: inputs.format == 'pdf' || inputs.format == 'all'
        shell: bash
        run: |
          echo "🚀 Setting up PDF configuration..."
          cd quarto
          rm -f _quarto.yml
          cp config/_quarto-pdf.yml _quarto.yml
          echo "✅ Configuration set to PDF"
          
          echo "🔨 Building PDF..."
          echo "⏰ PDF build started at: $(date)"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building PDF content (Windows optimized)\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          quarto render --to titlepage-pdf
          echo "✅ PDF build completed at: $(date)"

      - name: 📉 Compress PDF with Ghostscript (Windows optimized)
        if: inputs.format == 'pdf' || inputs.format == 'all'
        shell: pwsh
        run: |
          $input = "./build/pdf/Machine-Learning-Systems.pdf"
          $output = "./build/pdf/ebook.pdf"

          if (!(Test-Path $input)) {
            Write-Warning "⚠️ Input PDF not found! Skipping compression..."
            exit 0
          }

          Write-Output "📉 Compressing PDF using Ghostscript..."
          & gswin64c -sDEVICE=pdfwrite -dCompatibilityLevel:1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sOutputFile="$output" "$input"

          if (Test-Path $output) {
            Move-Item -Force $output $input
          } else {
            Write-Warning "⚠️ Compression failed but continuing"
          }
          
      - name: 📤 Upload build artifacts
        if: github.event_name == 'pull_request' || inputs.deploy == false || inputs.format != 'html' || inputs.target == 'main'
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name != '' && inputs.artifact_name || format('build-{0}-{1}', inputs.os, inputs.format) }}
          path: |
            build/html
            build/pdf

      - name: 📋 Build Declaration
        run: |
          ARTIFACT_NAME="${{ inputs.artifact_name != '' && inputs.artifact_name || format('build-{0}-{1}', inputs.os, inputs.format) }}"
          echo "📦 Build Declaration: Successfully created artifact '$ARTIFACT_NAME'"
          echo "📊 Format: ${{ inputs.format }}"
          echo "📊 OS: ${{ inputs.os }}"
          echo "📊 Target: ${{ inputs.target }}"
          echo "📊 Environment: ${{ inputs.environment }}"
          echo "📊 Method: Traditional (Windows) - Optimized"
          echo "📝 Note: This workflow only builds artifacts - deployment handled by publish-live workflow"
          echo "artifact_created=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: 🎯 Set Final Build Status
        if: always()
        shell: bash
        run: |
          echo "🎯 Setting final build status..."
          
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="Build completed successfully (Windows optimized, ${{ inputs.format }})"
          else
            STATE="failure"
            DESCRIPTION="Build failed (Windows optimized, ${{ inputs.format }})"
          fi
          
          echo "📊 Final status: $STATE"
          echo "📝 Description: $DESCRIPTION"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"ci/quarto-build-${{ inputs.os }}-${{ inputs.format }}\"
            }"
          
          echo "✅ Commit status updated successfully" 