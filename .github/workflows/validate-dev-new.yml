name: '💯 Validate Dev (Simplified)'

# Simplified dev validation using the new matrix-driven core workflow
# Clean, maintainable, and easy to understand

env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: validate-dev-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [dev]  # Auto-trigger for dev branch
  workflow_dispatch:  # Manual trigger
    inputs:
      # Simple checkboxes for what to build
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      build_method:
        description: 'Build method'
        required: false
        default: 'container'
        type: choice
        options:
          - container
          - baremetal
          - both
      deploy_preview:
        description: '🚀 Deploy preview to staging'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write

jobs:
  # Step 1: Pre-commit validation (fast fail)
  pre-commit:
    name: '🔍 Pre-commit Checks'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 🔍 Run pre-commit checks
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 2: Determine what to build
  build-config:
    name: '🎯 Build Configuration'
    runs-on: ubuntu-latest
    outputs:
      build_html: ${{ steps.config.outputs.build_html }}
      build_pdf: ${{ steps.config.outputs.build_pdf }}
      build_linux: ${{ steps.config.outputs.build_linux }}
      build_windows: ${{ steps.config.outputs.build_windows }}
      build_method: ${{ steps.config.outputs.build_method }}
    
    steps:
      - name: 🎯 Determine build configuration
        id: config
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Auto-trigger: build everything
            echo "build_html=true" >> $GITHUB_OUTPUT
            echo "build_pdf=true" >> $GITHUB_OUTPUT
            echo "build_linux=true" >> $GITHUB_OUTPUT
            echo "build_windows=true" >> $GITHUB_OUTPUT
            echo "build_method=container" >> $GITHUB_OUTPUT
            echo "📊 Auto-trigger: Building all formats on all platforms"
          else
            # Manual trigger: use inputs
            echo "build_html=${{ inputs.build_html }}" >> $GITHUB_OUTPUT
            echo "build_pdf=${{ inputs.build_pdf }}" >> $GITHUB_OUTPUT
            echo "build_linux=${{ inputs.build_linux }}" >> $GITHUB_OUTPUT
            echo "build_windows=${{ inputs.build_windows }}" >> $GITHUB_OUTPUT
            echo "build_method=${{ inputs.build_method }}" >> $GITHUB_OUTPUT
            echo "📊 Manual trigger: Custom configuration"
            echo "  HTML: ${{ inputs.build_html }}, PDF: ${{ inputs.build_pdf }}"
            echo "  Linux: ${{ inputs.build_linux }}, Windows: ${{ inputs.build_windows }}"
          fi

  # Step 3: Build using core workflow
  build-container:
    name: '🐳 Container Build'
    needs: [pre-commit, build-config]
    if: needs.build-config.outputs.build_method == 'container' || needs.build-config.outputs.build_method == 'both'
    uses: ./.github/workflows/quarto-build-core.yml
    with:
      build_html: ${{ needs.build-config.outputs.build_html == 'true' }}
      build_pdf: ${{ needs.build-config.outputs.build_pdf == 'true' }}
      build_linux: ${{ needs.build-config.outputs.build_linux == 'true' }}
      build_windows: ${{ needs.build-config.outputs.build_windows == 'true' }}
      target: 'dev'
      build_method: 'container'

  build-baremetal:
    name: '⚠️ Baremetal Build (Legacy)'
    needs: [pre-commit, build-config]
    if: needs.build-config.outputs.build_method == 'baremetal' || needs.build-config.outputs.build_method == 'both'
    uses: ./.github/workflows/quarto-build-core.yml
    with:
      build_html: ${{ needs.build-config.outputs.build_html == 'true' }}
      build_pdf: ${{ needs.build-config.outputs.build_pdf == 'true' }}
      build_linux: ${{ needs.build-config.outputs.build_linux == 'true' }}
      build_windows: ${{ needs.build-config.outputs.build_windows == 'true' }}
      target: 'dev'
      build_method: 'baremetal'

  # Step 4: Deploy preview (if HTML was built)
  deploy-preview:
    name: '🚀 Deploy Preview'
    needs: [build-config, build-container, build-baremetal]
    if: |
      always() && 
      (inputs.deploy_preview != false) &&
      (needs.build-container.outputs.linux_html_artifact != '' || needs.build-baremetal.outputs.linux_html_artifact != '')
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/
      
    steps:
      - name: 📥 Download HTML artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-container.outputs.linux_html_artifact || needs.build-baremetal.outputs.linux_html_artifact }}
          path: ./preview-site
          
      - name: 🚀 Deploy to GitHub Pages (dev staging)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-site
          destination_dir: dev
          keep_files: false

  # Step 5: Summary
  summary:
    name: '📊 Validation Summary'
    if: always()
    needs: [pre-commit, build-config, build-container, build-baremetal, deploy-preview]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 💯 Dev Validation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build results
          echo "### 🔍 Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-commit**: ${{ needs.pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Build**: ${{ needs.build-container.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Baremetal Build**: ${{ needs.build-baremetal.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Deploy**: ${{ needs.deploy-preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Configuration used
          echo "### ⚙️ Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **HTML**: ${{ needs.build-config.outputs.build_html }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PDF**: ${{ needs.build-config.outputs.build_pdf }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: ${{ needs.build-config.outputs.build_linux }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: ${{ needs.build-config.outputs.build_windows }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: ${{ needs.build-config.outputs.build_method }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Preview link
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "### 🚀 Preview:" >> $GITHUB_STEP_SUMMARY
            echo "[View Dev Preview](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/)" >> $GITHUB_STEP_SUMMARY
          fi
