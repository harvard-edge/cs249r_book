name: '🚀 Quarto Build Core'

# This is the CORE build workflow that handles all Quarto builds
# It uses a true matrix strategy to build multiple OS/format combinations
# Called by validate-dev and publish-live workflows

env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds for same configuration
concurrency:
  group: quarto-core-${{ inputs.target }}-${{ github.sha }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Simple boolean inputs for what to build
      build_linux:
        required: false
        type: boolean
        default: true
        description: 'Build on Linux'
      build_windows:
        required: false
        type: boolean
        default: false
        description: 'Build on Windows'
      build_html:
        required: false
        type: boolean
        default: true
        description: 'Build HTML format'
      build_pdf:
        required: false
        type: boolean
        default: false
        description: 'Build PDF format'
      
      # Build configuration
      target:
        required: false
        type: string
        default: 'dev'
        description: 'Target branch (dev/main) - determines build behavior'
      build_method:
        required: false
        type: string
        default: 'container'
        description: 'Build method: container (fast) or baremetal (legacy)'
      
      # Container configuration
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to use'

    outputs:
      # Matrix outputs for each OS/format combination
      linux_html_artifact:
        description: "Linux HTML artifact name"
        value: ${{ jobs.build.outputs.linux_html_artifact }}
      linux_pdf_artifact:
        description: "Linux PDF artifact name"
        value: ${{ jobs.build.outputs.linux_pdf_artifact }}
      windows_html_artifact:
        description: "Windows HTML artifact name"
        value: ${{ jobs.build.outputs.windows_html_artifact }}
      windows_pdf_artifact:
        description: "Windows PDF artifact name"
        value: ${{ jobs.build.outputs.windows_pdf_artifact }}
      build_success:
        description: "Overall build success status"
        value: ${{ jobs.build.outputs.build_success }}
      formats_built:
        description: "Formats that were built"
        value: ${{ jobs.build.outputs.formats_built }}

permissions:
  contents: read
  packages: read

jobs:
  # Matrix generation job - creates dynamic matrix based on inputs
  generate-matrix:
    name: '🎯 Generate Build Matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
      
    steps:
      - name: 🎯 Generate Build Matrix
        id: generate
        run: |
          echo "🎯 Generating build matrix from inputs..."
          
          # Start with empty matrix
          MATRIX='{"include":[]}'
          
          # Linux builds
          if [ "${{ inputs.build_linux }}" = "true" ]; then
            if [ "${{ inputs.build_html }}" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "ubuntu-latest", "os_name": "linux", "format": "html", "artifact": "${{ inputs.target }}-html-linux"}]')
            fi
            if [ "${{ inputs.build_pdf }}" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "ubuntu-latest", "os_name": "linux", "format": "pdf", "artifact": "${{ inputs.target }}-pdf-linux"}]')
            fi
          fi
          
          # Windows builds  
          if [ "${{ inputs.build_windows }}" = "true" ]; then
            if [ "${{ inputs.build_html }}" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "windows-latest", "os_name": "windows", "format": "html", "artifact": "${{ inputs.target }}-html-windows"}]')
            fi
            if [ "${{ inputs.build_pdf }}" = "true" ]; then
              MATRIX=$(echo "$MATRIX" | jq '.include += [{"os": "windows-latest", "os_name": "windows", "format": "pdf", "artifact": "${{ inputs.target }}-pdf-windows"}]')
            fi
          fi
          
          echo "📊 Generated matrix:"
          echo "$MATRIX" | jq '.'
          
          # Check if matrix is empty
          BUILD_COUNT=$(echo "$MATRIX" | jq '.include | length')
          if [ "$BUILD_COUNT" -eq 0 ]; then
            echo "❌ No builds selected! At least one OS and format must be enabled."
            exit 1
          fi
          
          echo "✅ Matrix generated with $BUILD_COUNT build jobs"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # Main build job using real GitHub Actions matrix
  build:
    name: '🚀 ${{ matrix.os_name }} ${{ matrix.format }}'
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    if: needs.generate-matrix.outputs.matrix != ''
    timeout-minutes: 90
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    outputs:
      # Dynamic outputs based on what was built
      linux_html_artifact: ${{ steps.collect-outputs.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect-outputs.outputs.linux_pdf_artifact }}
      windows_html_artifact: ${{ steps.collect-outputs.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect-outputs.outputs.windows_pdf_artifact }}
      build_success: ${{ steps.collect-outputs.outputs.build_success }}
      formats_built: ${{ steps.collect-outputs.outputs.formats_built }}

    steps:
      - name: 🚦 Set Build Status
        run: |
          echo "🚦 Starting ${{ matrix.os_name }} ${{ matrix.format }} build..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"pending\",
              \"description\": \"Building ${{ matrix.format }} on ${{ matrix.os_name }}\",
              \"context\": \"ci/quarto-build-${{ matrix.os_name }}-${{ matrix.format }}\"
            }"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Container build path (preferred)
      - name: 🐳 Container Build
        if: inputs.build_method == 'container'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: ${{ inputs.target }}
          container_registry: ${{ inputs.container_registry }}
          container_tag: ${{ inputs.container_tag }}

      # Baremetal build path (legacy)
      - name: ⚠️ Baremetal Build (Legacy)
        if: inputs.build_method == 'baremetal'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: ${{ inputs.target }}

      - name: 🎯 Set Final Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="${{ matrix.format }} build completed on ${{ matrix.os_name }}"
          else
            STATE="failure"  
            DESCRIPTION="${{ matrix.format }} build failed on ${{ matrix.os_name }}"
          fi
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
            -d "{
              \"state\": \"$STATE\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"ci/quarto-build-${{ matrix.os_name }}-${{ matrix.format }}\"
            }"

  # Collect all outputs from matrix builds
  collect-outputs:
    name: '📊 Collect Build Results'
    needs: [generate-matrix, build]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
      build_success: ${{ steps.collect.outputs.build_success }}
      formats_built: ${{ steps.collect.outputs.formats_built }}
      
    steps:
      - name: 📊 Collect Matrix Results
        id: collect
        run: |
          echo "📊 Collecting results from matrix builds..."
          
          # Initialize outputs
          LINUX_HTML=""
          LINUX_PDF=""
          WINDOWS_HTML=""
          WINDOWS_PDF=""
          FORMATS_BUILT=()
          
          # Parse matrix to determine what was built
          MATRIX='${{ needs.generate-matrix.outputs.matrix }}'
          
          # Collect artifact names based on successful builds
          echo "$MATRIX" | jq -r '.include[] | "\(.os_name) \(.format) \(.artifact)"' | while read OS_NAME FORMAT ARTIFACT; do
            if [ "${{ needs.build.result }}" = "success" ]; then
              case "${OS_NAME}_${FORMAT}" in
                "linux_html")
                  echo "linux_html_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "linux_pdf")
                  echo "linux_pdf_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "windows_html")
                  echo "windows_html_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
                "windows_pdf")
                  echo "windows_pdf_artifact=$ARTIFACT" >> $GITHUB_OUTPUT
                  ;;
              esac
              FORMATS_BUILT+=("$FORMAT")
            fi
          done
          
          # Determine overall success
          if [ "${{ needs.build.result }}" = "success" ]; then
            BUILD_SUCCESS="true"
          else
            BUILD_SUCCESS="false"
          fi
          
          # Join formats built
          FORMATS_LIST=$(IFS=','; echo "${FORMATS_BUILT[*]}")
          
          echo "build_success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "formats_built=$FORMATS_LIST" >> $GITHUB_OUTPUT
          
          echo "✅ Results collected:"
          echo "  Success: $BUILD_SUCCESS"
          echo "  Formats: $FORMATS_LIST"
