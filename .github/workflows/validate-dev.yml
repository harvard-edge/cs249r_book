name: 'üíØ Validate Dev'

# Enhanced dev workflow: validate + build + preview deployment
# Uses container builds by default with configurable options
# Eliminates code duplication with matrix strategy

env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: validate-dev-${{ github.ref }}
  cancel-in-progress: true

# Triggers: dev branch pushes and manual testing
on:
  push:
    branches: [dev]  # Auto-trigger for dev branch
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      target:
        description: 'Target branch for build artifacts (dev/main)'
        required: false
        type: choice
        default: 'dev'
        options:
          - dev
          - main
      # Format selection checkboxes
      build_html:
        description: 'üìÑ Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: 'üìë Build PDF format'
        required: false
        default: true
        type: boolean
      # OS selection checkboxes  
      build_linux:
        description: 'üêß Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'ü™ü Build on Windows'
        required: false
        default: true
        type: boolean
      # Container validation
      run_health_check:
        description: 'üíä Run container health check'
        required: false
        default: false
        type: boolean
      # Build method selection
      build_method:
        description: 'Build method to use'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - container
          - baremetal
      # Container configuration (consistent with other workflows)
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to use'
        required: false
        default: 'latest'
        type: string
      deploy_preview:
        description: 'üöÄ Deploy preview to staging'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write

jobs:
  # Step 1: Pre-commit validation
  pre-commit:
    name: 'üîç Pre-commit Checks'
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: üîç Run pre-commit checks
        run: |
          echo "üîç Installing and running pre-commit..."
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install --install-hooks
          
          echo "üîÑ Running pre-commit on all files..."
          if pre-commit run --all-files; then
            echo "‚úÖ Pre-commit checks: PASSED"
          else
            echo "‚ùå Pre-commit checks: FAILED"
            exit 1
          fi

  # Step 2: Container Health Check (validate containers before builds)
  container-health-check:
    name: 'üíä Container Health Check'
    needs: [pre-commit]
    if: inputs.run_health_check == true
    uses: ./.github/workflows/container-health-check.yml
    with:
      test_linux: true
      test_windows: true
      container_registry: 'ghcr.io'
      container_tag: 'latest'

  # Step 3: Determine build configuration (shared logic)
  build-config:
    name: 'üéØ Build Configuration'
    runs-on: ubuntu-latest
    outputs:
      build_html: ${{ steps.config.outputs.build_html }}
      build_pdf: ${{ steps.config.outputs.build_pdf }}
      build_linux: ${{ steps.config.outputs.build_linux }}
      build_windows: ${{ steps.config.outputs.build_windows }}
      build_method: ${{ steps.config.outputs.build_method }}
      container_registry: ${{ steps.config.outputs.container_registry }}
      container_tag: ${{ steps.config.outputs.container_tag }}
      target: ${{ steps.config.outputs.target }}
    
    steps:
      - name: üéØ Determine build configuration
        id: config
        run: |
          echo "üéØ === BUILD CONFIGURATION ==="
          
          # Determine what to build based on inputs (individual format flags)
          if [ "${{ github.event_name }}" = "push" ]; then
            # Auto-trigger: build everything
            BUILD_HTML="true"
            BUILD_PDF="true"
            BUILD_LINUX="true"
            BUILD_WINDOWS="true"
            BUILD_METHOD="both"
            TARGET="dev" # For push events, always target dev
            echo "üìä Trigger: Automatic (dev branch push)"
            echo "üìä HTML: $BUILD_HTML (mandatory)"
            echo "üìä PDF: $BUILD_PDF (mandatory)"
            echo "üìä Linux: $BUILD_LINUX (mandatory)"
            echo "üìä Windows: $BUILD_WINDOWS (mandatory)"
            echo "üìä Method: $BUILD_METHOD (default)"
            echo "üìä Target: $TARGET"
          else
            # Manual trigger: respect checkboxes
            BUILD_HTML="${{ inputs.build_html }}"
            BUILD_PDF="${{ inputs.build_pdf }}"
            BUILD_LINUX="${{ inputs.build_linux }}"
            BUILD_WINDOWS="${{ inputs.build_windows }}"
            BUILD_METHOD="${{ inputs.build_method }}"
            TARGET="${{ inputs.target }}"
            
            echo "üìä Trigger: Manual workflow dispatch"
            echo "üìä HTML: $BUILD_HTML"
            echo "üìä PDF: $BUILD_PDF"
            echo "üìä Linux: $BUILD_LINUX"
            echo "üìä Windows: $BUILD_WINDOWS"
            echo "üìä Method: $BUILD_METHOD"
            echo "üìä Target: $TARGET"
            
            # Validate at least one format and OS is selected
            if [ "$BUILD_HTML" != "true" ] && [ "$BUILD_PDF" != "true" ]; then
              echo "‚ùå No formats selected!"
              exit 1
            fi
            if [ "$BUILD_LINUX" != "true" ] && [ "$BUILD_WINDOWS" != "true" ]; then
              echo "‚ùå No operating systems selected!"
              exit 1
            fi
          fi
          
          # Container configuration
          CONTAINER_REGISTRY="${{ inputs.container_registry || 'ghcr.io' }}"
          CONTAINER_TAG="${{ inputs.container_tag || 'latest' }}"
          
          echo "üìä Final Configuration:"
          echo "  HTML: $BUILD_HTML"
          echo "  PDF: $BUILD_PDF"
          echo "  Linux: $BUILD_LINUX"
          echo "  Windows: $BUILD_WINDOWS"  
          echo "  Method: $BUILD_METHOD"
          echo "  Registry: $CONTAINER_REGISTRY"
          echo "  Tag: $CONTAINER_TAG"
          echo "  Target: $TARGET"
          
          # Set outputs (individual format flags for matrix-driven approach)
          echo "build_html=$BUILD_HTML" >> $GITHUB_OUTPUT
          echo "build_pdf=$BUILD_PDF" >> $GITHUB_OUTPUT
          echo "build_linux=$BUILD_LINUX" >> $GITHUB_OUTPUT
          echo "build_windows=$BUILD_WINDOWS" >> $GITHUB_OUTPUT
          echo "build_method=$BUILD_METHOD" >> $GITHUB_OUTPUT
          echo "container_registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT
          echo "container_tag=$CONTAINER_TAG" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT


  # Step 4: Matrix-driven build calls (clean and simple!)
  build-container:
    name: 'üê≥ Container Build Matrix'
    needs: [pre-commit, build-config, container-health-check]
    if: |
      always() && 
      (needs.pre-commit.result == 'success') &&
      (needs.build-config.result == 'success') &&
      (needs.container-health-check.result == 'success' || needs.container-health-check.result == 'skipped') &&
      (needs.build-config.outputs.build_method == 'container' || needs.build-config.outputs.build_method == 'both')
    uses: ./.github/workflows/quarto-build-container.yml
    with:
      build_linux: ${{ needs.build-config.outputs.build_linux == 'true' }}
      build_windows: ${{ needs.build-config.outputs.build_windows == 'true' }}
      build_html: ${{ needs.build-config.outputs.build_html == 'true' }}
      build_pdf: ${{ needs.build-config.outputs.build_pdf == 'true' }}
      target: ${{ needs.build-config.outputs.target }}
      container_registry: ${{ needs.build-config.outputs.container_registry }}
      container_tag: ${{ needs.build-config.outputs.container_tag }}

  build-baremetal:
    name: '‚ö†Ô∏è Baremetal Build Matrix (Legacy)'
    needs: [pre-commit, build-config]
    if: needs.build-config.outputs.build_method == 'baremetal' || needs.build-config.outputs.build_method == 'both'
    uses: ./.github/workflows/quarto-build-baremetal.yml
    with:
      build_linux: ${{ needs.build-config.outputs.build_linux == 'true' }}
      build_windows: ${{ needs.build-config.outputs.build_windows == 'true' }}
      build_html: ${{ needs.build-config.outputs.build_html == 'true' }}
      build_pdf: ${{ needs.build-config.outputs.build_pdf == 'true' }}
      target: ${{ needs.build-config.outputs.target }}

  # Step 4: Collect build results (needed for outputs)
  collect-results:
    name: 'üìä Collect Results'
    needs: [build-config, build-container, build-baremetal]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      linux_success: ${{ steps.collect.outputs.linux_success }}
      windows_success: ${{ steps.collect.outputs.windows_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
    
    steps:
      - name: üìä Collect build results
        id: collect
        run: |
          echo "üìä === COLLECTING BUILD RESULTS ==="
          
          # These will hold the final results, preferring container builds
          OVERALL_SUCCESS="false"
          LINUX_HTML=""
          WINDOWS_HTML=""
          LINUX_PDF=""
          WINDOWS_PDF=""
          
          # Check container build results first
          if [[ "${{ needs.build-config.outputs.build_method }}" == "container" || "${{ needs.build-config.outputs.build_method }}" == "both" ]]; then
            if [[ "${{ needs.build-container.result }}" == "success" ]]; then
              echo "‚úÖ Container builds completed successfully."
              OVERALL_SUCCESS="${{ needs.build-container.outputs.build_success }}"
              LINUX_HTML="${{ needs.build-container.outputs.linux_html_artifact }}"
              LINUX_PDF="${{ needs.build-container.outputs.linux_pdf_artifact }}"
              WINDOWS_HTML="${{ needs.build-container.outputs.windows_html_artifact }}"
              WINDOWS_PDF="${{ needs.build-container.outputs.windows_pdf_artifact }}"
            else
              echo "‚ùå Container builds failed or were skipped."
              OVERALL_SUCCESS="false"
            fi
          fi
          
          # Fallback to baremetal if container failed and method was 'both', or if method was 'baremetal'
          if [[ "$OVERALL_SUCCESS" == "false" && ("${{ needs.build-config.outputs.build_method }}" == "baremetal" || "${{ needs.build-config.outputs.build_method }}" == "both") ]]; then
            if [[ "${{ needs.build-baremetal.result }}" == "success" ]]; then
              echo "‚úÖ Baremetal builds completed successfully."
              OVERALL_SUCCESS="${{ needs.build-baremetal.outputs.build_success }}"
              LINUX_HTML="${{ needs.build-baremetal.outputs.linux_html_artifact }}"
              LINUX_PDF="${{ needs.build-baremetal.outputs.linux_pdf_artifact }}"
              WINDOWS_HTML="${{ needs.build-baremetal.outputs.windows_html_artifact }}"
              WINDOWS_PDF="${{ needs.build-baremetal.outputs.windows_pdf_artifact }}"
            else
              echo "‚ùå Baremetal builds also failed or were skipped."
              OVERALL_SUCCESS="false"
            fi
          fi

          # Determine per-platform success based on overall success and which platforms were built
          LINUX_SUCCESS="false"
          if [[ "${{ needs.build-config.outputs.build_linux }}" == "true" && "$OVERALL_SUCCESS" == "true" ]]; then
            LINUX_SUCCESS="true"
          fi

          WINDOWS_SUCCESS="false"
          if [[ "${{ needs.build-config.outputs.build_windows }}" == "true" && "$OVERALL_SUCCESS" == "true" ]]; then
            WINDOWS_SUCCESS="true"
          fi
          
          echo "Final Success Status: Linux -> $LINUX_SUCCESS, Windows -> $WINDOWS_SUCCESS"

          # Set outputs
          echo "linux_success=$LINUX_SUCCESS" >> $GITHUB_OUTPUT
          echo "windows_success=$WINDOWS_SUCCESS" >> $GITHUB_OUTPUT
          echo "linux_html_artifact=$LINUX_HTML" >> $GITHUB_OUTPUT
          echo "windows_html_artifact=$WINDOWS_HTML" >> $GITHUB_OUTPUT
          echo "linux_pdf_artifact=$LINUX_PDF" >> $GITHUB_OUTPUT
          echo "windows_pdf_artifact=$WINDOWS_PDF" >> $GITHUB_OUTPUT

  # Step 5: Deploy preview to staging (dev branch only)
  deploy-preview:
    name: 'üöÄ Deploy Preview'
    needs: [build-config, collect-results]
    if: |
      always() && 
      needs.collect-results.outputs.linux_success == 'true' && 
      needs.collect-results.outputs.linux_html_artifact != '' &&
      (github.ref == 'refs/heads/dev' || (inputs.deploy_preview == true && inputs.target == 'dev'))
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/
      
    steps:
      - name: üì• Download HTML artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.collect-results.outputs.linux_html_artifact }}
          path: ./preview-site
          
      - name: üöÄ Deploy to GitHub Pages (dev staging)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-site
          destination_dir: dev
          keep_files: false
          commit_message: |
            üöÄ Deploy dev preview from ${{ github.sha }}
            
            Built using: ${{ needs.build-config.outputs.build_method }}
            Registry: ${{ needs.build-config.outputs.container_registry }}
            Tag: ${{ needs.build-config.outputs.container_tag }}
            Branch: ${{ github.ref_name }}
            Target: ${{ needs.build-config.outputs.target }}

      - name: ‚úÖ Deployment Success
        run: |
          echo "‚úÖ === DEPLOYMENT SUCCESSFUL ==="
          echo "üöÄ Preview URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/"
          echo "üì¶ Source: Linux HTML build"
          echo "üîß Method: ${{ needs.build-config.outputs.build_method }}"

  # Step 6: Final results and summary
  validation-summary:
    name: 'üéØ Validation Summary'
    if: always()
    needs: [pre-commit, build-config, collect-results, deploy-preview]
    runs-on: ubuntu-latest
    
    steps:
      - name: üéØ Generate validation summary
        run: |
          echo "üéØ === VALIDATION SUMMARY ==="
          echo "=============================="
          echo ""
          
          # Visual status indicators
          echo "üîç RESULTS:"
          echo "----------"
          
          if [ "${{ needs.pre-commit.result }}" = "success" ]; then
            echo "‚úÖ Pre-commit checks: PASSED"
          else
            echo "‚ùå Pre-commit checks: FAILED"
          fi
          
          if [ "${{ needs.build-config.outputs.build_linux }}" = "true" ]; then
            if [ "${{ needs.collect-results.outputs.linux_success }}" = "true" ]; then
              echo "‚úÖ Linux build: PASSED"
            else
              echo "‚ùå Linux build: FAILED"
            fi
          else
            echo "‚è≠Ô∏è Linux build: SKIPPED"
          fi
          
          if [ "${{ needs.build-config.outputs.build_windows }}" = "true" ]; then
            if [ "${{ needs.collect-results.outputs.windows_success }}" = "true" ]; then
              echo "‚úÖ Windows build: PASSED"
            else
              echo "‚ùå Windows build: FAILED"
            fi
          else
            echo "‚è≠Ô∏è Windows build: SKIPPED"
          fi
          
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "‚úÖ Preview deployment: PASSED"
          elif [ "${{ needs.deploy-preview.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Preview deployment: SKIPPED"
          else
            echo "‚ùå Preview deployment: FAILED"
          fi
          
          echo ""
          echo "üéØ OVERALL STATUS:"
          echo "-----------------"
          
          # Determine overall success
          PRECOMMIT_OK="${{ needs.pre-commit.result == 'success' }}"
          LINUX_OK="${{ needs.collect-results.outputs.linux_success == 'true' || needs.build-config.outputs.build_linux == 'false' }}"
          WINDOWS_OK="${{ needs.collect-results.outputs.windows_success == 'true' || needs.build-config.outputs.build_windows == 'false' }}"
          
          if [ "$PRECOMMIT_OK" = "true" ] && [ "$LINUX_OK" = "true" ] && [ "$WINDOWS_OK" = "true" ]; then
            echo "üü¢ VALIDATION: FULLY OPERATIONAL ‚úÖ"
            echo "   All enabled checks passed successfully!"
            if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
              echo "üöÄ PREVIEW: DEPLOYED ‚úÖ"
              echo "   Check the staging site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/"
            fi
          else
            echo "üî¥ VALIDATION: ISSUES DETECTED ‚ùå"
            echo "   Check the logs above for details"
          fi
          echo "=============================="

      - name: üìã Generate GitHub summary
        run: |
          echo "# üéØ Enhanced Dev Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-commit**: ${{ needs.pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux Build**: ${{ needs.collect-results.outputs.linux_success == 'true' && '‚úÖ success' || '‚ùå failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows Build**: ${{ needs.collect-results.outputs.windows_success == 'true' && '‚úÖ success' || '‚ùå failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Deploy**: ${{ needs.deploy-preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üîß Build Configuration" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "- **Trigger**: Automatic (dev branch push)" >> $GITHUB_STEP_SUMMARY
            echo "- **Format**: HTML + PDF (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **OS**: Linux + Windows (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: üîÑ Both container and baremetal builds (default for auto-push)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
            echo "- **HTML**: ${{ inputs.build_html }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PDF**: ${{ inputs.build_pdf }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Linux**: ${{ inputs.build_linux }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Windows**: ${{ inputs.build_windows }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.build_method }}" = "baremetal" ]; then
              echo "- **Method**: ‚ö†Ô∏è Baremetal builds (LEGACY - deprecated)" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ inputs.build_method }}" = "both" ]; then
              echo "- **Method**: üîÑ Both container and baremetal builds" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Method**: ‚úÖ Container builds (recommended)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- **Registry**: ${{ needs.build-config.outputs.container_registry }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ needs.build-config.outputs.container_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: ${{ needs.build-config.outputs.target }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "## üöÄ Preview Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/" >> $GITHUB_STEP_SUMMARY
            echo "- **Source**: Linux HTML build" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéØ Summary" >> $GITHUB_STEP_SUMMARY
          LINUX_OK="${{ needs.collect-results.outputs.linux_success == 'true' || needs.build-config.outputs.build_linux == 'false' }}"
          WINDOWS_OK="${{ needs.collect-results.outputs.windows_success == 'true' || needs.build-config.outputs.build_windows == 'false' }}"
          
          if [ "${{ needs.pre-commit.result }}" = "success" ] && [ "$LINUX_OK" = "true" ] && [ "$WINDOWS_OK" = "true" ]; then
            echo "‚úÖ **Validation Passed** - All enabled builds successful" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
              echo "üöÄ **Preview Deployed** - Check the staging site" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Validation Failed** - Check the logs above" >> $GITHUB_STEP_SUMMARY
          fi