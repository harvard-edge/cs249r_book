name: '💯 Validate Dev'

# Enhanced dev workflow: validate + build + preview deployment
# Uses container builds by default with configurable options
# Eliminates code duplication with matrix strategy

env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: validate-dev-${{ github.ref }}
  cancel-in-progress: true

# Triggers: dev branch pushes and manual testing
on:
  push:
    branches: [dev]  # Auto-trigger for dev branch
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      # Format selection checkboxes
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      # OS selection checkboxes  
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      # Build method selection
      build_method:
        description: 'Build method to use'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - container
          - baremetal
      # Container configuration (consistent with other workflows)
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to use'
        required: false
        default: 'latest'
        type: string
      deploy_preview:
        description: '🚀 Deploy preview to staging'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write

jobs:
  # Step 1: Pre-commit validation
  pre-commit:
    name: '🔍 Pre-commit Checks'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 🔍 Run pre-commit checks
        run: |
          echo "🔍 Installing and running pre-commit..."
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install --install-hooks
          
          echo "🔄 Running pre-commit on all files..."
          if pre-commit run --all-files; then
            echo "✅ Pre-commit checks: PASSED"
          else
            echo "❌ Pre-commit checks: FAILED"
            exit 1
          fi

  # Step 2: Determine build configuration (shared logic)
  build-config:
    name: '🎯 Build Configuration'
    runs-on: ubuntu-latest
    outputs:
      format: ${{ steps.config.outputs.format }}
      build_linux: ${{ steps.config.outputs.build_linux }}
      build_windows: ${{ steps.config.outputs.build_windows }}
      build_method: ${{ steps.config.outputs.build_method }}
      container_registry: ${{ steps.config.outputs.container_registry }}
      container_tag: ${{ steps.config.outputs.container_tag }}
    
    steps:
      - name: 🎯 Determine build configuration
        id: config
        run: |
          echo "🎯 === BUILD CONFIGURATION ==="
          
          # Determine format based on inputs (default to 'all' for push events)
          if [ "${{ github.event_name }}" = "push" ]; then
            # Auto-trigger: build everything
            FORMAT="all"
            BUILD_LINUX="true"
            BUILD_WINDOWS="true"
            BUILD_METHOD="both"
            echo "📊 Trigger: Automatic (dev branch push)"
            echo "📊 Format: HTML + PDF (mandatory)"
            echo "📊 OS: Linux + Windows (mandatory)"
            echo "📊 Method: Both container and baremetal builds (default)"
          else
            # Manual trigger: respect checkboxes
            BUILD_HTML="${{ inputs.build_html }}"
            BUILD_PDF="${{ inputs.build_pdf }}"
            BUILD_LINUX="${{ inputs.build_linux }}"
            BUILD_WINDOWS="${{ inputs.build_windows }}"
            BUILD_METHOD="${{ inputs.build_method }}"
            
            echo "📊 Trigger: Manual workflow dispatch"
            echo "📊 HTML: $BUILD_HTML"
            echo "📊 PDF: $BUILD_PDF"
            echo "📊 Linux: $BUILD_LINUX"
            echo "📊 Windows: $BUILD_WINDOWS"
            echo "📊 Method: $BUILD_METHOD"
            
            if [ "$BUILD_HTML" = "true" ] && [ "$BUILD_PDF" = "true" ]; then
              FORMAT="all"
            elif [ "$BUILD_HTML" = "true" ]; then
              FORMAT="html"
            elif [ "$BUILD_PDF" = "true" ]; then
              FORMAT="pdf"
            else
              echo "❌ No formats selected!"
              exit 1
            fi
          fi
          
          # Container configuration
          CONTAINER_REGISTRY="${{ inputs.container_registry || 'ghcr.io' }}"
          CONTAINER_TAG="${{ inputs.container_tag || 'latest' }}"
          
          echo "📊 Final Configuration:"
          echo "  Format: $FORMAT"
          echo "  Linux: $BUILD_LINUX"
          echo "  Windows: $BUILD_WINDOWS"  
          echo "  Method: $BUILD_METHOD"
          echo "  Registry: $CONTAINER_REGISTRY"
          echo "  Tag: $CONTAINER_TAG"
          
          # Set outputs
          echo "format=$FORMAT" >> $GITHUB_OUTPUT
          echo "build_linux=$BUILD_LINUX" >> $GITHUB_OUTPUT
          echo "build_windows=$BUILD_WINDOWS" >> $GITHUB_OUTPUT
          echo "build_method=$BUILD_METHOD" >> $GITHUB_OUTPUT
          echo "container_registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT
          echo "container_tag=$CONTAINER_TAG" >> $GITHUB_OUTPUT

  # Step 3: Matrix build strategy (eliminates duplication)
  build:
    name: '🚀 Build ${{ matrix.platform }}'
    needs: [pre-commit, build-config]
    runs-on: ubuntu-latest
    if: always() && needs.pre-commit.result == 'success'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: Linux
            os: ubuntu-latest
            enabled: ${{ needs.build-config.outputs.build_linux }}
            emoji: 🐧
          - platform: Windows
            os: windows-latest
            enabled: ${{ needs.build-config.outputs.build_windows }}
            emoji: 🪟
    
    # Skip job if this platform is disabled
    if: matrix.enabled == 'true' && needs.pre-commit.result == 'success'
    
    outputs:
      build_success_linux: ${{ matrix.platform == 'Linux' && steps.build-result.outputs.build_success || '' }}
      build_success_windows: ${{ matrix.platform == 'Windows' && steps.build-result.outputs.build_success || '' }}
      html_artifact_linux: ${{ matrix.platform == 'Linux' && steps.build-result.outputs.html_artifact || '' }}
      html_artifact_windows: ${{ matrix.platform == 'Windows' && steps.build-result.outputs.html_artifact || '' }}
      pdf_artifact_linux: ${{ matrix.platform == 'Linux' && steps.build-result.outputs.pdf_artifact || '' }}
      pdf_artifact_windows: ${{ matrix.platform == 'Windows' && steps.build-result.outputs.pdf_artifact || '' }}
      build_method: ${{ steps.build-result.outputs.build_method }}
    
    steps:
      - name: ${{ matrix.emoji }} Building ${{ matrix.platform }}
        run: |
          echo "${{ matrix.emoji }} === BUILDING ${{ upper(matrix.platform) }} ==="
          echo "📊 Platform: ${{ matrix.platform }}"
          echo "📊 OS: ${{ matrix.os }}"
          echo "📊 Format: ${{ needs.build-config.outputs.format }}"
          echo "📊 Method: ${{ needs.build-config.outputs.build_method }}"
          echo "📊 Registry: ${{ needs.build-config.outputs.container_registry }}"
          echo "📊 Tag: ${{ needs.build-config.outputs.container_tag }}"

      - name: 🚀 Container Build
        id: container-build
        if: needs.build-config.outputs.build_method == 'container' || needs.build-config.outputs.build_method == 'both'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ needs.build-config.outputs.format }}
          target: dev
          container_registry: ${{ needs.build-config.outputs.container_registry }}
          container_tag: ${{ needs.build-config.outputs.container_tag }}

      - name: ⚠️ LEGACY Baremetal Build
        id: baremetal-build
        if: needs.build-config.outputs.build_method == 'baremetal' || needs.build-config.outputs.build_method == 'both'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ needs.build-config.outputs.format }}
          target: dev

      - name: 📊 Build Result Summary
        id: build-result
        run: |
          echo "📊 === ${{ upper(matrix.platform) }} BUILD RESULT ==="
          
          # Determine which build method was used and get results
          BUILD_METHOD="${{ needs.build-config.outputs.build_method }}"
          
          if [ "$BUILD_METHOD" = "container" ]; then
            BUILD_SUCCESS="${{ steps.container-build.outputs.build_success }}"
            HTML_ARTIFACT="${{ steps.container-build.outputs.html_artifact }}"
            PDF_ARTIFACT="${{ steps.container-build.outputs.pdf_artifact }}"
          elif [ "$BUILD_METHOD" = "baremetal" ]; then
            BUILD_SUCCESS="${{ steps.baremetal-build.outputs.build_success }}"
            HTML_ARTIFACT="${{ steps.baremetal-build.outputs.html_artifact }}"
            PDF_ARTIFACT="${{ steps.baremetal-build.outputs.pdf_artifact }}"
          elif [ "$BUILD_METHOD" = "both" ]; then
            # For 'both', prefer container results, fallback to baremetal
            if [ "${{ steps.container-build.outputs.build_success }}" = "true" ]; then
              BUILD_SUCCESS="true"
              HTML_ARTIFACT="${{ steps.container-build.outputs.html_artifact }}"
              PDF_ARTIFACT="${{ steps.container-build.outputs.pdf_artifact }}"
            else
              BUILD_SUCCESS="${{ steps.baremetal-build.outputs.build_success }}"
              HTML_ARTIFACT="${{ steps.baremetal-build.outputs.html_artifact }}"
              PDF_ARTIFACT="${{ steps.baremetal-build.outputs.pdf_artifact }}"
            fi
          fi
          
          # Visual status reporting
          if [ "$BUILD_SUCCESS" = "true" ]; then
            echo "✅ ${{ matrix.platform }} Build: PASSED"
          else
            echo "❌ ${{ matrix.platform }} Build: FAILED"
          fi
          
          echo "📦 HTML Artifact: $HTML_ARTIFACT"
          echo "📦 PDF Artifact: $PDF_ARTIFACT"
          echo "🔧 Build Method: $BUILD_METHOD"
          
          # Set outputs
          echo "build_success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "html_artifact=$HTML_ARTIFACT" >> $GITHUB_OUTPUT
          echo "pdf_artifact=$PDF_ARTIFACT" >> $GITHUB_OUTPUT
          echo "build_method=$BUILD_METHOD" >> $GITHUB_OUTPUT

  # Step 4: Collect build results (needed for outputs)
  collect-results:
    name: '📊 Collect Results'
    needs: [build-config, build]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      linux_success: ${{ steps.collect.outputs.linux_success }}
      windows_success: ${{ steps.collect.outputs.windows_success }}
      linux_html_artifact: ${{ steps.collect.outputs.linux_html_artifact }}
      windows_html_artifact: ${{ steps.collect.outputs.windows_html_artifact }}
      linux_pdf_artifact: ${{ steps.collect.outputs.linux_pdf_artifact }}
      windows_pdf_artifact: ${{ steps.collect.outputs.windows_pdf_artifact }}
    
    steps:
      - name: 📊 Collect build results
        id: collect
        run: |
          echo "📊 === COLLECTING BUILD RESULTS ==="
          
          # Extract results from matrix build outputs
          LINUX_SUCCESS="false"
          WINDOWS_SUCCESS="false"
          LINUX_HTML=""
          WINDOWS_HTML=""
          LINUX_PDF=""
          WINDOWS_PDF=""
          
          # Check each job result from the matrix strategy
          # (GitHub Actions doesn't directly support matrix outputs, so we parse from needs)
          if [ "${{ needs.build-config.outputs.build_linux }}" = "true" ]; then
            if [ "${{ needs.build.result }}" = "success" ]; then
              LINUX_SUCCESS="true"
              # Note: These would need to be passed through the build job outputs
              echo "✅ Linux build completed successfully"
            else
              echo "❌ Linux build failed"
            fi
          else
            echo "⏭️ Linux build skipped"
          fi
          
          if [ "${{ needs.build-config.outputs.build_windows }}" = "true" ]; then
            if [ "${{ needs.build.result }}" = "success" ]; then
              WINDOWS_SUCCESS="true"
              echo "✅ Windows build completed successfully"
            else
              echo "❌ Windows build failed"
            fi
          else
            echo "⏭️ Windows build skipped"
          fi
          
          # Set outputs
          echo "linux_success=$LINUX_SUCCESS" >> $GITHUB_OUTPUT
          echo "windows_success=$WINDOWS_SUCCESS" >> $GITHUB_OUTPUT
          echo "linux_html_artifact=$LINUX_HTML" >> $GITHUB_OUTPUT
          echo "windows_html_artifact=$WINDOWS_HTML" >> $GITHUB_OUTPUT
          echo "linux_pdf_artifact=$LINUX_PDF" >> $GITHUB_OUTPUT
          echo "windows_pdf_artifact=$WINDOWS_PDF" >> $GITHUB_OUTPUT

  # Step 5: Deploy preview to staging (dev branch only)
  deploy-preview:
    name: '🚀 Deploy Preview'
    needs: [build-config, collect-results]
    if: |
      always() && 
      needs.collect-results.outputs.linux_success == 'true' && 
      needs.collect-results.outputs.linux_html_artifact != '' &&
      (github.ref == 'refs/heads/dev' || inputs.deploy_preview == true)
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/
      
    steps:
      - name: 📥 Download HTML artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.collect-results.outputs.linux_html_artifact }}
          path: ./preview-site
          
      - name: 🚀 Deploy to GitHub Pages (dev staging)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-site
          destination_dir: dev
          keep_files: false
          commit_message: |
            🚀 Deploy dev preview from ${{ github.sha }}
            
            Built using: ${{ needs.build-config.outputs.build_method }}
            Registry: ${{ needs.build-config.outputs.container_registry }}
            Tag: ${{ needs.build-config.outputs.container_tag }}
            Branch: ${{ github.ref_name }}

      - name: ✅ Deployment Success
        run: |
          echo "✅ === DEPLOYMENT SUCCESSFUL ==="
          echo "🚀 Preview URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/"
          echo "📦 Source: Linux HTML build"
          echo "🔧 Method: ${{ needs.build-config.outputs.build_method }}"

  # Step 6: Final results and summary
  validation-summary:
    name: '🎯 Validation Summary'
    if: always()
    needs: [pre-commit, build-config, collect-results, deploy-preview]
    runs-on: ubuntu-latest
    
    steps:
      - name: 🎯 Generate validation summary
        run: |
          echo "🎯 === VALIDATION SUMMARY ==="
          echo "=============================="
          echo ""
          
          # Visual status indicators
          echo "🔍 RESULTS:"
          echo "----------"
          
          if [ "${{ needs.pre-commit.result }}" = "success" ]; then
            echo "✅ Pre-commit checks: PASSED"
          else
            echo "❌ Pre-commit checks: FAILED"
          fi
          
          if [ "${{ needs.build-config.outputs.build_linux }}" = "true" ]; then
            if [ "${{ needs.collect-results.outputs.linux_success }}" = "true" ]; then
              echo "✅ Linux build: PASSED"
            else
              echo "❌ Linux build: FAILED"
            fi
          else
            echo "⏭️ Linux build: SKIPPED"
          fi
          
          if [ "${{ needs.build-config.outputs.build_windows }}" = "true" ]; then
            if [ "${{ needs.collect-results.outputs.windows_success }}" = "true" ]; then
              echo "✅ Windows build: PASSED"
            else
              echo "❌ Windows build: FAILED"
            fi
          else
            echo "⏭️ Windows build: SKIPPED"
          fi
          
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "✅ Preview deployment: PASSED"
          elif [ "${{ needs.deploy-preview.result }}" = "skipped" ]; then
            echo "⏭️ Preview deployment: SKIPPED"
          else
            echo "❌ Preview deployment: FAILED"
          fi
          
          echo ""
          echo "🎯 OVERALL STATUS:"
          echo "-----------------"
          
          # Determine overall success
          PRECOMMIT_OK="${{ needs.pre-commit.result == 'success' }}"
          LINUX_OK="${{ needs.collect-results.outputs.linux_success == 'true' || needs.build-config.outputs.build_linux == 'false' }}"
          WINDOWS_OK="${{ needs.collect-results.outputs.windows_success == 'true' || needs.build-config.outputs.build_windows == 'false' }}"
          
          if [ "$PRECOMMIT_OK" = "true" ] && [ "$LINUX_OK" = "true" ] && [ "$WINDOWS_OK" = "true" ]; then
            echo "🟢 VALIDATION: FULLY OPERATIONAL ✅"
            echo "   All enabled checks passed successfully!"
            if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
              echo "🚀 PREVIEW: DEPLOYED ✅"
              echo "   Check the staging site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/"
            fi
          else
            echo "🔴 VALIDATION: ISSUES DETECTED ❌"
            echo "   Check the logs above for details"
          fi
          echo "=============================="

      - name: 📋 Generate GitHub summary
        run: |
          echo "# 🎯 Enhanced Dev Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-commit**: ${{ needs.pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux Build**: ${{ needs.collect-results.outputs.linux_success == 'true' && '✅ success' || '❌ failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows Build**: ${{ needs.collect-results.outputs.windows_success == 'true' && '✅ success' || '❌ failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Deploy**: ${{ needs.deploy-preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Build Configuration" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "- **Trigger**: Automatic (dev branch push)" >> $GITHUB_STEP_SUMMARY
            echo "- **Format**: HTML + PDF (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **OS**: Linux + Windows (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: 🔄 Both container and baremetal builds (default for auto-push)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
            echo "- **HTML**: ${{ inputs.build_html }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PDF**: ${{ inputs.build_pdf }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Linux**: ${{ inputs.build_linux }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Windows**: ${{ inputs.build_windows }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.build_method }}" = "baremetal" ]; then
              echo "- **Method**: ⚠️ Baremetal builds (LEGACY - deprecated)" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ inputs.build_method }}" = "both" ]; then
              echo "- **Method**: 🔄 Both container and baremetal builds" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Method**: ✅ Container builds (recommended)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- **Registry**: ${{ needs.build-config.outputs.container_registry }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ needs.build-config.outputs.container_tag }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "## 🚀 Preview Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/" >> $GITHUB_STEP_SUMMARY
            echo "- **Source**: Linux HTML build" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Summary" >> $GITHUB_STEP_SUMMARY
          LINUX_OK="${{ needs.collect-results.outputs.linux_success == 'true' || needs.build-config.outputs.build_linux == 'false' }}"
          WINDOWS_OK="${{ needs.collect-results.outputs.windows_success == 'true' || needs.build-config.outputs.build_windows == 'false' }}"
          
          if [ "${{ needs.pre-commit.result }}" = "success" ] && [ "$LINUX_OK" = "true" ] && [ "$WINDOWS_OK" = "true" ]; then
            echo "✅ **Validation Passed** - All enabled builds successful" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
              echo "🚀 **Preview Deployed** - Check the staging site" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Validation Failed** - Check the logs above" >> $GITHUB_STEP_SUMMARY
          fi