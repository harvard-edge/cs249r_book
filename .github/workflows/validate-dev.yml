name: '💯 Validate Dev'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7
  # Centralized Container Configuration - Single Source of Truth
  CONTAINER_REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  CONTAINER_TAG: ${{ inputs.container_tag || 'latest' }}
  LINUX_CONTAINER_NAME: ${{ inputs.linux_container_name || 'quarto-linux' }}
  WINDOWS_CONTAINER_NAME: ${{ inputs.windows_container_name || 'quarto-windows' }}
  # Computed full image names
  LINUX_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.linux_container_name || 'quarto-linux' }}:${{ inputs.container_tag || 'latest' }}
  WINDOWS_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.windows_container_name || 'quarto-windows' }}:${{ inputs.container_tag || 'latest' }}

# Cancel duplicate builds on same branch
concurrency:
  group: enhanced-manager-${{ github.ref }}
  cancel-in-progress: true

# Development validation with smart container handling
# Triggers automatically on dev branch pushes
# Can be tested manually from any branch using workflow_dispatch
on:
  # DISABLED: Auto-trigger while working on containers
  # push:
  #   branches: [dev]  # 🚀 Auto-trigger for dev branch validation
  workflow_dispatch:  # 🚦 Manual trigger for testing
    inputs:
      force_container_rebuild:
        description: 'Force container rebuild even if up-to-date'
        required: false
        default: false
        type: boolean
      no_cache:
        description: 'Disable Docker build cache (fresh container builds)'
        required: false
        default: false
        type: boolean
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      build_format:
        description: 'Format to build for testing'
        required: false
        default: 'html'
        type: choice
        options:
          - html
          - pdf
          - all
      build_os:
        description: 'Operating systems to build on'
        required: false
        default: 'linux'
        type: choice
        options:
          - linux
          - windows
          - both
      use_containers:
        description: 'Use pre-built containers for faster builds'
        required: false
        default: false
        type: boolean
      linux_container_name:
        description: 'Linux container image name'
        required: false
        default: 'quarto-linux'
        type: string
      windows_container_name:
        description: 'Windows container image name'
        required: false
        default: 'quarto-windows'
        type: string
      container_registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      container_tag:
        description: 'Container tag to use'
        required: false
        default: 'latest'
        type: string
  workflow_call:  # 📞 Called by publish-live workflow
    inputs:
      build_format:
        required: false
        type: string
        default: 'all'
        description: 'Format to build (html/pdf/all)'
      build_os:
        required: false
        type: string
        default: 'linux'
        description: 'Operating systems to build on (linux/windows/both)'
      use_containers:
        required: false
        type: boolean
        default: true
        description: 'Use pre-built containers for faster builds'
      test_branch:
        required: false
        type: string
        default: ''
        description: 'Branch to test (empty for current branch)'
      force_container_rebuild:
        required: false
        type: boolean
        default: false
        description: 'Force container rebuild even if up-to-date'
      no_cache:
        required: false
        type: boolean
        default: false
        description: 'Disable Docker build cache (fresh container builds)'
      linux_container_name:
        required: false
        type: string
        default: 'quarto-linux'
        description: 'Linux container image name'
      windows_container_name:
        required: false
        type: string
        default: 'quarto-windows'
        description: 'Windows container image name'
      container_registry:
        required: false
        type: string
        default: 'ghcr.io'
        description: 'Container registry URL'
      container_tag:
        required: false
        type: string
        default: 'latest'
        description: 'Container tag to use'

jobs:
  # Step 1: Check container health and availability
  container-health-check:
    name: 🔍 Container Health Check
    uses: ./.github/workflows/container-health-check.yml
    with:
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}
      linux_container_name: ${{ inputs.linux_container_name || 'quarto-linux' }}
      windows_container_name: ${{ inputs.windows_container_name || 'quarto-windows' }}
      quick_check: false  # Run full health check including functional tests

  # Step 2: Build containers if needed
  ensure-linux-container:
    name: 🐳 Ensure Linux Container
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-linux-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_name: ${{ inputs.linux_container_name || 'quarto-linux' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}

  ensure-windows-container:
    name: 🐳 Ensure Windows Container  
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-windows-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_name: ${{ inputs.windows_container_name || 'quarto-windows' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}

  # Step 3: Pre-flight checks (keeping existing quality gates)
  pre-commit:
    name: 🧹 Pre-commit Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: Install system dependencies for pre-commit hooks
        run: |
          python -m pip install yamllint
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run pre-commit hooks
        run: |
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 4: Smart build orchestration
  smart-build:
    name: 🧠 Smart Build
    needs: [container-health-check, ensure-linux-container, ensure-windows-container, pre-commit]
    if: always() && !failure()
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            format: '${{ inputs.build_format || ''html'' }}'
            enabled: ${{ inputs.build_os == 'linux' || inputs.build_os == 'both' }}
          - os: windows-latest  
            format: '${{ inputs.build_format || ''html'' }}'
            enabled: ${{ inputs.build_os == 'windows' || inputs.build_os == 'both' }}
    runs-on: ubuntu-latest
    steps:
      - name: 🎯 Determine build strategy
        id: strategy
        if: matrix.enabled == 'true'
        run: |
          echo "🧠 Determining optimal build strategy..."
          
          CONTAINER_STRATEGY="${{ needs.container-health-check.outputs.container-strategy }}"
          LINUX_AVAILABLE="${{ needs.container-health-check.outputs.linux-container-healthy }}"
          WINDOWS_AVAILABLE="${{ needs.container-health-check.outputs.windows-container-healthy }}"
          
          # Determine which workflow to use
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "$LINUX_AVAILABLE" = "true" ]; then
            WORKFLOW="quarto-build-container"
            BUILD_TYPE="🐳 Container Build"
          elif [ "${{ matrix.os }}" = "windows-latest" ] && [ "$WINDOWS_AVAILABLE" = "true" ]; then
            WORKFLOW="quarto-build-container"  # When Windows containers are ready
            BUILD_TYPE="🐳 Container Build"
          else
            WORKFLOW="quarto-build-baremetal"
            BUILD_TYPE="🖥️ Baremetal Build (no container)"
          fi
          
          echo "workflow=$WORKFLOW" >> $GITHUB_OUTPUT
          echo "build-type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          
          echo "📊 Build Strategy for ${{ matrix.os }}:"
          echo "  Workflow: $WORKFLOW"
          echo "  Type: $BUILD_TYPE"
          echo "  Container available: $LINUX_AVAILABLE (Linux), $WINDOWS_AVAILABLE (Windows)"

      - name: 🚀 Trigger Container Build (Linux)
        if: matrix.enabled == 'true' && matrix.os == 'ubuntu-latest' && inputs.use_containers == true && needs.container-health-check.outputs.linux-container-healthy == 'true'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          environment: development
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: ${{ inputs.test_branch && 'dev' || (github.ref == 'refs/heads/main' && 'main' || 'dev') }}
          html_artifact_name: mlsysbook-html-linux
          pdf_artifact_name: mlsysbook-pdf-linux
          
      - name: 🚀 Trigger Container Build (Windows) 
        if: matrix.enabled == 'true' && matrix.os == 'windows-latest' && inputs.use_containers == true && needs.container-health-check.outputs.windows-container-healthy == 'true'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          environment: development
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: ${{ inputs.test_branch && 'dev' || (github.ref == 'refs/heads/main' && 'main' || 'dev') }}
          html_artifact_name: mlsysbook-html-windows
          pdf_artifact_name: mlsysbook-pdf-windows
          
      - name: 🖥️ Trigger Baremetal Build (Fallback)
        if: matrix.enabled == 'true' && (inputs.use_containers != true || (matrix.os == 'ubuntu-latest' && needs.container-health-check.outputs.linux-container-healthy != 'true') || (matrix.os == 'windows-latest' && needs.container-health-check.outputs.windows-container-healthy != 'true'))
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          environment: development
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: ${{ inputs.test_branch && 'dev' || (github.ref == 'refs/heads/main' && 'main' || 'dev') }}

  # Step 5: Results and reporting
  build-report:
    name: 📊 Build Report
    if: always()
    needs: [container-health-check, ensure-linux-container, ensure-windows-container, pre-commit, smart-build]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Generate comprehensive report
        run: |
          echo "# 🧠 Enhanced Build Manager Report" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Health Status" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Container: ${{ needs.container-health-check.outputs.linux-container-healthy == 'true' && '✅ Healthy' || '❌ Unhealthy' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Container: ${{ needs.container-health-check.outputs.windows-container-healthy == 'true' && '✅ Healthy' || '❌ Unhealthy' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rebuild Needed: ${{ needs.container-health-check.outputs.containers-need-rebuild == 'true' && '🔧 Yes' || '✅ No' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Strategy: ${{ needs.container-health-check.outputs.container-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Tools: ${{ needs.container-health-check.outputs.linux-tools-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Tools: ${{ needs.container-health-check.outputs.windows-tools-status }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Container Building" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Build: ${{ needs.ensure-linux-container.result == 'success' && '✅ Success' || needs.ensure-linux-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Build: ${{ needs.ensure-windows-container.result == 'success' && '✅ Success' || needs.ensure-windows-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🏗️ Content Building" >> $GITHUB_STEP_SUMMARY
          echo "- Smart Build: ${{ needs.smart-build.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit: ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 📈 Performance Benefits" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.container-health-check.outputs.linux-container-healthy }}" = "true" ]; then
            echo "- ⚡ Using fast container builds (5-10 min)" >> $GITHUB_STEP_SUMMARY
            echo "- 🛠️ All critical tools verified and working" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🐌 Using traditional builds (45 min)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Container health check failed - rebuilding containers" >> $GITHUB_STEP_SUMMARY
          fi
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Completed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
