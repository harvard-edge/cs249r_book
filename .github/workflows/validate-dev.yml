name: '💯 Validate Dev'

# Enhanced dev workflow: validate + build + preview deployment
# Replaces complex container orchestration with simple, reliable build calls

env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: validate-dev-${{ github.ref }}
  cancel-in-progress: true

# Triggers: dev branch pushes and manual testing
on:
  push:
    branches: [dev]  # Auto-trigger for dev branch
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      # Format selection checkboxes
      build_html:
        description: '📄 Build HTML format'
        required: false
        default: true
        type: boolean
      build_pdf:
        description: '📑 Build PDF format'
        required: false
        default: true
        type: boolean
      # OS selection checkboxes  
      build_linux:
        description: '🐧 Build on Linux'
        required: false
        default: true
        type: boolean
      build_windows:
        description: '🪟 Build on Windows'
        required: false
        default: true
        type: boolean
      # Build method selection
      build_method:
        description: 'Build method to use'
        required: false
        default: 'container'
        type: choice
        options:
          - container
          - baremetal_legacy
      deploy_preview:
        description: '🚀 Deploy preview to staging'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write

jobs:
  # Step 1: Pre-commit validation
  pre-commit:
    name: '🔍 Pre-commit Checks'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 🔍 Run pre-commit checks
        run: |
          echo "🔍 Installing and running pre-commit..."
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 2a: Build Linux - conditional based on inputs
  build-linux:
    name: '🐧 Build Linux'
    needs: [pre-commit]
    if: github.event_name == 'push' || inputs.build_linux == true
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.container-build.outputs.build_success || steps.baremetal-build.outputs.build_success }}
      html_artifact: ${{ steps.container-build.outputs.html_artifact || steps.baremetal-build.outputs.html_artifact }}
      pdf_artifact: ${{ steps.container-build.outputs.pdf_artifact || steps.baremetal-build.outputs.pdf_artifact }}
      build_method: ${{ steps.container-build.outputs.build_success && 'container' || 'baremetal' }}
    
    steps:
      - name: 🎯 Determine build format
        id: format
        run: |
          # Determine format based on inputs (default to 'all' for push events)
          if [ "${{ github.event_name }}" = "push" ]; then
            # Auto-trigger: build everything
            FORMAT="all"
          else
            # Manual trigger: respect checkboxes
            BUILD_HTML="${{ inputs.build_html }}"
            BUILD_PDF="${{ inputs.build_pdf }}"
            
            if [ "$BUILD_HTML" = "true" ] && [ "$BUILD_PDF" = "true" ]; then
              FORMAT="all"
            elif [ "$BUILD_HTML" = "true" ]; then
              FORMAT="html"
            elif [ "$BUILD_PDF" = "true" ]; then
              FORMAT="pdf"
            else
              echo "❌ No formats selected!"
              exit 1
            fi
          fi
          
          echo "format=$FORMAT" >> $GITHUB_OUTPUT
          echo "📊 Building format: $FORMAT"

      - name: 🚀 Container Build
        id: container-build
        if: github.event_name == 'push' || inputs.build_method == 'container'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: ubuntu-latest
          format: ${{ steps.format.outputs.format }}
          target: dev

      - name: ⚠️ LEGACY Baremetal Build
        id: baremetal-build
        if: github.event_name == 'workflow_dispatch' && inputs.build_method == 'baremetal_legacy'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: ubuntu-latest
          format: ${{ steps.format.outputs.format }}
          target: dev

  # Step 2b: Build Windows - conditional based on inputs
  build-windows:
    name: '🪟 Build Windows'
    needs: [pre-commit]
    if: github.event_name == 'push' || inputs.build_windows == true
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.container-build.outputs.build_success || steps.baremetal-build.outputs.build_success }}
      html_artifact: ${{ steps.container-build.outputs.html_artifact || steps.baremetal-build.outputs.html_artifact }}
      pdf_artifact: ${{ steps.container-build.outputs.pdf_artifact || steps.baremetal-build.outputs.pdf_artifact }}
      build_method: ${{ steps.container-build.outputs.build_success && 'container' || 'baremetal' }}
    
    steps:
      - name: 🎯 Determine build format
        id: format
        run: |
          # Determine format based on inputs (default to 'all' for push events)
          if [ "${{ github.event_name }}" = "push" ]; then
            # Auto-trigger: build everything
            FORMAT="all"
          else
            # Manual trigger: respect checkboxes
            BUILD_HTML="${{ inputs.build_html }}"
            BUILD_PDF="${{ inputs.build_pdf }}"
            
            if [ "$BUILD_HTML" = "true" ] && [ "$BUILD_PDF" = "true" ]; then
              FORMAT="all"
            elif [ "$BUILD_HTML" = "true" ]; then
              FORMAT="html"
            elif [ "$BUILD_PDF" = "true" ]; then
              FORMAT="pdf"
            else
              echo "❌ No formats selected!"
              exit 1
            fi
          fi
          
          echo "format=$FORMAT" >> $GITHUB_OUTPUT
          echo "📊 Building format: $FORMAT"

      - name: 🚀 Container Build
        id: container-build
        if: github.event_name == 'push' || inputs.build_method == 'container'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: windows-latest
          format: ${{ steps.format.outputs.format }}
          target: dev

      - name: ⚠️ LEGACY Baremetal Build
        id: baremetal-build
        if: github.event_name == 'workflow_dispatch' && inputs.build_method == 'baremetal_legacy'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: windows-latest
          format: ${{ steps.format.outputs.format }}
          target: dev

  # Step 3: Deploy preview to staging (dev branch only)
  deploy-preview:
    name: '🚀 Deploy Preview'
    needs: [build-linux, build-windows]
    if: |
      always() && 
      needs.build-linux.outputs.build_success == 'true' && 
      needs.build-linux.outputs.html_artifact != '' &&
      (github.ref == 'refs/heads/dev' || inputs.deploy_preview == true)
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/
      
    steps:
      - name: 📥 Download HTML artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-linux.outputs.html_artifact }}
          path: ./preview-site
          
      - name: 🚀 Deploy to GitHub Pages (dev staging)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-site
          destination_dir: dev
          keep_files: false
          commit_message: |
            🚀 Deploy dev preview from ${{ github.sha }}
            
            Built using: ${{ needs.build-linux.outputs.build_method }}
            Artifact: ${{ needs.build-linux.outputs.html_artifact }}
            Branch: ${{ github.ref_name }}

  # Step 4: Results and summary
  build-report:
    name: '📊 Build Report'
    if: always()
    needs: [pre-commit, build-linux, build-windows, deploy-preview]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Generate build summary
        run: |
          echo "# 🎯 Enhanced Dev Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-commit**: ${{ needs.pre-commit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux Build**: ${{ needs.build-linux.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows Build**: ${{ needs.build-windows.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview Deploy**: ${{ needs.deploy-preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Build Configuration" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "- **Trigger**: Automatic (dev branch push)" >> $GITHUB_STEP_SUMMARY
            echo "- **Format**: HTML + PDF (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **OS**: Linux + Windows (mandatory)" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: ✅ Container builds (default for auto-push)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
            echo "- **HTML**: ${{ inputs.build_html }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PDF**: ${{ inputs.build_pdf }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Linux**: ${{ inputs.build_linux }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Windows**: ${{ inputs.build_windows }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.build_method }}" = "baremetal_legacy" ]; then
              echo "- **Method**: ⚠️ Baremetal builds (LEGACY - deprecated)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Method**: ✅ Container builds (recommended)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-linux.outputs.build_success }}" = "true" ]; then
            echo "## ✅ Linux Build Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: ${{ needs.build-linux.outputs.build_method }}" >> $GITHUB_STEP_SUMMARY
            echo "- **HTML Artifact**: ${{ needs.build-linux.outputs.html_artifact }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PDF Artifact**: ${{ needs.build-linux.outputs.pdf_artifact }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-windows.outputs.build_success }}" = "true" ]; then
            echo "## ✅ Windows Build Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: ${{ needs.build-windows.outputs.build_method }}" >> $GITHUB_STEP_SUMMARY
            echo "- **HTML Artifact**: ${{ needs.build-windows.outputs.html_artifact }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PDF Artifact**: ${{ needs.build-windows.outputs.pdf_artifact }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🚀 Preview Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev/" >> $GITHUB_STEP_SUMMARY
            echo "- **Source**: Linux HTML build" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Summary" >> $GITHUB_STEP_SUMMARY
          LINUX_OK="${{ needs.build-linux.result == 'success' || needs.build-linux.result == 'skipped' }}"
          WINDOWS_OK="${{ needs.build-windows.result == 'success' || needs.build-windows.result == 'skipped' }}"
          
          if [ "${{ needs.pre-commit.result }}" = "success" ] && [ "$LINUX_OK" = "true" ] && [ "$WINDOWS_OK" = "true" ]; then
            echo "✅ **Validation Passed** - All enabled builds successful" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
              echo "🚀 **Preview Deployed** - Check the staging site" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Validation Failed** - Check the logs above" >> $GITHUB_STEP_SUMMARY
          fi