name: '💯 Validate (Dev) Branch'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7
  # Centralized Container Configuration - Single Source of Truth
  CONTAINER_REGISTRY: ${{ inputs.container_registry || 'ghcr.io' }}
  CONTAINER_TAG: ${{ inputs.container_tag || 'latest' }}
  LINUX_CONTAINER_NAME: ${{ inputs.linux_container_name || 'quarto-linux' }}
  WINDOWS_CONTAINER_NAME: ${{ inputs.windows_container_name || 'quarto-windows' }}
  # Computed full image names
  LINUX_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.linux_container_name || 'quarto-linux' }}:${{ inputs.container_tag || 'latest' }}
  WINDOWS_IMAGE: ${{ inputs.container_registry || 'ghcr.io' }}/${{ github.repository }}/${{ inputs.windows_container_name || 'quarto-windows' }}:${{ inputs.container_tag || 'latest' }}

# Cancel duplicate builds on same branch
concurrency:
  group: enhanced-manager-${{ github.ref }}
  cancel-in-progress: true

# Development validation with smart container handling
# Triggers automatically on dev branch pushes
# Can be tested manually from any branch using workflow_dispatch
on:
  # DISABLED: Auto-trigger while working on containers
  # push:
  #   branches: [dev]  # 🚀 Auto-trigger for dev branch validation
  workflow_dispatch:  # 🚦 Manual trigger for testing
    inputs:
      force_container_rebuild:
        description: 'Force container rebuild even if up-to-date'
        required: false
        default: false
        type: boolean
      no_cache:
        description: 'Disable Docker build cache (fresh container builds)'
        required: false
        default: false
        type: boolean
      test_branch:
        description: 'Branch to test (for feature branch testing)'
        required: false
        default: ''
        type: string
      build_format:
        description: 'Format to validate'
        required: false
        default: 'both'
        type: choice
        options:
          - html
          - pdf
          - both
      build_os:
        description: 'Platforms to validate (linux for fast debugging)'
        required: false
        default: 'both'
        type: choice
        options:
          - linux
          - windows
          - both
  workflow_call:  # 📞 Called by publish-live workflow
    inputs:
      build_format:
        required: false
        type: string
        default: 'both'
        description: 'Format to validate (html/pdf/both)'
      build_os:
        required: false
        type: string
        default: 'both'
        description: 'Platforms to validate (linux/windows/both)'

    outputs:
      validation-status:
        description: "Overall validation status (success/failure)"
        value: ${{ jobs.validation-summary.outputs.status }}
      container-strategy:
        description: "Container strategy used (container/baremetal/hybrid)"
        value: ${{ jobs.container-health-check.outputs.container-strategy }}
      build-results:
        description: "Build results summary"
        value: ${{ jobs.validation-summary.outputs.build-results }}
      containers-healthy:
        description: "Whether containers are healthy and usable"
        value: ${{ jobs.container-health-check.outputs.containers-need-rebuild == 'false' }}

jobs:
  # Step 1: Check container health and availability
  container-health-check:
    name: 🔍 Container Health Check
    uses: ./.github/workflows/container-health-check.yml
    with:
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}
      linux_container_name: ${{ inputs.linux_container_name || 'quarto-linux' }}
      windows_container_name: ${{ inputs.windows_container_name || 'quarto-windows' }}
      quick_check: false  # Run full health check including functional tests

  # Step 2: Build containers if needed
  ensure-linux-container:
    name: 🐳 Ensure Linux Container
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-linux-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_name: ${{ inputs.linux_container_name || 'quarto-linux' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}

  ensure-windows-container:
    name: 🐳 Ensure Windows Container  
    if: needs.container-health-check.outputs.containers-need-rebuild == 'true'
    needs: container-health-check
    uses: ./.github/workflows/build-windows-container.yml
    with:
      force_rebuild: ${{ inputs.force_container_rebuild }}
      no_cache: ${{ inputs.no_cache }}
      container_registry: ${{ inputs.container_registry || 'ghcr.io' }}
      container_name: ${{ inputs.windows_container_name || 'quarto-windows' }}
      container_tag: ${{ inputs.container_tag || 'latest' }}

  # Step 3: Pre-flight checks (keeping existing quality gates)
  pre-commit:
    name: 🧹 Pre-commit Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.test_branch || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: Install system dependencies for pre-commit hooks
        run: |
          python -m pip install yamllint
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run pre-commit hooks
        run: |
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 4: Matrix validation builds
  validation-builds:
    name: 🚀 Validate ${{ matrix.format }} on ${{ matrix.os_name }}
    needs: [container-health-check, ensure-linux-container, ensure-windows-container]
    if: always() && !failure()
    strategy:
      fail-fast: false
      matrix:
        include:
          # Generate matrix based on inputs
          - format: html
            os: ubuntu-latest
            os_name: linux
            enabled: ${{ inputs.build_format == 'html' || inputs.build_format == 'both' }}
            os_enabled: ${{ inputs.build_os == 'linux' || inputs.build_os == 'both' }}
          - format: pdf  
            os: ubuntu-latest
            os_name: linux
            enabled: ${{ inputs.build_format == 'pdf' || inputs.build_format == 'both' }}
            os_enabled: ${{ inputs.build_os == 'linux' || inputs.build_os == 'both' }}
          - format: html
            os: windows-latest
            os_name: windows
            enabled: ${{ inputs.build_format == 'html' || inputs.build_format == 'both' }}
            os_enabled: ${{ inputs.build_os == 'windows' || inputs.build_os == 'both' }}
          - format: pdf
            os: windows-latest  
            os_name: windows
            enabled: ${{ inputs.build_format == 'pdf' || inputs.build_format == 'both' }}
            os_enabled: ${{ inputs.build_os == 'windows' || inputs.build_os == 'both' }}
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check if this matrix job should run
        id: should-run
        run: |
          # Only run if both format and OS are enabled
          if [ "${{ matrix.enabled }}" = "true" ] && [ "${{ matrix.os_enabled }}" = "true" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "✅ Running validation: ${{ matrix.format }} on ${{ matrix.os_name }}"
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping: ${{ matrix.format }} on ${{ matrix.os_name }}"
          fi

      - name: 🎯 Determine build strategy  
        id: strategy
        if: steps.should-run.outputs.enabled == 'true'
        run: |
          # Choose workflow based on container availability
          LINUX_HEALTHY="${{ needs.container-health-check.outputs.linux-container-healthy }}"
          WINDOWS_HEALTHY="${{ needs.container-health-check.outputs.windows-container-healthy }}"
          
          if [ "${{ matrix.os_name }}" = "linux" ] && [ "$LINUX_HEALTHY" = "true" ]; then
            WORKFLOW="container"
            echo "🐳 Using Linux container for fast build"
          elif [ "${{ matrix.os_name }}" = "windows" ] && [ "$WINDOWS_HEALTHY" = "true" ]; then
            WORKFLOW="container" 
            echo "🐳 Using Windows container for fast build"
          else
            WORKFLOW="baremetal"
            echo "🖥️ Using baremetal build (container not available)"
          fi
          
          echo "workflow=$WORKFLOW" >> $GITHUB_OUTPUT
          echo "📊 ${{ matrix.format }} on ${{ matrix.os_name }}: $WORKFLOW build"

      - name: 🚀 Build with Container
        if: steps.should-run.outputs.enabled == 'true' && steps.strategy.outputs.workflow == 'container'
        uses: ./.github/workflows/quarto-build-container.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: dev
          
      - name: 🖥️ Build with Baremetal  
        if: steps.should-run.outputs.enabled == 'true' && steps.strategy.outputs.workflow == 'baremetal'
        uses: ./.github/workflows/quarto-build-baremetal.yml
        with:
          os: ${{ matrix.os }}
          format: ${{ matrix.format }}
          target: dev

  # Step 5: Deploy Linux HTML to gh-pages
  deploy-gh-pages:
    name: 🚀 Deploy to GitHub Pages
    needs: [validation-builds]
    # Only deploy Linux HTML build when it succeeds
    if: github.ref == 'refs/heads/dev' && needs.validation-builds.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: 📄 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # Deploy the Linux HTML artifact (will be available from matrix build)
          artifact_name: dev-html-linux

  # Step 6: Pre-commit checks
  pre-commit:
    name: 🔍 Pre-commit Checks
    needs: [validation-builds]
    if: always() && !failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run pre-commit hooks
        run: |
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 7: Results and reporting
  build-report:
    name: 📊 Build Report
    if: always()
    needs: [container-health-check, ensure-linux-container, ensure-windows-container, validation-builds, pre-commit]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Generate comprehensive report
        run: |
          echo "# 🧠 Enhanced Build Manager Report" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Health Status" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Container: ${{ needs.container-health-check.outputs.linux-container-healthy == 'true' && '✅ Healthy' || '❌ Unhealthy' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Container: ${{ needs.container-health-check.outputs.windows-container-healthy == 'true' && '✅ Healthy' || '❌ Unhealthy' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rebuild Needed: ${{ needs.container-health-check.outputs.containers-need-rebuild == 'true' && '🔧 Yes' || '✅ No' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Strategy: ${{ needs.container-health-check.outputs.container-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Tools: ${{ needs.container-health-check.outputs.linux-tools-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Tools: ${{ needs.container-health-check.outputs.windows-tools-status }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Container Building" >> $GITHUB_STEP_SUMMARY
          echo "- Linux Build: ${{ needs.ensure-linux-container.result == 'success' && '✅ Success' || needs.ensure-linux-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Build: ${{ needs.ensure-windows-container.result == 'success' && '✅ Success' || needs.ensure-windows-container.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🏗️ Content Building" >> $GITHUB_STEP_SUMMARY
          echo "- Smart Build: ${{ needs.smart-build.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit: ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 📈 Performance Benefits" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.container-health-check.outputs.linux-container-healthy }}" = "true" ]; then
            echo "- ⚡ Using fast container builds (5-10 min)" >> $GITHUB_STEP_SUMMARY
            echo "- 🛠️ All critical tools verified and working" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🐌 Using traditional builds (45 min)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Container health check failed - rebuilding containers" >> $GITHUB_STEP_SUMMARY
          fi
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Completed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  # Final validation summary with outputs
  validation-summary:
    name: 📊 Validation Summary
    needs: [container-health-check, ensure-linux-container, ensure-windows-container, validation-builds, pre-commit]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.summary.outputs.status }}
      build-results: ${{ steps.summary.outputs.build-results }}
    
    steps:
      - name: 📊 Generate validation summary
        id: summary
        run: |
          # Determine overall validation status
          CONTAINER_CHECK="${{ needs.container-health-check.result }}"
          VALIDATION_BUILDS="${{ needs.validation-builds.result }}"
          PRECOMMIT="${{ needs.pre-commit.result }}"
          
          # Overall status logic
          if [ "$VALIDATION_BUILDS" = "success" ] && [ "$PRECOMMIT" = "success" ]; then
            STATUS="success"
          else
            STATUS="failure"
          fi
          
          # Build results summary
          BUILD_RESULTS=""
          if [ "$VALIDATION_BUILDS" = "success" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}✅ Matrix Builds: Success"
          else
            BUILD_RESULTS="${BUILD_RESULTS}❌ Matrix Builds: Failed"
          fi
          
          if [ "$PRECOMMIT" = "success" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}, ✅ Pre-commit: Passed"
          else
            BUILD_RESULTS="${BUILD_RESULTS}, ❌ Pre-commit: Failed"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "build-results=$BUILD_RESULTS" >> $GITHUB_OUTPUT
          
          echo "📊 Validation Status: $STATUS"
          echo "📋 Build Results: $BUILD_RESULTS"
