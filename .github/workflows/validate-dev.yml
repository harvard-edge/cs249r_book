name: '💯 Validate (Dev) Branch'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: validate-dev-${{ github.ref }}
  cancel-in-progress: true

# Simplified development validation without container dependencies
# Triggers automatically on dev branch pushes
# Can be tested manually from any branch using workflow_dispatch
on:
  push:
    branches: [dev]  # 🚀 Auto-trigger for dev branch validation
  workflow_dispatch:  # 🚦 Manual trigger for testing
    inputs:
      build_format:
        description: 'Format to validate'
        required: false
        default: 'both'
        type: choice
        options:
          - html
          - pdf
          - both
      build_os:
        description: 'Operating system to validate'
        required: false
        default: 'both'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - both
  workflow_call:  # 📞 Called by publish-live workflow
    inputs:
      build_format:
        required: false
        type: string
        default: 'both'
        description: 'Format to validate (html/pdf/both)'
      build_os:
        required: false
        type: string
        default: 'both'
        description: 'Platforms to validate (linux/windows/both)'

    outputs:
      validation-status:
        description: "Overall validation status (success/failure)"
        value: ${{ jobs.validation-summary.outputs.status }}
      build-results:
        description: "Build results summary"
        value: ${{ jobs.validation-summary.outputs.build-results }}

jobs:
  # Step 1: Pre-commit quality checks
  pre-commit:
    name: 🧹 Pre-commit Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: Install system dependencies for pre-commit hooks
        run: |
          python -m pip install yamllint
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install and run pre-commit hooks
        run: |
          pre-commit install --install-hooks
          pre-commit run --all-files

  # Step 2: Link checks
  link-check:
    name: 🔗 Link Check
    uses: ./.github/workflows/link-check.yml
    with:
      path_pattern: './contents/**/*.qmd'
      max_concurrency: 10

  # Step 3: Matrix validation builds
  validation-builds:
    name: 🚀 Validate ${{ matrix.format }} on ${{ matrix.os_name }}
    needs: [pre-commit, link-check]
    if: |
      always() && !failure() && 
      (
        (inputs.build_format == matrix.format || inputs.build_format == 'both' || inputs.build_format == '') &&
        (inputs.build_os == matrix.os || inputs.build_os == 'both' || inputs.build_os == '')
      )
    strategy:
      fail-fast: false
      matrix:
        include:
          # All possible combinations - filtering handled by if condition
          - format: html
            os: ubuntu-latest
            os_name: linux
          - format: pdf  
            os: ubuntu-latest
            os_name: linux
          - format: html
            os: windows-latest
            os_name: windows
          - format: pdf
            os: windows-latest  
            os_name: windows
    uses: ./.github/workflows/quarto-build-baremetal.yml
    with:
      os: ${{ matrix.os }}
      format: ${{ matrix.format }}
      target: dev
      environment: development

  # Step 4: Deploy Linux HTML to gh-pages
  deploy-gh-pages:
    name: 🚀 Deploy to GitHub Pages (Staging)
    needs: [validation-builds]
    # Only deploy Linux HTML build when it succeeds
    if: github.ref == 'refs/heads/dev' && needs.validation-builds.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: 📄 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # Deploy the Linux HTML artifact (will be available from matrix build)
          artifact_name: dev-html-linux

  # Step 5: Build report
  build-report:
    name: 📊 Build Report
    if: always()
    needs: [pre-commit, link-check, validation-builds]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Generate comprehensive report
        run: |
          echo "# 📊 Validation Report" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🧹 Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit: ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Link Check: ${{ needs.link-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- Matrix Builds: ${{ needs.validation-builds.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Strategy: Baremetal (simplified workflow)" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Completed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  # Final validation summary with outputs
  validation-summary:
    name: 📊 Validation Summary
    needs: [pre-commit, link-check, validation-builds]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.summary.outputs.status }}
      build-results: ${{ steps.summary.outputs.build-results }}
    
    steps:
      - name: 📊 Generate validation summary
        id: summary
        run: |
          # Determine overall validation status
          VALIDATION_BUILDS="${{ needs.validation-builds.result }}"
          PRECOMMIT="${{ needs.pre-commit.result }}"
          LINK_CHECK="${{ needs.link-check.result }}"
          
          # Overall status logic
          if [ "$VALIDATION_BUILDS" = "success" ] && [ "$PRECOMMIT" = "success" ] && [ "$LINK_CHECK" = "success" ]; then
            STATUS="success"
          else
            STATUS="failure"
          fi
          
          # Build results summary
          BUILD_RESULTS=""
          if [ "$VALIDATION_BUILDS" = "success" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}✅ Matrix Builds: Success"
          else
            BUILD_RESULTS="${BUILD_RESULTS}❌ Matrix Builds: Failed"
          fi
          
          if [ "$PRECOMMIT" = "success" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}, ✅ Pre-commit: Passed"
          else
            BUILD_RESULTS="${BUILD_RESULTS}, ❌ Pre-commit: Failed"
          fi

          if [ "$LINK_CHECK" = "success" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}, ✅ Link Check: Passed"
          else
            BUILD_RESULTS="${BUILD_RESULTS}, ❌ Link Check: Failed"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "build-results=$BUILD_RESULTS" >> $GITHUB_OUTPUT
          
          echo "📊 Validation Status: $STATUS"
          echo "📋 Build Results: $BUILD_RESULTS"
