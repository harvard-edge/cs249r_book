name: '📚 Quarto Build HTML'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Build environment (development/production)'
      os:
        required: true
        type: string
        description: 'Operating system to run on (ubuntu-latest)'
      quarto-version:
        required: false
        type: string
        default: '1.7.13'
        description: 'Version of Quarto to use'
      r-version:
        required: false
        type: string
        default: '4.3.2'
        description: 'Version of R to use'
      target:
        required: true
        type: string
        description: 'Target branch (dev/main) - determines build behavior'
    secrets:
      SSH_DEPLOY_KEY:
        required: true
        
permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ${{ inputs.os }}
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 🔍 Validate inputs
        shell: bash
        run: |
          if [[ "${{ inputs.target }}" != "dev" && "${{ inputs.target }}" != "main" ]]; then
            echo "❌ Target must be either 'dev' or 'main'"
            exit 1
          fi
          echo "✅ Input validation passed"

      - name: 📥 Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target }}
          fetch-depth: 0

      # Cache Quarto
      - name: 💾 Cache Quarto
        uses: actions/cache@v3
        id: cache-quarto
        with:
          path: ~/.local/share/quarto
          key: ubuntu-quarto-${{ inputs.quarto-version }}

      - name: 📦 Setup Quarto
        if: steps.cache-quarto.outputs.cache-hit != 'true'
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ inputs.quarto-version }}

      # Setup R (required for Quarto with R code chunks)
      - name: 📊 Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.r-version }}
          use-public-rspm: true

      # Cache R packages
      - name: 💾 Cache R packages
        uses: actions/cache@v3
        id: cache-r-packages
        with:
          path: ~/R/library
          key: ubuntu-r-${{ inputs.r-version }}-quarto-${{ hashFiles('**/renv.lock', '**/DESCRIPTION', '**/install_packages.R') }}
          restore-keys: |
            ubuntu-r-${{ inputs.r-version }}-quarto-
            ubuntu-r-${{ inputs.r-version }}-

      # Check if install_packages.R exists
      - name: 🔍 Check for install_packages.R
        id: check-install-script
        shell: bash
        run: |
          if [ -f "install_packages.R" ]; then
            echo "INSTALL_SCRIPT_EXISTS=true" >> $GITHUB_ENV
            echo "✅ Found install_packages.R script"
          else
            echo "INSTALL_SCRIPT_EXISTS=false" >> $GITHUB_ENV
            echo "⚠️ No install_packages.R script found"
          fi

      # Run the install_packages.R script if it exists
      - name: 📦 Run install_packages.R
        if: env.INSTALL_SCRIPT_EXISTS == 'true'
        shell: Rscript {0}
        run: |
          # Set library path
          lib_path <- "~/R/library"
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Run the custom installation script
          source("install_packages.R")
          
      # Install minimal required packages if no script exists
      - name: 📦 Install Essential Quarto R Packages
        if: env.INSTALL_SCRIPT_EXISTS != 'true'
        shell: Rscript {0}
        run: |
          options(repos = c(CRAN = "https://cran.rstudio.com"))
          
          # Set library path
          lib_path <- "~/R/library"
          dir.create(lib_path, showWarnings = FALSE, recursive = TRUE)
          .libPaths(lib_path)
          
          # Install essential packages
          essential_pkgs <- c("knitr", "rmarkdown", "jsonlite")
          for (pkg in essential_pkgs) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              install.packages(pkg)
            }
          }
          
          # Verify installation
          installed <- vapply(essential_pkgs, requireNamespace, logical(1), quietly = TRUE)
          if (!all(installed)) {
            missing <- essential_pkgs[!installed]
            stop("Failed to install essential packages: ", paste(missing, collapse = ", "))
          }
          
          cat("✅ Essential packages installed and verified\n")

      # Cache compilation artifacts
      - name: 💾 Cache compilation artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/_cache
            **/.quarto
            **/.jupyter_cache
          key: ubuntu-compilation-${{ hashFiles('**/*.qmd', '**/*.ipynb', '**/*.md') }}
          restore-keys: ubuntu-compilation-

      # Print R package info
      - name: 🔍 Print R package info
        shell: Rscript {0}
        run: |
          print("R package details:")
          print(installed.packages()[c("knitr", "rmarkdown"), c("Package", "Version")])
          print(paste("R library paths: ", paste(.libPaths(), collapse = ", ")))
          
          # Check if knitr is available
          if (require("knitr")) {
            print("✅ knitr package is available!")
            print(paste("knitr version:", packageVersion("knitr")))
          } else {
            print("❌ knitr package is NOT available!")
          }

      - name: 🔨 Render Quarto to HTML only
        shell: bash
        run: |
          echo "🔍 Checking Quarto installation..."
          quarto check
          
          echo "📋 Listing installed R packages..."
          Rscript -e "cat('Installed packages:', paste(sort(installed.packages()[,1]), collapse=', '), '\n')"
          Rscript -e "cat('knitr version:', as.character(packageVersion('knitr')), '\n')"
          Rscript -e "cat('rmarkdown version:', as.character(packageVersion('rmarkdown')), '\n')"
          
          echo "🚀 Rendering Quarto documents to HTML..."
          quarto render --to html

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-output
          path: _book

      - name: 🚀 Stage to Dev Site
        if: inputs.target == 'dev'
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: '_book'
          destination-github-username: 'harvard-edge'
          destination-repository-name: 'cs249r_book_dev'
          user-email: khoshnevis.naeem@gmail.com
          target-branch: 'main'
          target-directory: 'docs'
          commit-message: |
            📚 Push dev branch HTML build (light version)

      - name: 📋 Build Summary
        shell: bash
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 📊 HTML-only Quarto Build Summary
          🎯 Target: ${{ inputs.target }}
          💻 OS: ${{ inputs.os }}
          🔧 Environment: ${{ inputs.environment }}
          📚 Quarto Version: ${{ inputs.quarto-version }}
          🔬 R Version: ${{ inputs.r-version }}
          ⏰ Completed at: $(date "+%Y-%m-%d %H:%M:%S")
          EOF