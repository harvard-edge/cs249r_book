name: '🛰️ Deploy (Dev) Preview'

env:
  ARTIFACT_NAME: dev-html-linux # The name of the artifact produced by the 'validate-dev' workflow

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Optional: Specific commit SHA to deploy. Deploys the latest successful `dev` build if empty.'
        required: false
        type: string
  workflow_run:
    workflows: ["💯 Validate Dev"]
    types:
      - completed

concurrency:
  group: deploy-preview-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: '📺 Deploy to GitHub Pages'
    if: (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allow write access to repository
      pages: write
      actions: read # Allow reading of workflow runs
    environment:
      name: development
      url: https://harvard-edge.github.io/cs249r_book_dev/

    steps:
      - name: ⬇️ Get workflow run ID
        id: run_info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "head_sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          COMMIT_SHA="${{ github.event.inputs.commit_sha }}"
          API_URL="repos/${{ github.repository }}/actions/workflows/validate-dev.yml/runs"
          
          if [[ -n "$COMMIT_SHA" ]]; then
            echo "🔎 Searching for successful 'Validate Dev' run for commit starting with: $COMMIT_SHA"
            JQ_QUERY=".workflow_runs[] | select((.head_sha | startswith(\"$COMMIT_SHA\")) and .status == \"completed\" and .conclusion == \"success\") | .id"
          else
            echo "🔎 No commit SHA provided. Searching for the latest successful 'Validate Dev' run on 'dev' branch."
            JQ_QUERY=".workflow_runs[] | select(.head_branch == \"dev\" and .status == \"completed\" and .conclusion == \"success\") | .id"
          fi

          latest_run_id=$(gh api "$API_URL" --jq "$JQ_QUERY" | head -n 1)

          if [ -z "$latest_run_id" ]; then
              if [[ -n "$COMMIT_SHA" ]]; then
                echo "::error::Could not find a successful 'Validate Dev' run for commit ${COMMIT_SHA}."
              else
                echo "::error::Could not find any successful 'Validate Dev' run on the 'dev' branch."
              fi
              exit 1
          fi
          
          echo "Found run ID: ${latest_run_id}"
          echo "run_id=${latest_run_id}" >> $GITHUB_OUTPUT

          latest_run_sha=$(gh api repos/${{ github.repository }}/actions/runs/${latest_run_id} --jq '.head_sha')
          echo "head_sha=${latest_run_sha}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download Preview Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          run-id: ${{ steps.run_info.outputs.run_id }}
          path: ./preview-site
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Create .nojekyll file
        run: touch ./preview-site/.nojekyll

      - name: 📦 Inspect downloaded artifact
        run: |
          echo "::group::Artifact Contents"
          ls -la ./preview-site
          echo "::endgroup::"

      - name: 👀 Deploy to GitHub Pages (dev staging)
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GH_PAT_CROSS_REPO }}
          external_repository: harvard-edge/cs249r_book_dev
          publish_dir: ./preview-site
          publish_branch: main
          destination_dir: docs
          keep_files: false
          commit_message: |
            🚀 Deploy dev preview from ${{ steps.run_info.outputs.head_sha }}
            
            Triggered by workflow run: ${{ steps.run_info.outputs.run_id }}
