name: 'üìã Build Manager'

# Set retention period to 7 days
env:
  GITHUB_ACTIONS_RETENTION_DAYS: 7

# Cancel duplicate builds on same branch
concurrency:
  group: controller-${{ github.ref }}
  cancel-in-progress: true

# Run on main and dev branches
# Main branch needs build manager for publish-live releases
# Dev branch needs build manager for development testing
# Feature branches should not trigger full CI/CD pipeline
on:
  workflow_dispatch:  # üö¶ Manual trigger
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  checkout:
    name: üì• Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # üìö Full history for changelog

  pre-commit:
    name: üßπ Pre-commit Quality Checks
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache Python packages
        uses: actions/cache@v4
        id: cache-python-packages
        with:
          path: ~/.cache/pip
          key: python-pkgs-${{ runner.os }}-${{ hashFiles('tools/dependencies/requirements.txt') }}
          restore-keys: |
            python-pkgs-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/dependencies/requirements.txt

      - name: Install system dependencies for pre-commit hooks
        run: |
          # Install yamllint for YAML validation
          python -m pip install yamllint
          # Install additional tools if needed for other hooks
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Setup Node.js (for markdownlint)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: pre-commit-${{ runner.os }}-

      - name: Install pre-commit hooks
        run: pre-commit install --install-hooks

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  link-check:
    name: üîó Link Check
    needs: checkout
    uses: ./.github/workflows/link-check.yml

  update-contributors:
    name: üë• Update Contributors
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [pre-commit, link-check]
    uses: ./.github/workflows/update-contributors.yml

  build-dev:
    name: üß™ Build
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/dev'
    needs: [update-contributors]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        format: [html, pdf]
    uses: ./.github/workflows/quarto-build.yml
    with:
      environment: development
      os: ${{ matrix.os }}
      format: ${{ matrix.format }}
      target: dev


  build-main:
    name: üöÄ Build Main Branch
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: [update-contributors]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        format: [html, pdf]
    uses: ./.github/workflows/quarto-build.yml
    with:
      environment: development
      os: ${{ matrix.os }}
      format: ${{ matrix.format }}
      target: main


  heartbeat:
    name: üíì Build Heartbeat
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: [build-main]
    runs-on: ubuntu-latest
    steps:
      - name: üìä Create Build Status
        run: |
          echo "üíì Creating build heartbeat..."
          
          # Create a status file with build information
          cat > build-status.json << EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "status": "${{ needs.build-main.result }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "build_jobs": {
              "build-main": "${{ needs.build-main.result }}"
            }
          }
          EOF
          
          echo "üìä Build status created:"
          cat build-status.json
          
          # Also create a simple status file for easy checking
          echo "${{ needs.build-main.result }}" > build-status.txt
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-status.txt
          echo "${{ github.run_id }}" >> build-status.txt

  report-status:
    name: üìä Final Status Report
    if: always()
    needs: [
      pre-commit, 
      link-check,
      update-contributors,
      build-dev,
      build-main
    ]
    runs-on: ubuntu-latest
    steps:
      - name: üìã Generate Report Summary
        shell: bash
        run: |
          echo "# üìä Workflow Status Report" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "## üîç Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit Checks: ${{ needs.pre-commit.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Link Check: ${{ needs.link-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo "## üß™ Development Build" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.build-dev.result == 'success' && '‚úÖ Success' || needs.build-dev.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo "## üöÄ Main Branch Build" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.build-main.result == 'success' && '‚úÖ Success' || needs.build-main.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo "## üìù Metadata Updates" >> $GITHUB_STEP_SUMMARY
          echo "- Contributors: ${{ needs.update-contributors.result == 'success' && '‚úÖ Updated' || needs.update-contributors.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "‚è∞ Completed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

          FAILED=0
          [[ "${{ needs.pre-commit.result }}" != "success" ]] && FAILED=1
          [[ "${{ needs.link-check.result }}" != "success" ]] && FAILED=1
          [[ "${{ needs.update-contributors.result }}" != "success" && "${{ needs.update-contributors.result }}" != "skipped" ]] && FAILED=1
          [[ "${{ needs.build-dev.result }}" != "success" && "${{ needs.build-dev.result }}" != "skipped" ]] && FAILED=1
          [[ "${{ needs.build-main.result }}" != "success" && "${{ needs.build-main.result }}" != "skipped" ]] && FAILED=1

          if [[ $FAILED -eq 1 ]]; then
            echo "::error::‚ùå One or more workflow steps failed"
            exit 1
          else
            echo "‚úÖ All required checks passed successfully"
          fi
