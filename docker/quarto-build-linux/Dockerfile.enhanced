# MLSysBook Quarto Build Container - Enhanced with Progress Indicators
# Based on Ubuntu 22.04 with all dependencies pre-installed
# This container eliminates the 30-45 minute setup time for Linux builds

FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV R_LIBS_USER=/usr/local/lib/R/library
ENV QUARTO_LOG_LEVEL=INFO
ENV PYTHONIOENCODING=utf-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PATH=/usr/local/texlive/bin/x86_64-linux:$PATH

# === PHASE 1: SYSTEM DEPENDENCIES ===
RUN echo "🚀 === STARTING SYSTEM DEPENDENCIES INSTALLATION ===" && \
    echo "⏰ Estimated time: 2-3 minutes" && \
    echo "📊 Free disk space: $(df -h / | tail -1 | awk '{print $4}')" && \
    start_time=$(date +%s) && \
    \
    echo "🔄 Updating package lists..." && \
    apt-get update && \
    \
    echo "📦 Installing core system packages (42 packages)..." && \
    apt-get install -y \
    fonts-dejavu \
    fonts-freefont-ttf \
    gdk-pixbuf2.0-bin \
    libcairo2 \
    libfontconfig1 \
    libfontconfig1-dev \
    libfreetype6 \
    libfreetype6-dev \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libpangoft2-1.0-0 \
    libxml2-dev \
    libcurl4-openssl-dev \
    libjpeg-dev \
    libtiff5-dev \
    libpng-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    librsvg2-dev \
    libgdal-dev \
    libudunits2-dev \
    wget \
    curl \
    git \
    && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === SYSTEM DEPENDENCIES COMPLETE === (${duration}s)" && \
    echo "📊 Free disk space: $(df -h / | tail -1 | awk '{print $4}')"

# === PHASE 2: INKSCAPE INSTALLATION ===
RUN echo "🚀 === STARTING INKSCAPE INSTALLATION ===" && \
    echo "⏰ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "🔄 Adding Inkscape PPA repository..." && \
    apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:inkscape.dev/stable -y && \
    \
    echo "📦 Installing Inkscape..." && \
    apt-get update && \
    apt-get install -y inkscape && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === INKSCAPE INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 3: FONT CONFIGURATION ===
RUN echo "🚀 === STARTING FONT CONFIGURATION ===" && \
    echo "⏰ Estimated time: 30 seconds" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Installing additional fonts..." && \
    apt-get update && apt-get install -y \
    fonts-liberation \
    fontconfig && \
    \
    echo "🔄 Rebuilding font cache..." && \
    fc-cache -fv && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === FONT CONFIGURATION COMPLETE === (${duration}s)"

# === PHASE 4: INKSCAPE VERIFICATION ===
RUN echo "🚀 === TESTING INKSCAPE SVG TO PDF CONVERSION ===" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Creating test SVG file..." && \
    echo '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><circle cx="50" cy="50" r="40" fill="red"/></svg>' > test.svg && \
    \
    echo "🔄 Converting SVG to PDF..." && \
    inkscape --export-type=pdf --export-filename=test.pdf test.svg && \
    \
    echo "🔍 Verifying conversion..." && \
    if [ -f test.pdf ]; then \
        echo "✅ Inkscape SVG to PDF conversion successful!"; \
        echo "📊 Generated PDF size: $(ls -lh test.pdf | awk '{print $5}')"; \
    else \
        echo "❌ Inkscape SVG to PDF conversion failed."; \
        exit 1; \
    fi && \
    \
    echo "🧹 Cleaning test files..." && \
    rm -f test.svg test.pdf && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === INKSCAPE VERIFICATION COMPLETE === (${duration}s)"

# === PHASE 5: GHOSTSCRIPT INSTALLATION ===
RUN echo "🚀 === STARTING GHOSTSCRIPT INSTALLATION ===" && \
    echo "⏰ Estimated time: 30 seconds" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Installing Ghostscript..." && \
    apt-get update && apt-get install -y ghostscript && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === GHOSTSCRIPT INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 6: TEX LIVE INSTALLATION ===
COPY tools/dependencies/tl_packages /tmp/
RUN echo "🚀 === STARTING TEX LIVE INSTALLATION ===" && \
    echo "⏰ Estimated time: 8-12 minutes (largest phase)" && \
    echo "📊 Free disk space before: $(df -h / | tail -1 | awk '{print $4}')" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Installing TeX Live prerequisites..." && \
    apt-get update && apt-get install -y \
    perl \
    wget \
    xzdec && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "🔄 Downloading TeX Live installer (~4MB)..." && \
    wget -O /tmp/install-tl-unx.tar.gz "https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz" && \
    \
    echo "📦 Extracting TeX Live installer..." && \
    cd /tmp && tar -xzf install-tl-unx.tar.gz && \
    \
    echo "🔧 Creating TeX Live installation profile..." && \
    echo "selected_scheme scheme-infraonly" > /tmp/texlive.profile && \
    echo "tlpdbopt_install_docfiles 0" >> /tmp/texlive.profile && \
    echo "tlpdbopt_install_srcfiles 0" >> /tmp/texlive.profile && \
    echo "TEXDIR /usr/local/texlive" >> /tmp/texlive.profile && \
    echo "TEXMFCONFIG /usr/local/texlive/texmf-config" >> /tmp/texlive.profile && \
    echo "TEXMFHOME /usr/local/texlive/texmf-home" >> /tmp/texlive.profile && \
    echo "TEXMFLOCAL /usr/local/texlive/texmf-local" >> /tmp/texlive.profile && \
    echo "TEXMFSYSCONFIG /usr/local/texlive/texmf-config" >> /tmp/texlive.profile && \
    echo "TEXMFSYSVAR /usr/local/texlive/texmf-var" >> /tmp/texlive.profile && \
    echo "TEXMFVAR /usr/local/texlive/texmf-var" >> /tmp/texlive.profile && \
    \
    echo "🔄 Installing TeX Live base system..." && \
    /tmp/install-tl-*/install-tl --profile=/tmp/texlive.profile && \
    \
    echo "🔧 Setting up TeX Live PATH..." && \
    echo 'export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH' >> /etc/bash.bashrc && \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    \
    echo "📊 Analyzing tl_packages file..." && \
    collection_count=$(grep -c '^collection-' /tmp/tl_packages) && \
    echo "📦 Found $collection_count TeX Live collections to install" && \
    \
    echo "🔄 Installing TeX Live collections..." && \
    i=1 && \
    grep -E '^collection-' /tmp/tl_packages | while read collection; do \
        echo "📦 [$i/$collection_count] Installing $collection..."; \
        tlmgr install "$collection"; \
        i=$((i+1)); \
    done && \
    \
    echo "🧹 Cleaning up TeX Live installer..." && \
    rm -rf /tmp/install-tl-* /tmp/texlive.profile /tmp/install-tl-unx.tar.gz && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === TEX LIVE INSTALLATION COMPLETE === (${duration}s)" && \
    echo "📊 Free disk space after: $(df -h / | tail -1 | awk '{print $4}')" && \
    echo "📊 TeX Live disk usage: $(du -sh /usr/local/texlive 2>/dev/null || echo 'N/A')"

# === PHASE 7: TEX LIVE VERIFICATION ===
RUN echo "🚀 === VERIFYING TEX LIVE INSTALLATION ===" && \
    start_time=$(date +%s) && \
    \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "🔍 Checking TeX Live executables..." && \
    which lualatex && which pdflatex && \
    \
    echo "📊 TeX Live version information:" && \
    lualatex --version | head -1 && \
    \
    echo "🔍 Testing basic LaTeX compilation..." && \
    echo '\documentclass{article}' > /tmp/test.tex && \
    echo '\begin{document}' >> /tmp/test.tex && \
    echo 'Hello TeX Live!' >> /tmp/test.tex && \
    echo '\end{document}' >> /tmp/test.tex && \
    \
    cd /tmp && lualatex test.tex >/dev/null 2>&1 && \
    if [ -f test.pdf ]; then \
        echo "✅ LaTeX compilation test successful"; \
        echo "📊 Generated PDF size: $(ls -lh test.pdf | awk '{print $5}')"; \
    else \
        echo "❌ LaTeX compilation test failed"; \
        exit 1; \
    fi && \
    \
    echo "🧹 Cleaning test files..." && \
    rm -f /tmp/test.* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === TEX LIVE VERIFICATION COMPLETE === (${duration}s)"

# === PHASE 8: R INSTALLATION ===
RUN echo "🚀 === STARTING R INSTALLATION ===" && \
    echo "⏰ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Installing R and development packages..." && \
    apt-get update && apt-get install -y \
    r-base \
    r-base-dev \
    r-recommended && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "📊 R version: $(R --version | head -1)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === R INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 9: PYTHON INSTALLATION ===
RUN echo "🚀 === STARTING PYTHON INSTALLATION ===" && \
    echo "⏰ Estimated time: 1 minute" && \
    start_time=$(date +%s) && \
    \
    echo "📦 Installing Python 3 and development packages..." && \
    apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev && \
    \
    echo "🧹 Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "📊 Python version: $(python3 --version)" && \
    echo "📊 Pip version: $(pip3 --version)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === PYTHON INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 10: QUARTO INSTALLATION ===
RUN echo "🚀 === STARTING QUARTO INSTALLATION ===" && \
    echo "⏰ Estimated time: 30 seconds" && \
    start_time=$(date +%s) && \
    \
    echo "🔄 Downloading Quarto v1.7.31..." && \
    wget -q https://github.com/quarto-dev/quarto-cli/releases/download/v1.7.31/quarto-1.7.31-linux-amd64.deb && \
    \
    echo "📦 Installing Quarto..." && \
    dpkg -i quarto-1.7.31-linux-amd64.deb && \
    \
    echo "🧹 Cleaning installer..." && \
    rm quarto-1.7.31-linux-amd64.deb && \
    \
    echo "📊 Quarto version: $(quarto --version)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === QUARTO INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 11: SETUP DIRECTORIES ===
RUN echo "🚀 === SETTING UP DIRECTORIES ===" && \
    echo "🔧 Creating R library directory: $R_LIBS_USER" && \
    mkdir -p $R_LIBS_USER && \
    echo "📊 R library path: $(ls -la $R_LIBS_USER)" && \
    echo "✅ === DIRECTORY SETUP COMPLETE ==="

# Copy dependency files
COPY tools/dependencies/requirements.txt /tmp/
COPY tools/dependencies/install_packages.R /tmp/
COPY docker/quarto-build-linux/verify_r_packages.R /tmp/

# === PHASE 12: PYTHON PACKAGES ===
RUN echo "🚀 === STARTING PYTHON PACKAGE INSTALLATION ===" && \
    echo "⏰ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "🔄 Upgrading pip..." && \
    pip3 install --upgrade pip && \
    \
    echo "📊 Analyzing requirements.txt..." && \
    package_count=$(grep -v '^#' /tmp/requirements.txt | grep -v '^$' | wc -l) && \
    echo "📦 Found $package_count Python packages to install" && \
    \
    echo "🔄 Installing Python packages..." && \
    pip3 install -r /tmp/requirements.txt && \
    \
    echo "📊 Installed Python packages:" && \
    pip3 list | head -10 && \
    echo "📊 Total packages: $(pip3 list | wc -l)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === PYTHON PACKAGES COMPLETE === (${duration}s)"

# === PHASE 13: R PACKAGES ===
RUN echo "🚀 === STARTING R PACKAGE INSTALLATION ===" && \
    echo "⏰ Estimated time: 3-5 minutes" && \
    start_time=$(date +%s) && \
    \
    R --slave -e " \
    # Set options for better package installation \
    options(repos = c(CRAN = 'https://cran.rstudio.com')); \
    \
    cat('🔄 Starting R package installation...\n'); \
    cat(paste('📊 R library path:', Sys.getenv('R_LIBS_USER'), '\n')); \
    \
    # Create and set library path \
    lib_path <- Sys.getenv('R_LIBS_USER'); \
    dir.create(lib_path, showWarnings = FALSE, recursive = TRUE); \
    .libPaths(lib_path); \
    \
    # Install packages \
    cat('📦 [1/2] Installing remotes package...\n'); \
    install.packages('remotes'); \
    \
    if (file.exists('/tmp/install_packages.R')) { \
      cat('📦 [2/2] Installing packages from tools/dependencies/install_packages.R...\n'); \
      source('/tmp/install_packages.R'); \
    } else { \
      cat('⚠️ No tools/dependencies/install_packages.R found, installing common packages\n'); \
      pkgs <- c('rmarkdown', 'knitr', 'tidyverse', 'ggplot2', 'bookdown'); \
      cat(paste('📦 Installing packages:', paste(pkgs, collapse=', '), '\n')); \
      install.packages(pkgs); \
    }; \
    \
    cat('✅ R package installation complete\n'); \
    cat('📊 Installed packages summary:\n'); \
    ip <- installed.packages()[, 'Package']; \
    print(head(ip, 10)); \
    cat(paste('📊 Total R packages installed:', length(ip), '\n')); \
    " && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === R PACKAGES COMPLETE === (${duration}s)"

# === PHASE 14: R PACKAGE VERIFICATION ===
RUN echo "🚀 === VERIFYING R PACKAGE INSTALLATION ===" && \
    start_time=$(date +%s) && \
    \
    echo "🔍 Running R package verification script..." && \
    Rscript /tmp/verify_r_packages.R && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === R PACKAGE VERIFICATION COMPLETE === (${duration}s)"

# === PHASE 15: CLEANUP ===
RUN echo "🚀 === STARTING CLEANUP ===" && \
    start_time=$(date +%s) && \
    \
    echo "🧹 Removing temporary files..." && \
    rm -rf /tmp/requirements.txt /tmp/install_packages.R /tmp/verify_r_packages.R /tmp/tl_packages && \
    \
    echo "📊 Final disk space: $(df -h / | tail -1 | awk '{print $4}')" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === CLEANUP COMPLETE === (${duration}s)"

# Set working directory
WORKDIR /workspace

# === PHASE 16: FINAL VERIFICATION ===
RUN echo "🚀 === FINAL VERIFICATION ===" && \
    start_time=$(date +%s) && \
    \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "🔍 Verifying all installations..." && \
    \
    echo "📊 Quarto: $(quarto --version)" && \
    echo "📊 Python: $(python3 --version)" && \
    echo "📊 R: $(R --version | head -1)" && \
    echo "📊 TeX Live: $(lualatex --version | head -1)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "✅ === FINAL VERIFICATION COMPLETE === (${duration}s)"

# === FINAL HEALTH CHECK ===
RUN export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "🎉 === CONTAINER BUILD COMPLETED SUCCESSFULLY ===" && \
    echo "📊 Final Status Summary:" && \
    echo "  ✅ Quarto version: $(quarto --version)" && \
    echo "  ✅ Python version: $(python3 --version)" && \
    echo "  ✅ R version: $(R --version | head -1)" && \
    echo "  ✅ TeX Live: $(lualatex --version | head -1)" && \
    echo "  📊 Final disk usage: $(df -h / | tail -1 | awk '{print $4}') free" && \
    echo "🎉 === READY FOR QUARTO BUILDS ==="