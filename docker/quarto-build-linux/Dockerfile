# MLSysBook Quarto Build Container
# Based on Ubuntu 22.04 with all dependencies pre-installed
# This container eliminates the 30-45 minute setup time for Linux builds

FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV R_LIBS_USER=/usr/local/lib/R/library
ENV QUARTO_LOG_LEVEL=INFO
ENV PYTHONIOENCODING=utf-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PATH=/usr/local/texlive/bin/x86_64-linux:$PATH

# === PHASE 1: SYSTEM DEPENDENCIES ===
RUN echo "üöÄ === STARTING SYSTEM DEPENDENCIES INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 2-3 minutes" && \
    echo "üìä Free disk space: $(df -h / | tail -1 | awk '{print $4}')" && \
    start_time=$(date +%s) && \
    \
    echo "üîÑ Updating package lists..." && \
    apt-get update && \
    \
    echo "üì¶ Installing core system packages (25 packages)..." && \
    apt-get install -y \
    fonts-dejavu \
    fonts-freefont-ttf \
    gdk-pixbuf2.0-bin \
    libcairo2 \
    libfontconfig1 \
    libfontconfig1-dev \
    libfreetype6 \
    libfreetype6-dev \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libpangoft2-1.0-0 \
    libxml2-dev \
    libcurl4-openssl-dev \
    libjpeg-dev \
    libtiff5-dev \
    libpng-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    librsvg2-dev \
    libgdal-dev \
    libudunits2-dev \
    wget \
    curl \
    git && \
    \
    echo "üßπ Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === SYSTEM DEPENDENCIES COMPLETE === (${duration}s)" && \
    echo "üìä Free disk space: $(df -h / | tail -1 | awk '{print $4}')"

# === PHASE 2: INKSCAPE INSTALLATION ===
RUN echo "üöÄ === STARTING INKSCAPE INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "üîÑ Adding Inkscape PPA repository..." && \
    apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:inkscape.dev/stable -y && \
    \
    echo "üì¶ Installing Inkscape..." && \
    apt-get update && \
    apt-get install -y inkscape && \
    \
    echo "üßπ Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === INKSCAPE INSTALLATION COMPLETE === (${duration}s)"

# Install font dependencies (note: fonts-freefont-ttf already installed above)
RUN apt-get update && apt-get install -y \
    fonts-liberation \
    fontconfig && \
    fc-cache -fv && \
    rm -rf /var/lib/apt/lists/*

# Test Inkscape SVG to PDF conversion (same as your workflow)
RUN echo '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><circle cx="50" cy="50" r="40" fill="red"/></svg>' > test.svg && \
    inkscape --export-type=pdf --export-filename=test.pdf test.svg && \
    if [ -f test.pdf ]; then \
        echo "‚úÖ Inkscape SVG to PDF conversion successful!"; \
        ls -lh test.pdf; \
    else \
        echo "‚ùå Inkscape SVG to PDF conversion failed."; \
        exit 1; \
    fi && \
    rm -f test.svg test.pdf

# === PHASE 5: GHOSTSCRIPT INSTALLATION ===
RUN echo "üöÄ === STARTING GHOSTSCRIPT INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 30 seconds" && \
    start_time=$(date +%s) && \
    \
    echo "üì¶ Installing Ghostscript..." && \
    apt-get update && apt-get install -y ghostscript && \
    \
    echo "üßπ Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === GHOSTSCRIPT INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 4: TEX LIVE INSTALLATION ===
COPY tools/dependencies/tl_packages /tmp/tl_packages
RUN echo "üöÄ === STARTING TEX LIVE INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 8-12 minutes (largest phase)" && \
    echo "üìä Free disk space before: $(df -h / | tail -1 | awk '{print $4}')" && \
    start_time=$(date +%s) && \
    \
    echo "üì¶ Installing TeX Live prerequisites..." && \
    apt-get update && apt-get install -y \
    perl \
    wget \
    xzdec && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "üîÑ Downloading TeX Live installer (~4MB)..." && \
    wget -O /tmp/install-tl-unx.tar.gz "https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz" && \
    \
    echo "üì¶ Extracting TeX Live installer..." && \
    cd /tmp && tar -xzf install-tl-unx.tar.gz && \
    \
    echo "üîß Creating TeX Live installation profile..." && \
    echo "selected_scheme scheme-infraonly" > /tmp/texlive.profile && \
    echo "tlpdbopt_install_docfiles 0" >> /tmp/texlive.profile && \
    echo "tlpdbopt_install_srcfiles 0" >> /tmp/texlive.profile && \
    echo "TEXDIR /usr/local/texlive" >> /tmp/texlive.profile && \
    echo "TEXMFCONFIG /usr/local/texlive/texmf-config" >> /tmp/texlive.profile && \
    echo "TEXMFHOME /usr/local/texlive/texmf-home" >> /tmp/texlive.profile && \
    echo "TEXMFLOCAL /usr/local/texlive/texmf-local" >> /tmp/texlive.profile && \
    echo "TEXMFSYSCONFIG /usr/local/texlive/texmf-config" >> /tmp/texlive.profile && \
    echo "TEXMFSYSVAR /usr/local/texlive/texmf-var" >> /tmp/texlive.profile && \
    echo "TEXMFVAR /usr/local/texlive/texmf-var" >> /tmp/texlive.profile && \
    \
    echo "üîÑ Installing TeX Live base system..." && \
    /tmp/install-tl-*/install-tl --profile=/tmp/texlive.profile && \
    \
    echo "üîß Setting up TeX Live PATH..." && \
    echo 'export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH' >> /etc/bash.bashrc && \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    \
    echo "üìä Analyzing tl_packages file..." && \
    collection_count=$(grep -c '^collection-' /tmp/tl_packages) && \
    echo "üì¶ Found $collection_count TeX Live collections to install" && \
    \
    echo "üîÑ Installing TeX Live collections..." && \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "üìç Checking if tlmgr is available..." && \
    which tlmgr && tlmgr --version || echo "‚ùå tlmgr not found or not working" && \
    i=1 && \
    while IFS= read -r collection; do \
        case "$collection" in \
            collection-*) \
                echo "üì¶ [$i/$collection_count] Installing $collection..."; \
                if command -v tlmgr >/dev/null 2>&1; then \
                    tlmgr install "$collection" || echo "‚ö†Ô∏è Failed to install $collection, continuing..."; \
                else \
                    echo "‚ö†Ô∏è tlmgr not available, skipping $collection"; \
                fi; \
                i=$((i+1)); \
                ;; \
        esac; \
    done < /tmp/tl_packages && \
    \
    echo "üßπ Cleaning up TeX Live installer..." && \
    rm -rf /tmp/install-tl-* /tmp/texlive.profile /tmp/install-tl-unx.tar.gz && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === TEX LIVE INSTALLATION COMPLETE === (${duration}s)" && \
    echo "üìä Free disk space after: $(df -h / | tail -1 | awk '{print $4}')" && \
    echo "üìä TeX Live disk usage: $(du -sh /usr/local/texlive 2>/dev/null || echo 'N/A')"

# Verify TeX Live installation (with error handling)
RUN echo "üîÑ Verifying TeX Live installation..." && \
    export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "üìç PATH: $PATH" && \
    echo "üìç Checking TeX Live directory:" && \
    ls -la /usr/local/texlive/ || echo "‚ùå TeX Live directory not found" && \
    ls -la /usr/local/texlive/bin/ || echo "‚ùå TeX Live bin directory not found" && \
    if [ -f /usr/local/texlive/bin/x86_64-linux/lualatex ]; then \
        echo "‚úÖ lualatex found"; \
        /usr/local/texlive/bin/x86_64-linux/lualatex --version | head -1; \
    else \
        echo "‚ùå lualatex not found, checking for alternative locations"; \
        find /usr/local/texlive -name "lualatex" -type f 2>/dev/null || echo "No lualatex found anywhere"; \
    fi && \
    echo "‚úÖ TeX Live verification complete (allowing partial failures)"

# === PHASE 6: R INSTALLATION ===
RUN echo "üöÄ === STARTING R INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "üì¶ Installing R and development packages..." && \
    apt-get update && apt-get install -y \
    r-base \
    r-base-dev \
    r-recommended && \
    \
    echo "üßπ Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "üìä R version: $(R --version | head -1)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === R INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 7: PYTHON INSTALLATION ===
RUN echo "üöÄ === STARTING PYTHON INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 1 minute" && \
    start_time=$(date +%s) && \
    \
    echo "üì¶ Installing Python 3 and development packages..." && \
    apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev && \
    \
    echo "üßπ Cleaning package cache..." && \
    rm -rf /var/lib/apt/lists/* && \
    \
    echo "üìä Python version: $(python3 --version)" && \
    echo "üìä Pip version: $(pip3 --version)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === PYTHON INSTALLATION COMPLETE === (${duration}s)"

# === PHASE 3: QUARTO INSTALLATION ===
RUN echo "üöÄ === STARTING QUARTO INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 1 minute" && \
    start_time=$(date +%s) && \
    \
    echo "üì¶ Downloading Quarto 1.7.31..." && \
    wget -q https://github.com/quarto-dev/quarto-cli/releases/download/v1.7.31/quarto-1.7.31-linux-amd64.deb && \
    \
    echo "üì¶ Installing Quarto..." && \
    dpkg -i quarto-1.7.31-linux-amd64.deb && \
    \
    echo "üßπ Cleaning up installer..." && \
    rm quarto-1.7.31-linux-amd64.deb && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === QUARTO INSTALLATION COMPLETE === (${duration}s)"

# Create R library directory
RUN mkdir -p $R_LIBS_USER

# Copy dependency files
COPY tools/dependencies/requirements/ /tmp/requirements/
COPY tools/dependencies/requirements-build.txt /tmp/requirements.txt
COPY tools/dependencies/install_packages.R /tmp/install_packages.R
COPY docker/quarto-build-linux/verify_r_packages.R /tmp/verify_r_packages.R

# === PHASE 8: PYTHON PACKAGES ===
RUN echo "üöÄ === STARTING PYTHON PACKAGE INSTALLATION ===" && \
    echo "‚è∞ Estimated time: 1-2 minutes" && \
    start_time=$(date +%s) && \
    \
    echo "üîÑ Upgrading pip..." && \
    pip3 install --upgrade pip && \
    \
    echo "üìä Analyzing requirements.txt..." && \
    package_count=$(grep -v '^#' /tmp/requirements.txt | grep -v '^$' | wc -l) && \
    echo "üì¶ Found $package_count Python packages to install" && \
    \
    echo "üîÑ Installing Python packages with space optimization..." && \
    pip3 install --no-cache-dir -r /tmp/requirements.txt && \
    \
    echo "üßπ Cleaning Python installation caches..." && \
    pip3 cache purge && \
    find /usr -name "*.pyc" -delete && \
    find /usr -name "__pycache__" -type d -exec rm -rf {} + || true && \
    \
    echo "üìä Installed Python packages:" && \
    pip3 list | head -10 && \
    echo "üìä Total packages: $(pip3 list | wc -l)" && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === PYTHON PACKAGES COMPLETE === (${duration}s)"

# === PHASE 9: R PACKAGES ===
# Install R packages (using same process as successful workflow)
RUN R --slave -e " \
    # Set options for better package installation \
    options(repos = c(CRAN = 'https://cran.rstudio.com')); \
    \
    cat('üîÑ Installing R packages...\n'); \
    cat(paste('R library path:', Sys.getenv('R_LIBS_USER'), '\n')); \
    \
    # Create and set library path \
    lib_path <- Sys.getenv('R_LIBS_USER'); \
    dir.create(lib_path, showWarnings = FALSE, recursive = TRUE); \
    .libPaths(lib_path); \
    \
    # Install packages \
    cat('üì¶ Installing remotes package...\n'); \
    install.packages('remotes'); \
    \
    if (file.exists('/tmp/install_packages.R')) { \
      cat('üì¶ Installing packages from tools/dependencies/install_packages.R...\n'); \
      source('/tmp/install_packages.R'); \
    } else { \
      cat('‚ö†Ô∏è No tools/dependencies/install_packages.R found, installing common packages\n'); \
      pkgs <- c('rmarkdown', 'knitr', 'tidyverse', 'ggplot2', 'bookdown'); \
      cat(paste('üì¶ Installing packages:', paste(pkgs, collapse=', '), '\n')); \
      install.packages(pkgs); \
    }; \
    \
    cat('‚úÖ R package installation complete\n'); \
    cat('üìä Installed packages:\n'); \
    ip <- installed.packages()[, 'Package']; \
    print(head(ip, 10)); \
    cat(paste('Total packages installed:', nrow(ip), '\n')); \
    "

# === PHASE 10: R PACKAGE VERIFICATION ===
RUN echo "üîç Verifying R package installation..." && \
    Rscript /tmp/verify_r_packages.R

# === PHASE 11: COMPREHENSIVE CLEANUP ===
RUN echo "üöÄ === STARTING COMPREHENSIVE CLEANUP ===" && \
    echo "üìä Disk space before cleanup: $(df -h / | tail -1 | awk '{print $4}')" && \
    start_time=$(date +%s) && \
    \
    echo "üßπ Removing temporary files..." && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    \
    echo "üßπ Cleaning package caches..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/* && \
    \
    echo "üßπ Cleaning Python caches..." && \
    find /usr -name "*.pyc" -delete && \
    find /usr -name "__pycache__" -type d -exec rm -rf {} + || true && \
    pip3 cache purge || true && \
    \
    echo "üßπ Cleaning R temporary files..." && \
    rm -rf /tmp/Rtmp* || true && \
    rm -rf /var/lib/R/site-library/*/help || true && \
    \
    echo "üßπ Cleaning TeX Live caches and docs..." && \
    rm -rf /usr/local/texlive/*/texmf-var/luatex-cache/* || true && \
    rm -rf /usr/local/texlive/*/texmf-var/web2c/* || true && \
    \
    echo "üßπ Removing unnecessary system files..." && \
    rm -rf /usr/share/doc/* && \
    rm -rf /usr/share/man/* && \
    rm -rf /usr/share/info/* && \
    rm -rf /var/log/* && \
    \
    end_time=$(date +%s) && \
    duration=$((end_time - start_time)) && \
    echo "‚úÖ === COMPREHENSIVE CLEANUP COMPLETE === (${duration}s)" && \
    echo "üìä Final disk space: $(df -h / | tail -1 | awk '{print $4}')"

# Set working directory
WORKDIR /workspace

# Verify installations
RUN export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    quarto --version && \
    python3 --version && \
    R --version && \
    lualatex --version

# Health check
RUN export PATH=/usr/local/texlive/bin/x86_64-linux:$PATH && \
    echo "‚úÖ Container build completed successfully" && \
    echo "üìä Quarto version: $(quarto --version)" && \
    echo "üìä Python version: $(python3 --version)" && \
    echo "üìä R version: $(R --version | head -1)" && \
    echo "üìä TeX Live: $(lualatex --version | head -1)"